/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
    AccountsBalanceGetRequest,
    AccountsGetRequest,
    AccountsGetResponse,
    ApplicationGetRequest,
    ApplicationGetResponse,
    AssetReportAuditCopyCreateRequest,
    AssetReportAuditCopyCreateResponse,
    AssetReportAuditCopyGetRequest,
    AssetReportAuditCopyRemoveRequest,
    AssetReportAuditCopyRemoveResponse,
    AssetReportCreateRequest,
    AssetReportCreateResponse,
    AssetReportFilterRequest,
    AssetReportFilterResponse,
    AssetReportFreddieGetRequest,
    AssetReportFreddieGetResponse,
    AssetReportGetRequest,
    AssetReportGetResponse,
    AssetReportPDFGetRequest,
    AssetReportRefreshRequest,
    AssetReportRefreshResponse,
    AssetReportRemoveRequest,
    AssetReportRemoveResponse,
    AuthGetRequest,
    AuthGetResponse,
    BankTransferBalanceGetRequest,
    BankTransferBalanceGetResponse,
    BankTransferCancelRequest,
    BankTransferCancelResponse,
    BankTransferCreateRequest,
    BankTransferCreateResponse,
    BankTransferEventListRequest,
    BankTransferEventListResponse,
    BankTransferEventSyncRequest,
    BankTransferEventSyncResponse,
    BankTransferGetRequest,
    BankTransferGetResponse,
    BankTransferListRequest,
    BankTransferListResponse,
    BankTransferMigrateAccountRequest,
    BankTransferMigrateAccountResponse,
    BankTransferSweepGetRequest,
    BankTransferSweepGetResponse,
    BankTransferSweepListRequest,
    BankTransferSweepListResponse,
    BaseReportCreateRequest,
    BaseReportCreateResponse,
    BaseReportGetRequest,
    BaseReportGetResponse,
    BeaconAccountRiskEvaluateRequest,
    BeaconAccountRiskEvaluateResponse,
    BeaconDuplicateGetRequest,
    BeaconDuplicateGetResponse,
    BeaconReportCreateRequest,
    BeaconReportCreateResponse,
    BeaconReportGetRequest,
    BeaconReportGetResponse,
    BeaconReportListRequest,
    BeaconReportListResponse,
    BeaconReportSyndicationGetRequest,
    BeaconReportSyndicationGetResponse,
    BeaconReportSyndicationListRequest,
    BeaconReportSyndicationListResponse,
    BeaconUserCreateRequest,
    BeaconUserCreateResponse,
    BeaconUserGetRequest,
    BeaconUserGetResponse,
    BeaconUserHistoryListRequest,
    BeaconUserHistoryListResponse,
    BeaconUserReviewRequest,
    BeaconUserUpdateRequest,
    BeaconUserUpdateResponse,
    CategoriesGetResponse,
    CraBankIncomeCreateRequest,
    CraBankIncomeCreateResponse,
    CraBankIncomeGetRequest,
    CraBankIncomeGetResponse,
    CraPartnerInsightsGetRequest,
    CraPartnerInsightsGetResponse,
    CreditAuditCopyTokenCreateRequest,
    CreditAuditCopyTokenCreateResponse,
    CreditAuditCopyTokenRemoveRequest,
    CreditAuditCopyTokenRemoveResponse,
    CreditAuditCopyTokenUpdateRequest,
    CreditAuditCopyTokenUpdateResponse,
    CreditBankEmploymentGetRequest,
    CreditBankEmploymentGetResponse,
    CreditBankIncomeGetRequest,
    CreditBankIncomeGetResponse,
    CreditBankIncomePDFGetRequest,
    CreditBankIncomeRefreshRequest,
    CreditBankIncomeRefreshResponse,
    CreditBankIncomeWebhookUpdateRequest,
    CreditBankIncomeWebhookUpdateResponse,
    CreditBankStatementsUploadsGetRequest,
    CreditBankStatementsUploadsGetResponse,
    CreditEmploymentGetRequest,
    CreditEmploymentGetResponse,
    CreditFreddieMacReportsGetRequest,
    CreditFreddieMacReportsGetResponse,
    CreditPayrollIncomeGetRequest,
    CreditPayrollIncomeGetResponse,
    CreditPayrollIncomeParsingConfigUpdateRequest,
    CreditPayrollIncomeParsingConfigUpdateResponse,
    CreditPayrollIncomePrecheckRequest,
    CreditPayrollIncomePrecheckResponse,
    CreditPayrollIncomeRefreshRequest,
    CreditPayrollIncomeRefreshResponse,
    CreditPayrollIncomeRiskSignalsGetRequest,
    CreditPayrollIncomeRiskSignalsGetResponse,
    CreditRelayCreateRequest,
    CreditRelayCreateResponse,
    CreditRelayGetRequest,
    CreditRelayPDFGetRequest,
    CreditRelayRefreshRequest,
    CreditRelayRefreshResponse,
    CreditRelayRemoveRequest,
    CreditRelayRemoveResponse,
    CreditSessionsGetRequest,
    CreditSessionsGetResponse,
    DashboardUserGetRequest,
    DashboardUserGetResponse,
    DashboardUserListRequest,
    DashboardUserListResponse,
    DepositSwitchAltCreateRequest,
    DepositSwitchAltCreateResponse,
    DepositSwitchCreateRequest,
    DepositSwitchCreateResponse,
    DepositSwitchGetRequest,
    DepositSwitchGetResponse,
    DepositSwitchTokenCreateRequest,
    DepositSwitchTokenCreateResponse,
    EmployersSearchRequest,
    EmployersSearchResponse,
    EmploymentVerificationGetRequest,
    EmploymentVerificationGetResponse,
    FDXNotification,
    IdentityGetRequest,
    IdentityGetResponse,
    IdentityMatchRequest,
    IdentityMatchResponse,
    IdentityRefreshRequest,
    IdentityRefreshResponse,
    IdentityVerificationAutofillCreateRequest,
    IdentityVerificationAutofillCreateResponse,
    IdentityVerificationCreateRequest,
    IdentityVerificationCreateResponse,
    IdentityVerificationGetRequest,
    IdentityVerificationGetResponse,
    IdentityVerificationListRequest,
    IdentityVerificationListResponse,
    IdentityVerificationRetryRequest,
    IdentityVerificationRetryResponse,
    IncomeVerificationCreateRequest,
    IncomeVerificationCreateResponse,
    IncomeVerificationDocumentsDownloadRequest,
    IncomeVerificationPaystubsGetRequest,
    IncomeVerificationPaystubsGetResponse,
    IncomeVerificationPrecheckRequest,
    IncomeVerificationPrecheckResponse,
    IncomeVerificationTaxformsGetRequest,
    IncomeVerificationTaxformsGetResponse,
    InstitutionsGetByIdRequest,
    InstitutionsGetByIdResponse,
    InstitutionsGetRequest,
    InstitutionsGetResponse,
    InstitutionsSearchRequest,
    InstitutionsSearchResponse,
    InvestmentsAuthGetRequest,
    InvestmentsAuthGetResponse,
    InvestmentsHoldingsGetRequest,
    InvestmentsHoldingsGetResponse,
    InvestmentsRefreshRequest,
    InvestmentsRefreshResponse,
    InvestmentsTransactionsGetRequest,
    InvestmentsTransactionsGetResponse,
    ItemAccessTokenInvalidateRequest,
    ItemAccessTokenInvalidateResponse,
    ItemActivityListRequest,
    ItemActivityListResponse,
    ItemApplicationListRequest,
    ItemApplicationListResponse,
    ItemApplicationScopesUpdateRequest,
    ItemApplicationScopesUpdateResponse,
    ItemApplicationUnlinkRequest,
    ItemApplicationUnlinkResponse,
    ItemGetRequest,
    ItemGetResponse,
    ItemImportRequest,
    ItemImportResponse,
    ItemPublicTokenCreateRequest,
    ItemPublicTokenCreateResponse,
    ItemPublicTokenExchangeRequest,
    ItemPublicTokenExchangeResponse,
    ItemRemoveRequest,
    ItemRemoveResponse,
    ItemWebhookUpdateRequest,
    ItemWebhookUpdateResponse,
    LiabilitiesGetRequest,
    LiabilitiesGetResponse,
    LinkDeliveryCreateRequest,
    LinkDeliveryCreateResponse,
    LinkDeliveryGetRequest,
    LinkDeliveryGetResponse,
    LinkOAuthCorrelationIdExchangeRequest,
    LinkOAuthCorrelationIdExchangeResponse,
    LinkTokenCreateRequest,
    LinkTokenCreateResponse,
    LinkTokenGetRequest,
    LinkTokenGetResponse,
    PartnerCustomerCreateRequest,
    PartnerCustomerCreateResponse,
    PartnerCustomerEnableRequest,
    PartnerCustomerEnableResponse,
    PartnerCustomerGetRequest,
    PartnerCustomerGetResponse,
    PartnerCustomerOAuthInstitutionsGetRequest,
    PartnerCustomerOAuthInstitutionsGetResponse,
    PartnerCustomerRemoveRequest,
    PartnerCustomerRemoveResponse,
    PaymentInitiationConsentCreateRequest,
    PaymentInitiationConsentCreateResponse,
    PaymentInitiationConsentGetRequest,
    PaymentInitiationConsentGetResponse,
    PaymentInitiationConsentPaymentExecuteRequest,
    PaymentInitiationConsentPaymentExecuteResponse,
    PaymentInitiationConsentRevokeRequest,
    PaymentInitiationConsentRevokeResponse,
    PaymentInitiationPaymentCreateRequest,
    PaymentInitiationPaymentCreateResponse,
    PaymentInitiationPaymentGetRequest,
    PaymentInitiationPaymentGetResponse,
    PaymentInitiationPaymentListRequest,
    PaymentInitiationPaymentListResponse,
    PaymentInitiationPaymentReverseRequest,
    PaymentInitiationPaymentReverseResponse,
    PaymentInitiationPaymentTokenCreateRequest,
    PaymentInitiationPaymentTokenCreateResponse,
    PaymentInitiationRecipientCreateRequest,
    PaymentInitiationRecipientCreateResponse,
    PaymentInitiationRecipientGetRequest,
    PaymentInitiationRecipientGetResponse,
    PaymentInitiationRecipientListRequest,
    PaymentInitiationRecipientListResponse,
    PaymentProfileCreateRequest,
    PaymentProfileCreateResponse,
    PaymentProfileGetRequest,
    PaymentProfileGetResponse,
    PaymentProfileRemoveRequest,
    PaymentProfileRemoveResponse,
    PlaidError,
    ProcessorAccountGetRequest,
    ProcessorAccountGetResponse,
    ProcessorApexProcessorTokenCreateRequest,
    ProcessorAuthGetRequest,
    ProcessorAuthGetResponse,
    ProcessorBalanceGetRequest,
    ProcessorBalanceGetResponse,
    ProcessorBankTransferCreateRequest,
    ProcessorBankTransferCreateResponse,
    ProcessorIdentityGetRequest,
    ProcessorIdentityGetResponse,
    ProcessorIdentityMatchRequest,
    ProcessorIdentityMatchResponse,
    ProcessorLiabilitiesGetRequest,
    ProcessorLiabilitiesGetResponse,
    ProcessorSignalDecisionReportRequest,
    ProcessorSignalDecisionReportResponse,
    ProcessorSignalEvaluateRequest,
    ProcessorSignalEvaluateResponse,
    ProcessorSignalPrepareRequest,
    ProcessorSignalPrepareResponse,
    ProcessorSignalReturnReportRequest,
    ProcessorSignalReturnReportResponse,
    ProcessorStripeBankAccountTokenCreateRequest,
    ProcessorStripeBankAccountTokenCreateResponse,
    ProcessorTokenCreateRequest,
    ProcessorTokenCreateResponse,
    ProcessorTokenPermissionsGetRequest,
    ProcessorTokenPermissionsGetResponse,
    ProcessorTokenPermissionsSetRequest,
    ProcessorTokenPermissionsSetResponse,
    ProcessorTokenWebhookUpdateRequest,
    ProcessorTokenWebhookUpdateResponse,
    ProcessorTransactionsGetRequest,
    ProcessorTransactionsGetResponse,
    ProcessorTransactionsRecurringGetRequest,
    ProcessorTransactionsRecurringGetResponse,
    ProcessorTransactionsRefreshRequest,
    ProcessorTransactionsRefreshResponse,
    ProcessorTransactionsSyncRequest,
    ProcessorTransactionsSyncResponse,
    ProfileGetRequest,
    ProfileGetResponse,
    SandboxBankIncomeFireWebhookRequest,
    SandboxBankIncomeFireWebhookResponse,
    SandboxBankTransferFireWebhookRequest,
    SandboxBankTransferFireWebhookResponse,
    SandboxBankTransferSimulateRequest,
    SandboxBankTransferSimulateResponse,
    SandboxIncomeFireWebhookRequest,
    SandboxIncomeFireWebhookResponse,
    SandboxItemFireWebhookRequest,
    SandboxItemFireWebhookResponse,
    SandboxItemResetLoginRequest,
    SandboxItemResetLoginResponse,
    SandboxItemSetVerificationStatusRequest,
    SandboxItemSetVerificationStatusResponse,
    SandboxOauthSelectAccountsRequest,
    SandboxPaymentProfileResetLoginRequest,
    SandboxPaymentProfileResetLoginResponse,
    SandboxProcessorTokenCreateRequest,
    SandboxProcessorTokenCreateResponse,
    SandboxPublicTokenCreateRequest,
    SandboxPublicTokenCreateResponse,
    SandboxTransferFireWebhookRequest,
    SandboxTransferFireWebhookResponse,
    SandboxTransferLedgerDepositSimulateRequest,
    SandboxTransferLedgerDepositSimulateResponse,
    SandboxTransferLedgerSimulateAvailableRequest,
    SandboxTransferLedgerSimulateAvailableResponse,
    SandboxTransferLedgerWithdrawSimulateRequest,
    SandboxTransferLedgerWithdrawSimulateResponse,
    SandboxTransferRefundSimulateRequest,
    SandboxTransferRefundSimulateResponse,
    SandboxTransferRepaymentSimulateRequest,
    SandboxTransferRepaymentSimulateResponse,
    SandboxTransferSimulateRequest,
    SandboxTransferSimulateResponse,
    SandboxTransferSweepSimulateRequest,
    SandboxTransferSweepSimulateResponse,
    SandboxTransferTestClockAdvanceRequest,
    SandboxTransferTestClockAdvanceResponse,
    SandboxTransferTestClockCreateRequest,
    SandboxTransferTestClockCreateResponse,
    SandboxTransferTestClockGetRequest,
    SandboxTransferTestClockGetResponse,
    SandboxTransferTestClockListRequest,
    SandboxTransferTestClockListResponse,
    SignalDecisionReportRequest,
    SignalDecisionReportResponse,
    SignalEvaluateRequest,
    SignalEvaluateResponse,
    SignalPrepareRequest,
    SignalPrepareResponse,
    SignalReturnReportRequest,
    SignalReturnReportResponse,
    StatementsDownloadRequest,
    StatementsListRequest,
    StatementsListResponse,
    StatementsRefreshRequest,
    StatementsRefreshResponse,
    TransactionsEnhanceGetRequest,
    TransactionsEnhanceGetResponse,
    TransactionsEnrichRequest,
    TransactionsEnrichResponse,
    TransactionsGetRequest,
    TransactionsGetResponse,
    TransactionsRecurringGetRequest,
    TransactionsRecurringGetResponse,
    TransactionsRefreshRequest,
    TransactionsRefreshResponse,
    TransactionsRulesCreateRequest,
    TransactionsRulesCreateResponse,
    TransactionsRulesListRequest,
    TransactionsRulesListResponse,
    TransactionsRulesRemoveRequest,
    TransactionsRulesRemoveResponse,
    TransactionsSyncRequest,
    TransactionsSyncResponse,
    TransactionsUserInsightsGetRequest,
    TransactionsUserInsightsGetResponse,
    TransferAuthorizationCreateRequest,
    TransferAuthorizationCreateResponse,
    TransferBalanceGetRequest,
    TransferBalanceGetResponse,
    TransferCancelRequest,
    TransferCancelResponse,
    TransferCapabilitiesGetRequest,
    TransferCapabilitiesGetResponse,
    TransferConfigurationGetRequest,
    TransferConfigurationGetResponse,
    TransferCreateRequest,
    TransferCreateResponse,
    TransferDiligenceDocumentUploadRequest,
    TransferDiligenceDocumentUploadResponse,
    TransferDiligenceSubmitRequest,
    TransferDiligenceSubmitResponse,
    TransferEventListRequest,
    TransferEventListResponse,
    TransferEventSyncRequest,
    TransferEventSyncResponse,
    TransferGetRequest,
    TransferGetResponse,
    TransferIntentCreateRequest,
    TransferIntentCreateResponse,
    TransferIntentGetRequest,
    TransferIntentGetResponse,
    TransferLedgerDepositRequest,
    TransferLedgerDepositResponse,
    TransferLedgerDistributeRequest,
    TransferLedgerDistributeResponse,
    TransferLedgerGetRequest,
    TransferLedgerGetResponse,
    TransferLedgerWithdrawRequest,
    TransferLedgerWithdrawResponse,
    TransferListRequest,
    TransferListResponse,
    TransferMetricsGetRequest,
    TransferMetricsGetResponse,
    TransferMigrateAccountRequest,
    TransferMigrateAccountResponse,
    TransferOriginatorCreateRequest,
    TransferOriginatorCreateResponse,
    TransferOriginatorFundingAccountUpdateRequest,
    TransferOriginatorFundingAccountUpdateResponse,
    TransferOriginatorGetRequest,
    TransferOriginatorGetResponse,
    TransferOriginatorListRequest,
    TransferOriginatorListResponse,
    TransferQuestionnaireCreateRequest,
    TransferQuestionnaireCreateResponse,
    TransferRecurringCancelRequest,
    TransferRecurringCancelResponse,
    TransferRecurringCreateRequest,
    TransferRecurringCreateResponse,
    TransferRecurringGetRequest,
    TransferRecurringGetResponse,
    TransferRecurringListRequest,
    TransferRecurringListResponse,
    TransferRefundCancelRequest,
    TransferRefundCancelResponse,
    TransferRefundCreateRequest,
    TransferRefundCreateResponse,
    TransferRefundGetRequest,
    TransferRefundGetResponse,
    TransferRepaymentListRequest,
    TransferRepaymentListResponse,
    TransferRepaymentReturnListRequest,
    TransferRepaymentReturnListResponse,
    TransferSweepGetRequest,
    TransferSweepGetResponse,
    TransferSweepListRequest,
    TransferSweepListResponse,
    UserCreateRequest,
    UserCreateResponse,
    UserUpdateRequest,
    UserUpdateResponse,
    WalletCreateRequest,
    WalletCreateResponse,
    WalletGetRequest,
    WalletGetResponse,
    WalletListRequest,
    WalletListResponse,
    WalletTransactionExecuteRequest,
    WalletTransactionExecuteResponse,
    WalletTransactionGetRequest,
    WalletTransactionGetResponse,
    WalletTransactionListRequest,
    WalletTransactionListResponse,
    WatchlistScreeningEntityCreateRequest,
    WatchlistScreeningEntityCreateResponse,
    WatchlistScreeningEntityGetRequest,
    WatchlistScreeningEntityGetResponse,
    WatchlistScreeningEntityHistoryListRequest,
    WatchlistScreeningEntityHistoryListResponse,
    WatchlistScreeningEntityHitListRequest,
    WatchlistScreeningEntityHitListResponse,
    WatchlistScreeningEntityListRequest,
    WatchlistScreeningEntityListResponse,
    WatchlistScreeningEntityProgramGetRequest,
    WatchlistScreeningEntityProgramGetResponse,
    WatchlistScreeningEntityProgramListRequest,
    WatchlistScreeningEntityProgramListResponse,
    WatchlistScreeningEntityReviewCreateRequest,
    WatchlistScreeningEntityReviewCreateResponse,
    WatchlistScreeningEntityReviewListRequest,
    WatchlistScreeningEntityReviewListResponse,
    WatchlistScreeningEntityUpdateRequest,
    WatchlistScreeningEntityUpdateResponse,
    WatchlistScreeningIndividualCreateRequest,
    WatchlistScreeningIndividualCreateResponse,
    WatchlistScreeningIndividualGetRequest,
    WatchlistScreeningIndividualGetResponse,
    WatchlistScreeningIndividualHistoryListRequest,
    WatchlistScreeningIndividualHistoryListResponse,
    WatchlistScreeningIndividualHitListRequest,
    WatchlistScreeningIndividualHitListResponse,
    WatchlistScreeningIndividualListRequest,
    WatchlistScreeningIndividualListResponse,
    WatchlistScreeningIndividualProgramGetRequest,
    WatchlistScreeningIndividualProgramGetResponse,
    WatchlistScreeningIndividualProgramListRequest,
    WatchlistScreeningIndividualProgramListResponse,
    WatchlistScreeningIndividualReviewCreateRequest,
    WatchlistScreeningIndividualReviewCreateResponse,
    WatchlistScreeningIndividualReviewListRequest,
    WatchlistScreeningIndividualReviewListResponse,
    WatchlistScreeningIndividualUpdateRequest,
    WatchlistScreeningIndividualUpdateResponse,
    WebhookVerificationKeyGetRequest,
    WebhookVerificationKeyGetResponse,
} from '../models/index';
import {
    AccountsBalanceGetRequestFromJSON,
    AccountsBalanceGetRequestToJSON,
    AccountsGetRequestFromJSON,
    AccountsGetRequestToJSON,
    AccountsGetResponseFromJSON,
    AccountsGetResponseToJSON,
    ApplicationGetRequestFromJSON,
    ApplicationGetRequestToJSON,
    ApplicationGetResponseFromJSON,
    ApplicationGetResponseToJSON,
    AssetReportAuditCopyCreateRequestFromJSON,
    AssetReportAuditCopyCreateRequestToJSON,
    AssetReportAuditCopyCreateResponseFromJSON,
    AssetReportAuditCopyCreateResponseToJSON,
    AssetReportAuditCopyGetRequestFromJSON,
    AssetReportAuditCopyGetRequestToJSON,
    AssetReportAuditCopyRemoveRequestFromJSON,
    AssetReportAuditCopyRemoveRequestToJSON,
    AssetReportAuditCopyRemoveResponseFromJSON,
    AssetReportAuditCopyRemoveResponseToJSON,
    AssetReportCreateRequestFromJSON,
    AssetReportCreateRequestToJSON,
    AssetReportCreateResponseFromJSON,
    AssetReportCreateResponseToJSON,
    AssetReportFilterRequestFromJSON,
    AssetReportFilterRequestToJSON,
    AssetReportFilterResponseFromJSON,
    AssetReportFilterResponseToJSON,
    AssetReportFreddieGetRequestFromJSON,
    AssetReportFreddieGetRequestToJSON,
    AssetReportFreddieGetResponseFromJSON,
    AssetReportFreddieGetResponseToJSON,
    AssetReportGetRequestFromJSON,
    AssetReportGetRequestToJSON,
    AssetReportGetResponseFromJSON,
    AssetReportGetResponseToJSON,
    AssetReportPDFGetRequestFromJSON,
    AssetReportPDFGetRequestToJSON,
    AssetReportRefreshRequestFromJSON,
    AssetReportRefreshRequestToJSON,
    AssetReportRefreshResponseFromJSON,
    AssetReportRefreshResponseToJSON,
    AssetReportRemoveRequestFromJSON,
    AssetReportRemoveRequestToJSON,
    AssetReportRemoveResponseFromJSON,
    AssetReportRemoveResponseToJSON,
    AuthGetRequestFromJSON,
    AuthGetRequestToJSON,
    AuthGetResponseFromJSON,
    AuthGetResponseToJSON,
    BankTransferBalanceGetRequestFromJSON,
    BankTransferBalanceGetRequestToJSON,
    BankTransferBalanceGetResponseFromJSON,
    BankTransferBalanceGetResponseToJSON,
    BankTransferCancelRequestFromJSON,
    BankTransferCancelRequestToJSON,
    BankTransferCancelResponseFromJSON,
    BankTransferCancelResponseToJSON,
    BankTransferCreateRequestFromJSON,
    BankTransferCreateRequestToJSON,
    BankTransferCreateResponseFromJSON,
    BankTransferCreateResponseToJSON,
    BankTransferEventListRequestFromJSON,
    BankTransferEventListRequestToJSON,
    BankTransferEventListResponseFromJSON,
    BankTransferEventListResponseToJSON,
    BankTransferEventSyncRequestFromJSON,
    BankTransferEventSyncRequestToJSON,
    BankTransferEventSyncResponseFromJSON,
    BankTransferEventSyncResponseToJSON,
    BankTransferGetRequestFromJSON,
    BankTransferGetRequestToJSON,
    BankTransferGetResponseFromJSON,
    BankTransferGetResponseToJSON,
    BankTransferListRequestFromJSON,
    BankTransferListRequestToJSON,
    BankTransferListResponseFromJSON,
    BankTransferListResponseToJSON,
    BankTransferMigrateAccountRequestFromJSON,
    BankTransferMigrateAccountRequestToJSON,
    BankTransferMigrateAccountResponseFromJSON,
    BankTransferMigrateAccountResponseToJSON,
    BankTransferSweepGetRequestFromJSON,
    BankTransferSweepGetRequestToJSON,
    BankTransferSweepGetResponseFromJSON,
    BankTransferSweepGetResponseToJSON,
    BankTransferSweepListRequestFromJSON,
    BankTransferSweepListRequestToJSON,
    BankTransferSweepListResponseFromJSON,
    BankTransferSweepListResponseToJSON,
    BaseReportCreateRequestFromJSON,
    BaseReportCreateRequestToJSON,
    BaseReportCreateResponseFromJSON,
    BaseReportCreateResponseToJSON,
    BaseReportGetRequestFromJSON,
    BaseReportGetRequestToJSON,
    BaseReportGetResponseFromJSON,
    BaseReportGetResponseToJSON,
    BeaconAccountRiskEvaluateRequestFromJSON,
    BeaconAccountRiskEvaluateRequestToJSON,
    BeaconAccountRiskEvaluateResponseFromJSON,
    BeaconAccountRiskEvaluateResponseToJSON,
    BeaconDuplicateGetRequestFromJSON,
    BeaconDuplicateGetRequestToJSON,
    BeaconDuplicateGetResponseFromJSON,
    BeaconDuplicateGetResponseToJSON,
    BeaconReportCreateRequestFromJSON,
    BeaconReportCreateRequestToJSON,
    BeaconReportCreateResponseFromJSON,
    BeaconReportCreateResponseToJSON,
    BeaconReportGetRequestFromJSON,
    BeaconReportGetRequestToJSON,
    BeaconReportGetResponseFromJSON,
    BeaconReportGetResponseToJSON,
    BeaconReportListRequestFromJSON,
    BeaconReportListRequestToJSON,
    BeaconReportListResponseFromJSON,
    BeaconReportListResponseToJSON,
    BeaconReportSyndicationGetRequestFromJSON,
    BeaconReportSyndicationGetRequestToJSON,
    BeaconReportSyndicationGetResponseFromJSON,
    BeaconReportSyndicationGetResponseToJSON,
    BeaconReportSyndicationListRequestFromJSON,
    BeaconReportSyndicationListRequestToJSON,
    BeaconReportSyndicationListResponseFromJSON,
    BeaconReportSyndicationListResponseToJSON,
    BeaconUserCreateRequestFromJSON,
    BeaconUserCreateRequestToJSON,
    BeaconUserCreateResponseFromJSON,
    BeaconUserCreateResponseToJSON,
    BeaconUserGetRequestFromJSON,
    BeaconUserGetRequestToJSON,
    BeaconUserGetResponseFromJSON,
    BeaconUserGetResponseToJSON,
    BeaconUserHistoryListRequestFromJSON,
    BeaconUserHistoryListRequestToJSON,
    BeaconUserHistoryListResponseFromJSON,
    BeaconUserHistoryListResponseToJSON,
    BeaconUserReviewRequestFromJSON,
    BeaconUserReviewRequestToJSON,
    BeaconUserUpdateRequestFromJSON,
    BeaconUserUpdateRequestToJSON,
    BeaconUserUpdateResponseFromJSON,
    BeaconUserUpdateResponseToJSON,
    CategoriesGetResponseFromJSON,
    CategoriesGetResponseToJSON,
    CraBankIncomeCreateRequestFromJSON,
    CraBankIncomeCreateRequestToJSON,
    CraBankIncomeCreateResponseFromJSON,
    CraBankIncomeCreateResponseToJSON,
    CraBankIncomeGetRequestFromJSON,
    CraBankIncomeGetRequestToJSON,
    CraBankIncomeGetResponseFromJSON,
    CraBankIncomeGetResponseToJSON,
    CraPartnerInsightsGetRequestFromJSON,
    CraPartnerInsightsGetRequestToJSON,
    CraPartnerInsightsGetResponseFromJSON,
    CraPartnerInsightsGetResponseToJSON,
    CreditAuditCopyTokenCreateRequestFromJSON,
    CreditAuditCopyTokenCreateRequestToJSON,
    CreditAuditCopyTokenCreateResponseFromJSON,
    CreditAuditCopyTokenCreateResponseToJSON,
    CreditAuditCopyTokenRemoveRequestFromJSON,
    CreditAuditCopyTokenRemoveRequestToJSON,
    CreditAuditCopyTokenRemoveResponseFromJSON,
    CreditAuditCopyTokenRemoveResponseToJSON,
    CreditAuditCopyTokenUpdateRequestFromJSON,
    CreditAuditCopyTokenUpdateRequestToJSON,
    CreditAuditCopyTokenUpdateResponseFromJSON,
    CreditAuditCopyTokenUpdateResponseToJSON,
    CreditBankEmploymentGetRequestFromJSON,
    CreditBankEmploymentGetRequestToJSON,
    CreditBankEmploymentGetResponseFromJSON,
    CreditBankEmploymentGetResponseToJSON,
    CreditBankIncomeGetRequestFromJSON,
    CreditBankIncomeGetRequestToJSON,
    CreditBankIncomeGetResponseFromJSON,
    CreditBankIncomeGetResponseToJSON,
    CreditBankIncomePDFGetRequestFromJSON,
    CreditBankIncomePDFGetRequestToJSON,
    CreditBankIncomeRefreshRequestFromJSON,
    CreditBankIncomeRefreshRequestToJSON,
    CreditBankIncomeRefreshResponseFromJSON,
    CreditBankIncomeRefreshResponseToJSON,
    CreditBankIncomeWebhookUpdateRequestFromJSON,
    CreditBankIncomeWebhookUpdateRequestToJSON,
    CreditBankIncomeWebhookUpdateResponseFromJSON,
    CreditBankIncomeWebhookUpdateResponseToJSON,
    CreditBankStatementsUploadsGetRequestFromJSON,
    CreditBankStatementsUploadsGetRequestToJSON,
    CreditBankStatementsUploadsGetResponseFromJSON,
    CreditBankStatementsUploadsGetResponseToJSON,
    CreditEmploymentGetRequestFromJSON,
    CreditEmploymentGetRequestToJSON,
    CreditEmploymentGetResponseFromJSON,
    CreditEmploymentGetResponseToJSON,
    CreditFreddieMacReportsGetRequestFromJSON,
    CreditFreddieMacReportsGetRequestToJSON,
    CreditFreddieMacReportsGetResponseFromJSON,
    CreditFreddieMacReportsGetResponseToJSON,
    CreditPayrollIncomeGetRequestFromJSON,
    CreditPayrollIncomeGetRequestToJSON,
    CreditPayrollIncomeGetResponseFromJSON,
    CreditPayrollIncomeGetResponseToJSON,
    CreditPayrollIncomeParsingConfigUpdateRequestFromJSON,
    CreditPayrollIncomeParsingConfigUpdateRequestToJSON,
    CreditPayrollIncomeParsingConfigUpdateResponseFromJSON,
    CreditPayrollIncomeParsingConfigUpdateResponseToJSON,
    CreditPayrollIncomePrecheckRequestFromJSON,
    CreditPayrollIncomePrecheckRequestToJSON,
    CreditPayrollIncomePrecheckResponseFromJSON,
    CreditPayrollIncomePrecheckResponseToJSON,
    CreditPayrollIncomeRefreshRequestFromJSON,
    CreditPayrollIncomeRefreshRequestToJSON,
    CreditPayrollIncomeRefreshResponseFromJSON,
    CreditPayrollIncomeRefreshResponseToJSON,
    CreditPayrollIncomeRiskSignalsGetRequestFromJSON,
    CreditPayrollIncomeRiskSignalsGetRequestToJSON,
    CreditPayrollIncomeRiskSignalsGetResponseFromJSON,
    CreditPayrollIncomeRiskSignalsGetResponseToJSON,
    CreditRelayCreateRequestFromJSON,
    CreditRelayCreateRequestToJSON,
    CreditRelayCreateResponseFromJSON,
    CreditRelayCreateResponseToJSON,
    CreditRelayGetRequestFromJSON,
    CreditRelayGetRequestToJSON,
    CreditRelayPDFGetRequestFromJSON,
    CreditRelayPDFGetRequestToJSON,
    CreditRelayRefreshRequestFromJSON,
    CreditRelayRefreshRequestToJSON,
    CreditRelayRefreshResponseFromJSON,
    CreditRelayRefreshResponseToJSON,
    CreditRelayRemoveRequestFromJSON,
    CreditRelayRemoveRequestToJSON,
    CreditRelayRemoveResponseFromJSON,
    CreditRelayRemoveResponseToJSON,
    CreditSessionsGetRequestFromJSON,
    CreditSessionsGetRequestToJSON,
    CreditSessionsGetResponseFromJSON,
    CreditSessionsGetResponseToJSON,
    DashboardUserGetRequestFromJSON,
    DashboardUserGetRequestToJSON,
    DashboardUserGetResponseFromJSON,
    DashboardUserGetResponseToJSON,
    DashboardUserListRequestFromJSON,
    DashboardUserListRequestToJSON,
    DashboardUserListResponseFromJSON,
    DashboardUserListResponseToJSON,
    DepositSwitchAltCreateRequestFromJSON,
    DepositSwitchAltCreateRequestToJSON,
    DepositSwitchAltCreateResponseFromJSON,
    DepositSwitchAltCreateResponseToJSON,
    DepositSwitchCreateRequestFromJSON,
    DepositSwitchCreateRequestToJSON,
    DepositSwitchCreateResponseFromJSON,
    DepositSwitchCreateResponseToJSON,
    DepositSwitchGetRequestFromJSON,
    DepositSwitchGetRequestToJSON,
    DepositSwitchGetResponseFromJSON,
    DepositSwitchGetResponseToJSON,
    DepositSwitchTokenCreateRequestFromJSON,
    DepositSwitchTokenCreateRequestToJSON,
    DepositSwitchTokenCreateResponseFromJSON,
    DepositSwitchTokenCreateResponseToJSON,
    EmployersSearchRequestFromJSON,
    EmployersSearchRequestToJSON,
    EmployersSearchResponseFromJSON,
    EmployersSearchResponseToJSON,
    EmploymentVerificationGetRequestFromJSON,
    EmploymentVerificationGetRequestToJSON,
    EmploymentVerificationGetResponseFromJSON,
    EmploymentVerificationGetResponseToJSON,
    FDXNotificationFromJSON,
    FDXNotificationToJSON,
    IdentityGetRequestFromJSON,
    IdentityGetRequestToJSON,
    IdentityGetResponseFromJSON,
    IdentityGetResponseToJSON,
    IdentityMatchRequestFromJSON,
    IdentityMatchRequestToJSON,
    IdentityMatchResponseFromJSON,
    IdentityMatchResponseToJSON,
    IdentityRefreshRequestFromJSON,
    IdentityRefreshRequestToJSON,
    IdentityRefreshResponseFromJSON,
    IdentityRefreshResponseToJSON,
    IdentityVerificationAutofillCreateRequestFromJSON,
    IdentityVerificationAutofillCreateRequestToJSON,
    IdentityVerificationAutofillCreateResponseFromJSON,
    IdentityVerificationAutofillCreateResponseToJSON,
    IdentityVerificationCreateRequestFromJSON,
    IdentityVerificationCreateRequestToJSON,
    IdentityVerificationCreateResponseFromJSON,
    IdentityVerificationCreateResponseToJSON,
    IdentityVerificationGetRequestFromJSON,
    IdentityVerificationGetRequestToJSON,
    IdentityVerificationGetResponseFromJSON,
    IdentityVerificationGetResponseToJSON,
    IdentityVerificationListRequestFromJSON,
    IdentityVerificationListRequestToJSON,
    IdentityVerificationListResponseFromJSON,
    IdentityVerificationListResponseToJSON,
    IdentityVerificationRetryRequestFromJSON,
    IdentityVerificationRetryRequestToJSON,
    IdentityVerificationRetryResponseFromJSON,
    IdentityVerificationRetryResponseToJSON,
    IncomeVerificationCreateRequestFromJSON,
    IncomeVerificationCreateRequestToJSON,
    IncomeVerificationCreateResponseFromJSON,
    IncomeVerificationCreateResponseToJSON,
    IncomeVerificationDocumentsDownloadRequestFromJSON,
    IncomeVerificationDocumentsDownloadRequestToJSON,
    IncomeVerificationPaystubsGetRequestFromJSON,
    IncomeVerificationPaystubsGetRequestToJSON,
    IncomeVerificationPaystubsGetResponseFromJSON,
    IncomeVerificationPaystubsGetResponseToJSON,
    IncomeVerificationPrecheckRequestFromJSON,
    IncomeVerificationPrecheckRequestToJSON,
    IncomeVerificationPrecheckResponseFromJSON,
    IncomeVerificationPrecheckResponseToJSON,
    IncomeVerificationTaxformsGetRequestFromJSON,
    IncomeVerificationTaxformsGetRequestToJSON,
    IncomeVerificationTaxformsGetResponseFromJSON,
    IncomeVerificationTaxformsGetResponseToJSON,
    InstitutionsGetByIdRequestFromJSON,
    InstitutionsGetByIdRequestToJSON,
    InstitutionsGetByIdResponseFromJSON,
    InstitutionsGetByIdResponseToJSON,
    InstitutionsGetRequestFromJSON,
    InstitutionsGetRequestToJSON,
    InstitutionsGetResponseFromJSON,
    InstitutionsGetResponseToJSON,
    InstitutionsSearchRequestFromJSON,
    InstitutionsSearchRequestToJSON,
    InstitutionsSearchResponseFromJSON,
    InstitutionsSearchResponseToJSON,
    InvestmentsAuthGetRequestFromJSON,
    InvestmentsAuthGetRequestToJSON,
    InvestmentsAuthGetResponseFromJSON,
    InvestmentsAuthGetResponseToJSON,
    InvestmentsHoldingsGetRequestFromJSON,
    InvestmentsHoldingsGetRequestToJSON,
    InvestmentsHoldingsGetResponseFromJSON,
    InvestmentsHoldingsGetResponseToJSON,
    InvestmentsRefreshRequestFromJSON,
    InvestmentsRefreshRequestToJSON,
    InvestmentsRefreshResponseFromJSON,
    InvestmentsRefreshResponseToJSON,
    InvestmentsTransactionsGetRequestFromJSON,
    InvestmentsTransactionsGetRequestToJSON,
    InvestmentsTransactionsGetResponseFromJSON,
    InvestmentsTransactionsGetResponseToJSON,
    ItemAccessTokenInvalidateRequestFromJSON,
    ItemAccessTokenInvalidateRequestToJSON,
    ItemAccessTokenInvalidateResponseFromJSON,
    ItemAccessTokenInvalidateResponseToJSON,
    ItemActivityListRequestFromJSON,
    ItemActivityListRequestToJSON,
    ItemActivityListResponseFromJSON,
    ItemActivityListResponseToJSON,
    ItemApplicationListRequestFromJSON,
    ItemApplicationListRequestToJSON,
    ItemApplicationListResponseFromJSON,
    ItemApplicationListResponseToJSON,
    ItemApplicationScopesUpdateRequestFromJSON,
    ItemApplicationScopesUpdateRequestToJSON,
    ItemApplicationScopesUpdateResponseFromJSON,
    ItemApplicationScopesUpdateResponseToJSON,
    ItemApplicationUnlinkRequestFromJSON,
    ItemApplicationUnlinkRequestToJSON,
    ItemApplicationUnlinkResponseFromJSON,
    ItemApplicationUnlinkResponseToJSON,
    ItemGetRequestFromJSON,
    ItemGetRequestToJSON,
    ItemGetResponseFromJSON,
    ItemGetResponseToJSON,
    ItemImportRequestFromJSON,
    ItemImportRequestToJSON,
    ItemImportResponseFromJSON,
    ItemImportResponseToJSON,
    ItemPublicTokenCreateRequestFromJSON,
    ItemPublicTokenCreateRequestToJSON,
    ItemPublicTokenCreateResponseFromJSON,
    ItemPublicTokenCreateResponseToJSON,
    ItemPublicTokenExchangeRequestFromJSON,
    ItemPublicTokenExchangeRequestToJSON,
    ItemPublicTokenExchangeResponseFromJSON,
    ItemPublicTokenExchangeResponseToJSON,
    ItemRemoveRequestFromJSON,
    ItemRemoveRequestToJSON,
    ItemRemoveResponseFromJSON,
    ItemRemoveResponseToJSON,
    ItemWebhookUpdateRequestFromJSON,
    ItemWebhookUpdateRequestToJSON,
    ItemWebhookUpdateResponseFromJSON,
    ItemWebhookUpdateResponseToJSON,
    LiabilitiesGetRequestFromJSON,
    LiabilitiesGetRequestToJSON,
    LiabilitiesGetResponseFromJSON,
    LiabilitiesGetResponseToJSON,
    LinkDeliveryCreateRequestFromJSON,
    LinkDeliveryCreateRequestToJSON,
    LinkDeliveryCreateResponseFromJSON,
    LinkDeliveryCreateResponseToJSON,
    LinkDeliveryGetRequestFromJSON,
    LinkDeliveryGetRequestToJSON,
    LinkDeliveryGetResponseFromJSON,
    LinkDeliveryGetResponseToJSON,
    LinkOAuthCorrelationIdExchangeRequestFromJSON,
    LinkOAuthCorrelationIdExchangeRequestToJSON,
    LinkOAuthCorrelationIdExchangeResponseFromJSON,
    LinkOAuthCorrelationIdExchangeResponseToJSON,
    LinkTokenCreateRequestFromJSON,
    LinkTokenCreateRequestToJSON,
    LinkTokenCreateResponseFromJSON,
    LinkTokenCreateResponseToJSON,
    LinkTokenGetRequestFromJSON,
    LinkTokenGetRequestToJSON,
    LinkTokenGetResponseFromJSON,
    LinkTokenGetResponseToJSON,
    PartnerCustomerCreateRequestFromJSON,
    PartnerCustomerCreateRequestToJSON,
    PartnerCustomerCreateResponseFromJSON,
    PartnerCustomerCreateResponseToJSON,
    PartnerCustomerEnableRequestFromJSON,
    PartnerCustomerEnableRequestToJSON,
    PartnerCustomerEnableResponseFromJSON,
    PartnerCustomerEnableResponseToJSON,
    PartnerCustomerGetRequestFromJSON,
    PartnerCustomerGetRequestToJSON,
    PartnerCustomerGetResponseFromJSON,
    PartnerCustomerGetResponseToJSON,
    PartnerCustomerOAuthInstitutionsGetRequestFromJSON,
    PartnerCustomerOAuthInstitutionsGetRequestToJSON,
    PartnerCustomerOAuthInstitutionsGetResponseFromJSON,
    PartnerCustomerOAuthInstitutionsGetResponseToJSON,
    PartnerCustomerRemoveRequestFromJSON,
    PartnerCustomerRemoveRequestToJSON,
    PartnerCustomerRemoveResponseFromJSON,
    PartnerCustomerRemoveResponseToJSON,
    PaymentInitiationConsentCreateRequestFromJSON,
    PaymentInitiationConsentCreateRequestToJSON,
    PaymentInitiationConsentCreateResponseFromJSON,
    PaymentInitiationConsentCreateResponseToJSON,
    PaymentInitiationConsentGetRequestFromJSON,
    PaymentInitiationConsentGetRequestToJSON,
    PaymentInitiationConsentGetResponseFromJSON,
    PaymentInitiationConsentGetResponseToJSON,
    PaymentInitiationConsentPaymentExecuteRequestFromJSON,
    PaymentInitiationConsentPaymentExecuteRequestToJSON,
    PaymentInitiationConsentPaymentExecuteResponseFromJSON,
    PaymentInitiationConsentPaymentExecuteResponseToJSON,
    PaymentInitiationConsentRevokeRequestFromJSON,
    PaymentInitiationConsentRevokeRequestToJSON,
    PaymentInitiationConsentRevokeResponseFromJSON,
    PaymentInitiationConsentRevokeResponseToJSON,
    PaymentInitiationPaymentCreateRequestFromJSON,
    PaymentInitiationPaymentCreateRequestToJSON,
    PaymentInitiationPaymentCreateResponseFromJSON,
    PaymentInitiationPaymentCreateResponseToJSON,
    PaymentInitiationPaymentGetRequestFromJSON,
    PaymentInitiationPaymentGetRequestToJSON,
    PaymentInitiationPaymentGetResponseFromJSON,
    PaymentInitiationPaymentGetResponseToJSON,
    PaymentInitiationPaymentListRequestFromJSON,
    PaymentInitiationPaymentListRequestToJSON,
    PaymentInitiationPaymentListResponseFromJSON,
    PaymentInitiationPaymentListResponseToJSON,
    PaymentInitiationPaymentReverseRequestFromJSON,
    PaymentInitiationPaymentReverseRequestToJSON,
    PaymentInitiationPaymentReverseResponseFromJSON,
    PaymentInitiationPaymentReverseResponseToJSON,
    PaymentInitiationPaymentTokenCreateRequestFromJSON,
    PaymentInitiationPaymentTokenCreateRequestToJSON,
    PaymentInitiationPaymentTokenCreateResponseFromJSON,
    PaymentInitiationPaymentTokenCreateResponseToJSON,
    PaymentInitiationRecipientCreateRequestFromJSON,
    PaymentInitiationRecipientCreateRequestToJSON,
    PaymentInitiationRecipientCreateResponseFromJSON,
    PaymentInitiationRecipientCreateResponseToJSON,
    PaymentInitiationRecipientGetRequestFromJSON,
    PaymentInitiationRecipientGetRequestToJSON,
    PaymentInitiationRecipientGetResponseFromJSON,
    PaymentInitiationRecipientGetResponseToJSON,
    PaymentInitiationRecipientListRequestFromJSON,
    PaymentInitiationRecipientListRequestToJSON,
    PaymentInitiationRecipientListResponseFromJSON,
    PaymentInitiationRecipientListResponseToJSON,
    PaymentProfileCreateRequestFromJSON,
    PaymentProfileCreateRequestToJSON,
    PaymentProfileCreateResponseFromJSON,
    PaymentProfileCreateResponseToJSON,
    PaymentProfileGetRequestFromJSON,
    PaymentProfileGetRequestToJSON,
    PaymentProfileGetResponseFromJSON,
    PaymentProfileGetResponseToJSON,
    PaymentProfileRemoveRequestFromJSON,
    PaymentProfileRemoveRequestToJSON,
    PaymentProfileRemoveResponseFromJSON,
    PaymentProfileRemoveResponseToJSON,
    PlaidErrorFromJSON,
    PlaidErrorToJSON,
    ProcessorAccountGetRequestFromJSON,
    ProcessorAccountGetRequestToJSON,
    ProcessorAccountGetResponseFromJSON,
    ProcessorAccountGetResponseToJSON,
    ProcessorApexProcessorTokenCreateRequestFromJSON,
    ProcessorApexProcessorTokenCreateRequestToJSON,
    ProcessorAuthGetRequestFromJSON,
    ProcessorAuthGetRequestToJSON,
    ProcessorAuthGetResponseFromJSON,
    ProcessorAuthGetResponseToJSON,
    ProcessorBalanceGetRequestFromJSON,
    ProcessorBalanceGetRequestToJSON,
    ProcessorBalanceGetResponseFromJSON,
    ProcessorBalanceGetResponseToJSON,
    ProcessorBankTransferCreateRequestFromJSON,
    ProcessorBankTransferCreateRequestToJSON,
    ProcessorBankTransferCreateResponseFromJSON,
    ProcessorBankTransferCreateResponseToJSON,
    ProcessorIdentityGetRequestFromJSON,
    ProcessorIdentityGetRequestToJSON,
    ProcessorIdentityGetResponseFromJSON,
    ProcessorIdentityGetResponseToJSON,
    ProcessorIdentityMatchRequestFromJSON,
    ProcessorIdentityMatchRequestToJSON,
    ProcessorIdentityMatchResponseFromJSON,
    ProcessorIdentityMatchResponseToJSON,
    ProcessorLiabilitiesGetRequestFromJSON,
    ProcessorLiabilitiesGetRequestToJSON,
    ProcessorLiabilitiesGetResponseFromJSON,
    ProcessorLiabilitiesGetResponseToJSON,
    ProcessorSignalDecisionReportRequestFromJSON,
    ProcessorSignalDecisionReportRequestToJSON,
    ProcessorSignalDecisionReportResponseFromJSON,
    ProcessorSignalDecisionReportResponseToJSON,
    ProcessorSignalEvaluateRequestFromJSON,
    ProcessorSignalEvaluateRequestToJSON,
    ProcessorSignalEvaluateResponseFromJSON,
    ProcessorSignalEvaluateResponseToJSON,
    ProcessorSignalPrepareRequestFromJSON,
    ProcessorSignalPrepareRequestToJSON,
    ProcessorSignalPrepareResponseFromJSON,
    ProcessorSignalPrepareResponseToJSON,
    ProcessorSignalReturnReportRequestFromJSON,
    ProcessorSignalReturnReportRequestToJSON,
    ProcessorSignalReturnReportResponseFromJSON,
    ProcessorSignalReturnReportResponseToJSON,
    ProcessorStripeBankAccountTokenCreateRequestFromJSON,
    ProcessorStripeBankAccountTokenCreateRequestToJSON,
    ProcessorStripeBankAccountTokenCreateResponseFromJSON,
    ProcessorStripeBankAccountTokenCreateResponseToJSON,
    ProcessorTokenCreateRequestFromJSON,
    ProcessorTokenCreateRequestToJSON,
    ProcessorTokenCreateResponseFromJSON,
    ProcessorTokenCreateResponseToJSON,
    ProcessorTokenPermissionsGetRequestFromJSON,
    ProcessorTokenPermissionsGetRequestToJSON,
    ProcessorTokenPermissionsGetResponseFromJSON,
    ProcessorTokenPermissionsGetResponseToJSON,
    ProcessorTokenPermissionsSetRequestFromJSON,
    ProcessorTokenPermissionsSetRequestToJSON,
    ProcessorTokenPermissionsSetResponseFromJSON,
    ProcessorTokenPermissionsSetResponseToJSON,
    ProcessorTokenWebhookUpdateRequestFromJSON,
    ProcessorTokenWebhookUpdateRequestToJSON,
    ProcessorTokenWebhookUpdateResponseFromJSON,
    ProcessorTokenWebhookUpdateResponseToJSON,
    ProcessorTransactionsGetRequestFromJSON,
    ProcessorTransactionsGetRequestToJSON,
    ProcessorTransactionsGetResponseFromJSON,
    ProcessorTransactionsGetResponseToJSON,
    ProcessorTransactionsRecurringGetRequestFromJSON,
    ProcessorTransactionsRecurringGetRequestToJSON,
    ProcessorTransactionsRecurringGetResponseFromJSON,
    ProcessorTransactionsRecurringGetResponseToJSON,
    ProcessorTransactionsRefreshRequestFromJSON,
    ProcessorTransactionsRefreshRequestToJSON,
    ProcessorTransactionsRefreshResponseFromJSON,
    ProcessorTransactionsRefreshResponseToJSON,
    ProcessorTransactionsSyncRequestFromJSON,
    ProcessorTransactionsSyncRequestToJSON,
    ProcessorTransactionsSyncResponseFromJSON,
    ProcessorTransactionsSyncResponseToJSON,
    ProfileGetRequestFromJSON,
    ProfileGetRequestToJSON,
    ProfileGetResponseFromJSON,
    ProfileGetResponseToJSON,
    SandboxBankIncomeFireWebhookRequestFromJSON,
    SandboxBankIncomeFireWebhookRequestToJSON,
    SandboxBankIncomeFireWebhookResponseFromJSON,
    SandboxBankIncomeFireWebhookResponseToJSON,
    SandboxBankTransferFireWebhookRequestFromJSON,
    SandboxBankTransferFireWebhookRequestToJSON,
    SandboxBankTransferFireWebhookResponseFromJSON,
    SandboxBankTransferFireWebhookResponseToJSON,
    SandboxBankTransferSimulateRequestFromJSON,
    SandboxBankTransferSimulateRequestToJSON,
    SandboxBankTransferSimulateResponseFromJSON,
    SandboxBankTransferSimulateResponseToJSON,
    SandboxIncomeFireWebhookRequestFromJSON,
    SandboxIncomeFireWebhookRequestToJSON,
    SandboxIncomeFireWebhookResponseFromJSON,
    SandboxIncomeFireWebhookResponseToJSON,
    SandboxItemFireWebhookRequestFromJSON,
    SandboxItemFireWebhookRequestToJSON,
    SandboxItemFireWebhookResponseFromJSON,
    SandboxItemFireWebhookResponseToJSON,
    SandboxItemResetLoginRequestFromJSON,
    SandboxItemResetLoginRequestToJSON,
    SandboxItemResetLoginResponseFromJSON,
    SandboxItemResetLoginResponseToJSON,
    SandboxItemSetVerificationStatusRequestFromJSON,
    SandboxItemSetVerificationStatusRequestToJSON,
    SandboxItemSetVerificationStatusResponseFromJSON,
    SandboxItemSetVerificationStatusResponseToJSON,
    SandboxOauthSelectAccountsRequestFromJSON,
    SandboxOauthSelectAccountsRequestToJSON,
    SandboxPaymentProfileResetLoginRequestFromJSON,
    SandboxPaymentProfileResetLoginRequestToJSON,
    SandboxPaymentProfileResetLoginResponseFromJSON,
    SandboxPaymentProfileResetLoginResponseToJSON,
    SandboxProcessorTokenCreateRequestFromJSON,
    SandboxProcessorTokenCreateRequestToJSON,
    SandboxProcessorTokenCreateResponseFromJSON,
    SandboxProcessorTokenCreateResponseToJSON,
    SandboxPublicTokenCreateRequestFromJSON,
    SandboxPublicTokenCreateRequestToJSON,
    SandboxPublicTokenCreateResponseFromJSON,
    SandboxPublicTokenCreateResponseToJSON,
    SandboxTransferFireWebhookRequestFromJSON,
    SandboxTransferFireWebhookRequestToJSON,
    SandboxTransferFireWebhookResponseFromJSON,
    SandboxTransferFireWebhookResponseToJSON,
    SandboxTransferLedgerDepositSimulateRequestFromJSON,
    SandboxTransferLedgerDepositSimulateRequestToJSON,
    SandboxTransferLedgerDepositSimulateResponseFromJSON,
    SandboxTransferLedgerDepositSimulateResponseToJSON,
    SandboxTransferLedgerSimulateAvailableRequestFromJSON,
    SandboxTransferLedgerSimulateAvailableRequestToJSON,
    SandboxTransferLedgerSimulateAvailableResponseFromJSON,
    SandboxTransferLedgerSimulateAvailableResponseToJSON,
    SandboxTransferLedgerWithdrawSimulateRequestFromJSON,
    SandboxTransferLedgerWithdrawSimulateRequestToJSON,
    SandboxTransferLedgerWithdrawSimulateResponseFromJSON,
    SandboxTransferLedgerWithdrawSimulateResponseToJSON,
    SandboxTransferRefundSimulateRequestFromJSON,
    SandboxTransferRefundSimulateRequestToJSON,
    SandboxTransferRefundSimulateResponseFromJSON,
    SandboxTransferRefundSimulateResponseToJSON,
    SandboxTransferRepaymentSimulateRequestFromJSON,
    SandboxTransferRepaymentSimulateRequestToJSON,
    SandboxTransferRepaymentSimulateResponseFromJSON,
    SandboxTransferRepaymentSimulateResponseToJSON,
    SandboxTransferSimulateRequestFromJSON,
    SandboxTransferSimulateRequestToJSON,
    SandboxTransferSimulateResponseFromJSON,
    SandboxTransferSimulateResponseToJSON,
    SandboxTransferSweepSimulateRequestFromJSON,
    SandboxTransferSweepSimulateRequestToJSON,
    SandboxTransferSweepSimulateResponseFromJSON,
    SandboxTransferSweepSimulateResponseToJSON,
    SandboxTransferTestClockAdvanceRequestFromJSON,
    SandboxTransferTestClockAdvanceRequestToJSON,
    SandboxTransferTestClockAdvanceResponseFromJSON,
    SandboxTransferTestClockAdvanceResponseToJSON,
    SandboxTransferTestClockCreateRequestFromJSON,
    SandboxTransferTestClockCreateRequestToJSON,
    SandboxTransferTestClockCreateResponseFromJSON,
    SandboxTransferTestClockCreateResponseToJSON,
    SandboxTransferTestClockGetRequestFromJSON,
    SandboxTransferTestClockGetRequestToJSON,
    SandboxTransferTestClockGetResponseFromJSON,
    SandboxTransferTestClockGetResponseToJSON,
    SandboxTransferTestClockListRequestFromJSON,
    SandboxTransferTestClockListRequestToJSON,
    SandboxTransferTestClockListResponseFromJSON,
    SandboxTransferTestClockListResponseToJSON,
    SignalDecisionReportRequestFromJSON,
    SignalDecisionReportRequestToJSON,
    SignalDecisionReportResponseFromJSON,
    SignalDecisionReportResponseToJSON,
    SignalEvaluateRequestFromJSON,
    SignalEvaluateRequestToJSON,
    SignalEvaluateResponseFromJSON,
    SignalEvaluateResponseToJSON,
    SignalPrepareRequestFromJSON,
    SignalPrepareRequestToJSON,
    SignalPrepareResponseFromJSON,
    SignalPrepareResponseToJSON,
    SignalReturnReportRequestFromJSON,
    SignalReturnReportRequestToJSON,
    SignalReturnReportResponseFromJSON,
    SignalReturnReportResponseToJSON,
    StatementsDownloadRequestFromJSON,
    StatementsDownloadRequestToJSON,
    StatementsListRequestFromJSON,
    StatementsListRequestToJSON,
    StatementsListResponseFromJSON,
    StatementsListResponseToJSON,
    StatementsRefreshRequestFromJSON,
    StatementsRefreshRequestToJSON,
    StatementsRefreshResponseFromJSON,
    StatementsRefreshResponseToJSON,
    TransactionsEnhanceGetRequestFromJSON,
    TransactionsEnhanceGetRequestToJSON,
    TransactionsEnhanceGetResponseFromJSON,
    TransactionsEnhanceGetResponseToJSON,
    TransactionsEnrichRequestFromJSON,
    TransactionsEnrichRequestToJSON,
    TransactionsEnrichResponseFromJSON,
    TransactionsEnrichResponseToJSON,
    TransactionsGetRequestFromJSON,
    TransactionsGetRequestToJSON,
    TransactionsGetResponseFromJSON,
    TransactionsGetResponseToJSON,
    TransactionsRecurringGetRequestFromJSON,
    TransactionsRecurringGetRequestToJSON,
    TransactionsRecurringGetResponseFromJSON,
    TransactionsRecurringGetResponseToJSON,
    TransactionsRefreshRequestFromJSON,
    TransactionsRefreshRequestToJSON,
    TransactionsRefreshResponseFromJSON,
    TransactionsRefreshResponseToJSON,
    TransactionsRulesCreateRequestFromJSON,
    TransactionsRulesCreateRequestToJSON,
    TransactionsRulesCreateResponseFromJSON,
    TransactionsRulesCreateResponseToJSON,
    TransactionsRulesListRequestFromJSON,
    TransactionsRulesListRequestToJSON,
    TransactionsRulesListResponseFromJSON,
    TransactionsRulesListResponseToJSON,
    TransactionsRulesRemoveRequestFromJSON,
    TransactionsRulesRemoveRequestToJSON,
    TransactionsRulesRemoveResponseFromJSON,
    TransactionsRulesRemoveResponseToJSON,
    TransactionsSyncRequestFromJSON,
    TransactionsSyncRequestToJSON,
    TransactionsSyncResponseFromJSON,
    TransactionsSyncResponseToJSON,
    TransactionsUserInsightsGetRequestFromJSON,
    TransactionsUserInsightsGetRequestToJSON,
    TransactionsUserInsightsGetResponseFromJSON,
    TransactionsUserInsightsGetResponseToJSON,
    TransferAuthorizationCreateRequestFromJSON,
    TransferAuthorizationCreateRequestToJSON,
    TransferAuthorizationCreateResponseFromJSON,
    TransferAuthorizationCreateResponseToJSON,
    TransferBalanceGetRequestFromJSON,
    TransferBalanceGetRequestToJSON,
    TransferBalanceGetResponseFromJSON,
    TransferBalanceGetResponseToJSON,
    TransferCancelRequestFromJSON,
    TransferCancelRequestToJSON,
    TransferCancelResponseFromJSON,
    TransferCancelResponseToJSON,
    TransferCapabilitiesGetRequestFromJSON,
    TransferCapabilitiesGetRequestToJSON,
    TransferCapabilitiesGetResponseFromJSON,
    TransferCapabilitiesGetResponseToJSON,
    TransferConfigurationGetRequestFromJSON,
    TransferConfigurationGetRequestToJSON,
    TransferConfigurationGetResponseFromJSON,
    TransferConfigurationGetResponseToJSON,
    TransferCreateRequestFromJSON,
    TransferCreateRequestToJSON,
    TransferCreateResponseFromJSON,
    TransferCreateResponseToJSON,
    TransferDiligenceDocumentUploadRequestFromJSON,
    TransferDiligenceDocumentUploadRequestToJSON,
    TransferDiligenceDocumentUploadResponseFromJSON,
    TransferDiligenceDocumentUploadResponseToJSON,
    TransferDiligenceSubmitRequestFromJSON,
    TransferDiligenceSubmitRequestToJSON,
    TransferDiligenceSubmitResponseFromJSON,
    TransferDiligenceSubmitResponseToJSON,
    TransferEventListRequestFromJSON,
    TransferEventListRequestToJSON,
    TransferEventListResponseFromJSON,
    TransferEventListResponseToJSON,
    TransferEventSyncRequestFromJSON,
    TransferEventSyncRequestToJSON,
    TransferEventSyncResponseFromJSON,
    TransferEventSyncResponseToJSON,
    TransferGetRequestFromJSON,
    TransferGetRequestToJSON,
    TransferGetResponseFromJSON,
    TransferGetResponseToJSON,
    TransferIntentCreateRequestFromJSON,
    TransferIntentCreateRequestToJSON,
    TransferIntentCreateResponseFromJSON,
    TransferIntentCreateResponseToJSON,
    TransferIntentGetRequestFromJSON,
    TransferIntentGetRequestToJSON,
    TransferIntentGetResponseFromJSON,
    TransferIntentGetResponseToJSON,
    TransferLedgerDepositRequestFromJSON,
    TransferLedgerDepositRequestToJSON,
    TransferLedgerDepositResponseFromJSON,
    TransferLedgerDepositResponseToJSON,
    TransferLedgerDistributeRequestFromJSON,
    TransferLedgerDistributeRequestToJSON,
    TransferLedgerDistributeResponseFromJSON,
    TransferLedgerDistributeResponseToJSON,
    TransferLedgerGetRequestFromJSON,
    TransferLedgerGetRequestToJSON,
    TransferLedgerGetResponseFromJSON,
    TransferLedgerGetResponseToJSON,
    TransferLedgerWithdrawRequestFromJSON,
    TransferLedgerWithdrawRequestToJSON,
    TransferLedgerWithdrawResponseFromJSON,
    TransferLedgerWithdrawResponseToJSON,
    TransferListRequestFromJSON,
    TransferListRequestToJSON,
    TransferListResponseFromJSON,
    TransferListResponseToJSON,
    TransferMetricsGetRequestFromJSON,
    TransferMetricsGetRequestToJSON,
    TransferMetricsGetResponseFromJSON,
    TransferMetricsGetResponseToJSON,
    TransferMigrateAccountRequestFromJSON,
    TransferMigrateAccountRequestToJSON,
    TransferMigrateAccountResponseFromJSON,
    TransferMigrateAccountResponseToJSON,
    TransferOriginatorCreateRequestFromJSON,
    TransferOriginatorCreateRequestToJSON,
    TransferOriginatorCreateResponseFromJSON,
    TransferOriginatorCreateResponseToJSON,
    TransferOriginatorFundingAccountUpdateRequestFromJSON,
    TransferOriginatorFundingAccountUpdateRequestToJSON,
    TransferOriginatorFundingAccountUpdateResponseFromJSON,
    TransferOriginatorFundingAccountUpdateResponseToJSON,
    TransferOriginatorGetRequestFromJSON,
    TransferOriginatorGetRequestToJSON,
    TransferOriginatorGetResponseFromJSON,
    TransferOriginatorGetResponseToJSON,
    TransferOriginatorListRequestFromJSON,
    TransferOriginatorListRequestToJSON,
    TransferOriginatorListResponseFromJSON,
    TransferOriginatorListResponseToJSON,
    TransferQuestionnaireCreateRequestFromJSON,
    TransferQuestionnaireCreateRequestToJSON,
    TransferQuestionnaireCreateResponseFromJSON,
    TransferQuestionnaireCreateResponseToJSON,
    TransferRecurringCancelRequestFromJSON,
    TransferRecurringCancelRequestToJSON,
    TransferRecurringCancelResponseFromJSON,
    TransferRecurringCancelResponseToJSON,
    TransferRecurringCreateRequestFromJSON,
    TransferRecurringCreateRequestToJSON,
    TransferRecurringCreateResponseFromJSON,
    TransferRecurringCreateResponseToJSON,
    TransferRecurringGetRequestFromJSON,
    TransferRecurringGetRequestToJSON,
    TransferRecurringGetResponseFromJSON,
    TransferRecurringGetResponseToJSON,
    TransferRecurringListRequestFromJSON,
    TransferRecurringListRequestToJSON,
    TransferRecurringListResponseFromJSON,
    TransferRecurringListResponseToJSON,
    TransferRefundCancelRequestFromJSON,
    TransferRefundCancelRequestToJSON,
    TransferRefundCancelResponseFromJSON,
    TransferRefundCancelResponseToJSON,
    TransferRefundCreateRequestFromJSON,
    TransferRefundCreateRequestToJSON,
    TransferRefundCreateResponseFromJSON,
    TransferRefundCreateResponseToJSON,
    TransferRefundGetRequestFromJSON,
    TransferRefundGetRequestToJSON,
    TransferRefundGetResponseFromJSON,
    TransferRefundGetResponseToJSON,
    TransferRepaymentListRequestFromJSON,
    TransferRepaymentListRequestToJSON,
    TransferRepaymentListResponseFromJSON,
    TransferRepaymentListResponseToJSON,
    TransferRepaymentReturnListRequestFromJSON,
    TransferRepaymentReturnListRequestToJSON,
    TransferRepaymentReturnListResponseFromJSON,
    TransferRepaymentReturnListResponseToJSON,
    TransferSweepGetRequestFromJSON,
    TransferSweepGetRequestToJSON,
    TransferSweepGetResponseFromJSON,
    TransferSweepGetResponseToJSON,
    TransferSweepListRequestFromJSON,
    TransferSweepListRequestToJSON,
    TransferSweepListResponseFromJSON,
    TransferSweepListResponseToJSON,
    UserCreateRequestFromJSON,
    UserCreateRequestToJSON,
    UserCreateResponseFromJSON,
    UserCreateResponseToJSON,
    UserUpdateRequestFromJSON,
    UserUpdateRequestToJSON,
    UserUpdateResponseFromJSON,
    UserUpdateResponseToJSON,
    WalletCreateRequestFromJSON,
    WalletCreateRequestToJSON,
    WalletCreateResponseFromJSON,
    WalletCreateResponseToJSON,
    WalletGetRequestFromJSON,
    WalletGetRequestToJSON,
    WalletGetResponseFromJSON,
    WalletGetResponseToJSON,
    WalletListRequestFromJSON,
    WalletListRequestToJSON,
    WalletListResponseFromJSON,
    WalletListResponseToJSON,
    WalletTransactionExecuteRequestFromJSON,
    WalletTransactionExecuteRequestToJSON,
    WalletTransactionExecuteResponseFromJSON,
    WalletTransactionExecuteResponseToJSON,
    WalletTransactionGetRequestFromJSON,
    WalletTransactionGetRequestToJSON,
    WalletTransactionGetResponseFromJSON,
    WalletTransactionGetResponseToJSON,
    WalletTransactionListRequestFromJSON,
    WalletTransactionListRequestToJSON,
    WalletTransactionListResponseFromJSON,
    WalletTransactionListResponseToJSON,
    WatchlistScreeningEntityCreateRequestFromJSON,
    WatchlistScreeningEntityCreateRequestToJSON,
    WatchlistScreeningEntityCreateResponseFromJSON,
    WatchlistScreeningEntityCreateResponseToJSON,
    WatchlistScreeningEntityGetRequestFromJSON,
    WatchlistScreeningEntityGetRequestToJSON,
    WatchlistScreeningEntityGetResponseFromJSON,
    WatchlistScreeningEntityGetResponseToJSON,
    WatchlistScreeningEntityHistoryListRequestFromJSON,
    WatchlistScreeningEntityHistoryListRequestToJSON,
    WatchlistScreeningEntityHistoryListResponseFromJSON,
    WatchlistScreeningEntityHistoryListResponseToJSON,
    WatchlistScreeningEntityHitListRequestFromJSON,
    WatchlistScreeningEntityHitListRequestToJSON,
    WatchlistScreeningEntityHitListResponseFromJSON,
    WatchlistScreeningEntityHitListResponseToJSON,
    WatchlistScreeningEntityListRequestFromJSON,
    WatchlistScreeningEntityListRequestToJSON,
    WatchlistScreeningEntityListResponseFromJSON,
    WatchlistScreeningEntityListResponseToJSON,
    WatchlistScreeningEntityProgramGetRequestFromJSON,
    WatchlistScreeningEntityProgramGetRequestToJSON,
    WatchlistScreeningEntityProgramGetResponseFromJSON,
    WatchlistScreeningEntityProgramGetResponseToJSON,
    WatchlistScreeningEntityProgramListRequestFromJSON,
    WatchlistScreeningEntityProgramListRequestToJSON,
    WatchlistScreeningEntityProgramListResponseFromJSON,
    WatchlistScreeningEntityProgramListResponseToJSON,
    WatchlistScreeningEntityReviewCreateRequestFromJSON,
    WatchlistScreeningEntityReviewCreateRequestToJSON,
    WatchlistScreeningEntityReviewCreateResponseFromJSON,
    WatchlistScreeningEntityReviewCreateResponseToJSON,
    WatchlistScreeningEntityReviewListRequestFromJSON,
    WatchlistScreeningEntityReviewListRequestToJSON,
    WatchlistScreeningEntityReviewListResponseFromJSON,
    WatchlistScreeningEntityReviewListResponseToJSON,
    WatchlistScreeningEntityUpdateRequestFromJSON,
    WatchlistScreeningEntityUpdateRequestToJSON,
    WatchlistScreeningEntityUpdateResponseFromJSON,
    WatchlistScreeningEntityUpdateResponseToJSON,
    WatchlistScreeningIndividualCreateRequestFromJSON,
    WatchlistScreeningIndividualCreateRequestToJSON,
    WatchlistScreeningIndividualCreateResponseFromJSON,
    WatchlistScreeningIndividualCreateResponseToJSON,
    WatchlistScreeningIndividualGetRequestFromJSON,
    WatchlistScreeningIndividualGetRequestToJSON,
    WatchlistScreeningIndividualGetResponseFromJSON,
    WatchlistScreeningIndividualGetResponseToJSON,
    WatchlistScreeningIndividualHistoryListRequestFromJSON,
    WatchlistScreeningIndividualHistoryListRequestToJSON,
    WatchlistScreeningIndividualHistoryListResponseFromJSON,
    WatchlistScreeningIndividualHistoryListResponseToJSON,
    WatchlistScreeningIndividualHitListRequestFromJSON,
    WatchlistScreeningIndividualHitListRequestToJSON,
    WatchlistScreeningIndividualHitListResponseFromJSON,
    WatchlistScreeningIndividualHitListResponseToJSON,
    WatchlistScreeningIndividualListRequestFromJSON,
    WatchlistScreeningIndividualListRequestToJSON,
    WatchlistScreeningIndividualListResponseFromJSON,
    WatchlistScreeningIndividualListResponseToJSON,
    WatchlistScreeningIndividualProgramGetRequestFromJSON,
    WatchlistScreeningIndividualProgramGetRequestToJSON,
    WatchlistScreeningIndividualProgramGetResponseFromJSON,
    WatchlistScreeningIndividualProgramGetResponseToJSON,
    WatchlistScreeningIndividualProgramListRequestFromJSON,
    WatchlistScreeningIndividualProgramListRequestToJSON,
    WatchlistScreeningIndividualProgramListResponseFromJSON,
    WatchlistScreeningIndividualProgramListResponseToJSON,
    WatchlistScreeningIndividualReviewCreateRequestFromJSON,
    WatchlistScreeningIndividualReviewCreateRequestToJSON,
    WatchlistScreeningIndividualReviewCreateResponseFromJSON,
    WatchlistScreeningIndividualReviewCreateResponseToJSON,
    WatchlistScreeningIndividualReviewListRequestFromJSON,
    WatchlistScreeningIndividualReviewListRequestToJSON,
    WatchlistScreeningIndividualReviewListResponseFromJSON,
    WatchlistScreeningIndividualReviewListResponseToJSON,
    WatchlistScreeningIndividualUpdateRequestFromJSON,
    WatchlistScreeningIndividualUpdateRequestToJSON,
    WatchlistScreeningIndividualUpdateResponseFromJSON,
    WatchlistScreeningIndividualUpdateResponseToJSON,
    WebhookVerificationKeyGetRequestFromJSON,
    WebhookVerificationKeyGetRequestToJSON,
    WebhookVerificationKeyGetResponseFromJSON,
    WebhookVerificationKeyGetResponseToJSON,
} from '../models/index';

export type AccountsBalanceGetOperationRequest = AccountsBalanceGetRequest;

export type AccountsGetOperationRequest = AccountsGetRequest;

export type ApplicationGetOperationRequest = ApplicationGetRequest;

export type AssetReportAuditCopyCreateOperationRequest = AssetReportAuditCopyCreateRequest;

export type AssetReportAuditCopyGetOperationRequest = AssetReportAuditCopyGetRequest;

export type AssetReportAuditCopyRemoveOperationRequest = AssetReportAuditCopyRemoveRequest;

export type AssetReportCreateOperationRequest = AssetReportCreateRequest;

export type AssetReportFilterOperationRequest = AssetReportFilterRequest;

export type AssetReportGetOperationRequest = AssetReportGetRequest;

export type AssetReportPdfGetRequest = AssetReportPDFGetRequest;

export type AssetReportRefreshOperationRequest = AssetReportRefreshRequest;

export type AssetReportRemoveOperationRequest = AssetReportRemoveRequest;

export type AuthGetOperationRequest = AuthGetRequest;

export type BankTransferBalanceGetOperationRequest = BankTransferBalanceGetRequest;

export type BankTransferCancelOperationRequest = BankTransferCancelRequest;

export type BankTransferCreateOperationRequest = BankTransferCreateRequest;

export type BankTransferEventListOperationRequest = BankTransferEventListRequest;

export type BankTransferEventSyncOperationRequest = BankTransferEventSyncRequest;

export type BankTransferGetOperationRequest = BankTransferGetRequest;

export type BankTransferListOperationRequest = BankTransferListRequest;

export type BankTransferMigrateAccountOperationRequest = BankTransferMigrateAccountRequest;

export type BankTransferSweepGetOperationRequest = BankTransferSweepGetRequest;

export type BankTransferSweepListOperationRequest = BankTransferSweepListRequest;

export type BaseReportCreateOperationRequest = BaseReportCreateRequest;

export type BaseReportGetOperationRequest = BaseReportGetRequest;

export type BeaconAccountRiskEvaluateOperationRequest = BeaconAccountRiskEvaluateRequest;

export type BeaconDuplicateGetOperationRequest = BeaconDuplicateGetRequest;

export type BeaconReportCreateOperationRequest = BeaconReportCreateRequest;

export type BeaconReportGetOperationRequest = BeaconReportGetRequest;

export type BeaconReportListOperationRequest = BeaconReportListRequest;

export type BeaconReportSyndicationGetOperationRequest = BeaconReportSyndicationGetRequest;

export type BeaconReportSyndicationListOperationRequest = BeaconReportSyndicationListRequest;

export type BeaconUserCreateOperationRequest = BeaconUserCreateRequest;

export type BeaconUserGetOperationRequest = BeaconUserGetRequest;

export type BeaconUserHistoryListOperationRequest = BeaconUserHistoryListRequest;

export type BeaconUserReviewOperationRequest = BeaconUserReviewRequest;

export type BeaconUserUpdateOperationRequest = BeaconUserUpdateRequest;

export type CategoriesGetRequest = object;

export type CraBankIncomeCreateOperationRequest = CraBankIncomeCreateRequest;

export type CraBankIncomeGetOperationRequest = CraBankIncomeGetRequest;

export type CraPartnerInsightsGetOperationRequest = CraPartnerInsightsGetRequest;

export type CreatePaymentTokenRequest = PaymentInitiationPaymentTokenCreateRequest;

export type CreditAssetReportFreddieMacGetRequest = AssetReportFreddieGetRequest;

export type CreditAuditCopyTokenCreateOperationRequest = CreditAuditCopyTokenCreateRequest;

export type CreditAuditCopyTokenUpdateOperationRequest = CreditAuditCopyTokenUpdateRequest;

export type CreditBankEmploymentGetOperationRequest = CreditBankEmploymentGetRequest;

export type CreditBankIncomeGetOperationRequest = CreditBankIncomeGetRequest;

export type CreditBankIncomePdfGetRequest = CreditBankIncomePDFGetRequest;

export type CreditBankIncomeRefreshOperationRequest = CreditBankIncomeRefreshRequest;

export type CreditBankIncomeWebhookUpdateOperationRequest = CreditBankIncomeWebhookUpdateRequest;

export type CreditBankStatementsUploadsGetOperationRequest = CreditBankStatementsUploadsGetRequest;

export type CreditEmploymentGetOperationRequest = CreditEmploymentGetRequest;

export type CreditFreddieMacReportsGetOperationRequest = CreditFreddieMacReportsGetRequest;

export type CreditPayrollIncomeGetOperationRequest = CreditPayrollIncomeGetRequest;

export type CreditPayrollIncomeParsingConfigUpdateOperationRequest = CreditPayrollIncomeParsingConfigUpdateRequest;

export type CreditPayrollIncomePrecheckOperationRequest = CreditPayrollIncomePrecheckRequest;

export type CreditPayrollIncomeRefreshOperationRequest = CreditPayrollIncomeRefreshRequest;

export type CreditPayrollIncomeRiskSignalsGetOperationRequest = CreditPayrollIncomeRiskSignalsGetRequest;

export type CreditRelayCreateOperationRequest = CreditRelayCreateRequest;

export type CreditRelayGetOperationRequest = CreditRelayGetRequest;

export type CreditRelayPdfGetRequest = CreditRelayPDFGetRequest;

export type CreditRelayRefreshOperationRequest = CreditRelayRefreshRequest;

export type CreditRelayRemoveOperationRequest = CreditRelayRemoveRequest;

export type CreditReportAuditCopyRemoveRequest = CreditAuditCopyTokenRemoveRequest;

export type CreditSessionsGetOperationRequest = CreditSessionsGetRequest;

export type DashboardUserGetOperationRequest = DashboardUserGetRequest;

export type DashboardUserListOperationRequest = DashboardUserListRequest;

export type DepositSwitchAltCreateOperationRequest = DepositSwitchAltCreateRequest;

export type DepositSwitchCreateOperationRequest = DepositSwitchCreateRequest;

export type DepositSwitchGetOperationRequest = DepositSwitchGetRequest;

export type DepositSwitchTokenCreateOperationRequest = DepositSwitchTokenCreateRequest;

export type EmployersSearchOperationRequest = EmployersSearchRequest;

export type EmploymentVerificationGetOperationRequest = EmploymentVerificationGetRequest;

export type FdxNotificationsRequest = FDXNotification;

export type IdentityGetOperationRequest = IdentityGetRequest;

export type IdentityMatchOperationRequest = IdentityMatchRequest;

export type IdentityRefreshOperationRequest = IdentityRefreshRequest;

export type IdentityVerificationAutofillCreateOperationRequest = IdentityVerificationAutofillCreateRequest;

export type IdentityVerificationCreateOperationRequest = IdentityVerificationCreateRequest;

export type IdentityVerificationGetOperationRequest = IdentityVerificationGetRequest;

export type IdentityVerificationListOperationRequest = IdentityVerificationListRequest;

export type IdentityVerificationRetryOperationRequest = IdentityVerificationRetryRequest;

export type IncomeVerificationCreateOperationRequest = IncomeVerificationCreateRequest;

export type IncomeVerificationDocumentsDownloadOperationRequest = IncomeVerificationDocumentsDownloadRequest;

export type IncomeVerificationPaystubsGetOperationRequest = IncomeVerificationPaystubsGetRequest;

export type IncomeVerificationPrecheckOperationRequest = IncomeVerificationPrecheckRequest;

export type IncomeVerificationTaxformsGetOperationRequest = IncomeVerificationTaxformsGetRequest;

export type InstitutionsGetOperationRequest = InstitutionsGetRequest;

export type InstitutionsGetByIdOperationRequest = InstitutionsGetByIdRequest;

export type InstitutionsSearchOperationRequest = InstitutionsSearchRequest;

export type InvestmentsAuthGetOperationRequest = InvestmentsAuthGetRequest;

export type InvestmentsHoldingsGetOperationRequest = InvestmentsHoldingsGetRequest;

export type InvestmentsRefreshOperationRequest = InvestmentsRefreshRequest;

export type InvestmentsTransactionsGetOperationRequest = InvestmentsTransactionsGetRequest;

export type ItemAccessTokenInvalidateOperationRequest = ItemAccessTokenInvalidateRequest;

export type ItemActivityListOperationRequest = ItemActivityListRequest;

export type ItemApplicationListOperationRequest = ItemApplicationListRequest;

export type ItemApplicationScopesUpdateOperationRequest = ItemApplicationScopesUpdateRequest;

export type ItemApplicationUnlinkOperationRequest = ItemApplicationUnlinkRequest;

export type ItemCreatePublicTokenRequest = ItemPublicTokenCreateRequest;

export type ItemGetOperationRequest = ItemGetRequest;

export type ItemImportOperationRequest = ItemImportRequest;

export type ItemPublicTokenExchangeOperationRequest = ItemPublicTokenExchangeRequest;

export type ItemRemoveOperationRequest = ItemRemoveRequest;

export type ItemWebhookUpdateOperationRequest = ItemWebhookUpdateRequest;

export type LiabilitiesGetOperationRequest = LiabilitiesGetRequest;

export type LinkDeliveryCreateOperationRequest = LinkDeliveryCreateRequest;

export type LinkDeliveryGetOperationRequest = LinkDeliveryGetRequest;

export type LinkOauthCorrelationIdExchangeRequest = LinkOAuthCorrelationIdExchangeRequest;

export type LinkTokenCreateOperationRequest = LinkTokenCreateRequest;

export type LinkTokenGetOperationRequest = LinkTokenGetRequest;

export type PartnerCustomerCreateOperationRequest = PartnerCustomerCreateRequest;

export type PartnerCustomerEnableOperationRequest = PartnerCustomerEnableRequest;

export type PartnerCustomerGetOperationRequest = PartnerCustomerGetRequest;

export type PartnerCustomerOauthInstitutionsGetRequest = PartnerCustomerOAuthInstitutionsGetRequest;

export type PartnerCustomerRemoveOperationRequest = PartnerCustomerRemoveRequest;

export type PaymentInitiationConsentCreateOperationRequest = PaymentInitiationConsentCreateRequest;

export type PaymentInitiationConsentGetOperationRequest = PaymentInitiationConsentGetRequest;

export type PaymentInitiationConsentPaymentExecuteOperationRequest = PaymentInitiationConsentPaymentExecuteRequest;

export type PaymentInitiationConsentRevokeOperationRequest = PaymentInitiationConsentRevokeRequest;

export type PaymentInitiationPaymentCreateOperationRequest = PaymentInitiationPaymentCreateRequest;

export type PaymentInitiationPaymentGetOperationRequest = PaymentInitiationPaymentGetRequest;

export type PaymentInitiationPaymentListOperationRequest = PaymentInitiationPaymentListRequest;

export type PaymentInitiationPaymentReverseOperationRequest = PaymentInitiationPaymentReverseRequest;

export type PaymentInitiationRecipientCreateOperationRequest = PaymentInitiationRecipientCreateRequest;

export type PaymentInitiationRecipientGetOperationRequest = PaymentInitiationRecipientGetRequest;

export type PaymentInitiationRecipientListOperationRequest = PaymentInitiationRecipientListRequest;

export type PaymentProfileCreateOperationRequest = PaymentProfileCreateRequest;

export type PaymentProfileGetOperationRequest = PaymentProfileGetRequest;

export type PaymentProfileRemoveOperationRequest = PaymentProfileRemoveRequest;

export type ProcessorAccountGetOperationRequest = ProcessorAccountGetRequest;

export type ProcessorApexProcessorTokenCreateOperationRequest = ProcessorApexProcessorTokenCreateRequest;

export type ProcessorAuthGetOperationRequest = ProcessorAuthGetRequest;

export type ProcessorBalanceGetOperationRequest = ProcessorBalanceGetRequest;

export type ProcessorBankTransferCreateOperationRequest = ProcessorBankTransferCreateRequest;

export type ProcessorIdentityGetOperationRequest = ProcessorIdentityGetRequest;

export type ProcessorIdentityMatchOperationRequest = ProcessorIdentityMatchRequest;

export type ProcessorLiabilitiesGetOperationRequest = ProcessorLiabilitiesGetRequest;

export type ProcessorSignalDecisionReportOperationRequest = ProcessorSignalDecisionReportRequest;

export type ProcessorSignalEvaluateOperationRequest = ProcessorSignalEvaluateRequest;

export type ProcessorSignalPrepareOperationRequest = ProcessorSignalPrepareRequest;

export type ProcessorSignalReturnReportOperationRequest = ProcessorSignalReturnReportRequest;

export type ProcessorStripeBankAccountTokenCreateOperationRequest = ProcessorStripeBankAccountTokenCreateRequest;

export type ProcessorTokenCreateOperationRequest = ProcessorTokenCreateRequest;

export type ProcessorTokenPermissionsGetOperationRequest = ProcessorTokenPermissionsGetRequest;

export type ProcessorTokenPermissionsSetOperationRequest = ProcessorTokenPermissionsSetRequest;

export type ProcessorTokenWebhookUpdateOperationRequest = ProcessorTokenWebhookUpdateRequest;

export type ProcessorTransactionsGetOperationRequest = ProcessorTransactionsGetRequest;

export type ProcessorTransactionsRecurringGetOperationRequest = ProcessorTransactionsRecurringGetRequest;

export type ProcessorTransactionsRefreshOperationRequest = ProcessorTransactionsRefreshRequest;

export type ProcessorTransactionsSyncOperationRequest = ProcessorTransactionsSyncRequest;

export type ProfileGetOperationRequest = ProfileGetRequest;

export type SandboxBankIncomeFireWebhookOperationRequest = SandboxBankIncomeFireWebhookRequest;

export type SandboxBankTransferFireWebhookOperationRequest = SandboxBankTransferFireWebhookRequest;

export type SandboxBankTransferSimulateOperationRequest = SandboxBankTransferSimulateRequest;

export type SandboxIncomeFireWebhookOperationRequest = SandboxIncomeFireWebhookRequest;

export type SandboxItemFireWebhookOperationRequest = SandboxItemFireWebhookRequest;

export type SandboxItemResetLoginOperationRequest = SandboxItemResetLoginRequest;

export type SandboxItemSetVerificationStatusOperationRequest = SandboxItemSetVerificationStatusRequest;

export type SandboxOauthSelectAccountsOperationRequest = SandboxOauthSelectAccountsRequest;

export type SandboxPaymentProfileResetLoginOperationRequest = SandboxPaymentProfileResetLoginRequest;

export type SandboxProcessorTokenCreateOperationRequest = SandboxProcessorTokenCreateRequest;

export type SandboxPublicTokenCreateOperationRequest = SandboxPublicTokenCreateRequest;

export type SandboxTransferFireWebhookOperationRequest = SandboxTransferFireWebhookRequest;

export type SandboxTransferLedgerDepositSimulateOperationRequest = SandboxTransferLedgerDepositSimulateRequest;

export type SandboxTransferLedgerSimulateAvailableOperationRequest = SandboxTransferLedgerSimulateAvailableRequest;

export type SandboxTransferLedgerWithdrawSimulateOperationRequest = SandboxTransferLedgerWithdrawSimulateRequest;

export type SandboxTransferRefundSimulateOperationRequest = SandboxTransferRefundSimulateRequest;

export type SandboxTransferRepaymentSimulateOperationRequest = SandboxTransferRepaymentSimulateRequest;

export type SandboxTransferSimulateOperationRequest = SandboxTransferSimulateRequest;

export type SandboxTransferSweepSimulateOperationRequest = SandboxTransferSweepSimulateRequest;

export type SandboxTransferTestClockAdvanceOperationRequest = SandboxTransferTestClockAdvanceRequest;

export type SandboxTransferTestClockCreateOperationRequest = SandboxTransferTestClockCreateRequest;

export type SandboxTransferTestClockGetOperationRequest = SandboxTransferTestClockGetRequest;

export type SandboxTransferTestClockListOperationRequest = SandboxTransferTestClockListRequest;

export type SignalDecisionReportOperationRequest = SignalDecisionReportRequest;

export type SignalEvaluateOperationRequest = SignalEvaluateRequest;

export type SignalPrepareOperationRequest = SignalPrepareRequest;

export type SignalReturnReportOperationRequest = SignalReturnReportRequest;

export type StatementsDownloadOperationRequest = StatementsDownloadRequest;

export type StatementsListOperationRequest = StatementsListRequest;

export type StatementsRefreshOperationRequest = StatementsRefreshRequest;

export type TransactionsEnhanceRequest = TransactionsEnhanceGetRequest;

export type TransactionsEnrichOperationRequest = TransactionsEnrichRequest;

export type TransactionsGetOperationRequest = TransactionsGetRequest;

export type TransactionsRecurringGetOperationRequest = TransactionsRecurringGetRequest;

export type TransactionsRefreshOperationRequest = TransactionsRefreshRequest;

export type TransactionsRulesCreateOperationRequest = TransactionsRulesCreateRequest;

export type TransactionsRulesListOperationRequest = TransactionsRulesListRequest;

export type TransactionsRulesRemoveOperationRequest = TransactionsRulesRemoveRequest;

export type TransactionsSyncOperationRequest = TransactionsSyncRequest;

export type TransactionsUserInsightsGetOperationRequest = TransactionsUserInsightsGetRequest;

export type TransferAuthorizationCreateOperationRequest = TransferAuthorizationCreateRequest;

export type TransferBalanceGetOperationRequest = TransferBalanceGetRequest;

export type TransferCancelOperationRequest = TransferCancelRequest;

export type TransferCapabilitiesGetOperationRequest = TransferCapabilitiesGetRequest;

export type TransferConfigurationGetOperationRequest = TransferConfigurationGetRequest;

export type TransferCreateOperationRequest = TransferCreateRequest;

export type TransferDiligenceDocumentUploadOperationRequest = TransferDiligenceDocumentUploadRequest;

export type TransferDiligenceSubmitOperationRequest = TransferDiligenceSubmitRequest;

export type TransferEventListOperationRequest = TransferEventListRequest;

export type TransferEventSyncOperationRequest = TransferEventSyncRequest;

export type TransferGetOperationRequest = TransferGetRequest;

export type TransferIntentCreateOperationRequest = TransferIntentCreateRequest;

export type TransferIntentGetOperationRequest = TransferIntentGetRequest;

export type TransferLedgerDepositOperationRequest = TransferLedgerDepositRequest;

export type TransferLedgerDistributeOperationRequest = TransferLedgerDistributeRequest;

export type TransferLedgerGetOperationRequest = TransferLedgerGetRequest;

export type TransferLedgerWithdrawOperationRequest = TransferLedgerWithdrawRequest;

export type TransferListOperationRequest = TransferListRequest;

export type TransferMetricsGetOperationRequest = TransferMetricsGetRequest;

export type TransferMigrateAccountOperationRequest = TransferMigrateAccountRequest;

export type TransferOriginatorCreateOperationRequest = TransferOriginatorCreateRequest;

export type TransferOriginatorFundingAccountUpdateOperationRequest = TransferOriginatorFundingAccountUpdateRequest;

export type TransferOriginatorGetOperationRequest = TransferOriginatorGetRequest;

export type TransferOriginatorListOperationRequest = TransferOriginatorListRequest;

export type TransferQuestionnaireCreateOperationRequest = TransferQuestionnaireCreateRequest;

export type TransferRecurringCancelOperationRequest = TransferRecurringCancelRequest;

export type TransferRecurringCreateOperationRequest = TransferRecurringCreateRequest;

export type TransferRecurringGetOperationRequest = TransferRecurringGetRequest;

export type TransferRecurringListOperationRequest = TransferRecurringListRequest;

export type TransferRefundCancelOperationRequest = TransferRefundCancelRequest;

export type TransferRefundCreateOperationRequest = TransferRefundCreateRequest;

export type TransferRefundGetOperationRequest = TransferRefundGetRequest;

export type TransferRepaymentListOperationRequest = TransferRepaymentListRequest;

export type TransferRepaymentReturnListOperationRequest = TransferRepaymentReturnListRequest;

export type TransferSweepGetOperationRequest = TransferSweepGetRequest;

export type TransferSweepListOperationRequest = TransferSweepListRequest;

export type UserCreateOperationRequest = UserCreateRequest;

export type UserUpdateOperationRequest = UserUpdateRequest;

export type WalletCreateOperationRequest = WalletCreateRequest;

export type WalletGetOperationRequest = WalletGetRequest;

export type WalletListOperationRequest = WalletListRequest;

export type WalletTransactionExecuteOperationRequest = WalletTransactionExecuteRequest;

export type WalletTransactionGetOperationRequest = WalletTransactionGetRequest;

export type WalletTransactionListOperationRequest = WalletTransactionListRequest;

export type WatchlistScreeningEntityCreateOperationRequest = WatchlistScreeningEntityCreateRequest;

export type WatchlistScreeningEntityGetOperationRequest = WatchlistScreeningEntityGetRequest;

export type WatchlistScreeningEntityHistoryListOperationRequest = WatchlistScreeningEntityHistoryListRequest;

export type WatchlistScreeningEntityHitListOperationRequest = WatchlistScreeningEntityHitListRequest;

export type WatchlistScreeningEntityListOperationRequest = WatchlistScreeningEntityListRequest;

export type WatchlistScreeningEntityProgramGetOperationRequest = WatchlistScreeningEntityProgramGetRequest;

export type WatchlistScreeningEntityProgramListOperationRequest = WatchlistScreeningEntityProgramListRequest;

export type WatchlistScreeningEntityReviewCreateOperationRequest = WatchlistScreeningEntityReviewCreateRequest;

export type WatchlistScreeningEntityReviewListOperationRequest = WatchlistScreeningEntityReviewListRequest;

export type WatchlistScreeningEntityUpdateOperationRequest = WatchlistScreeningEntityUpdateRequest;

export type WatchlistScreeningIndividualCreateOperationRequest = WatchlistScreeningIndividualCreateRequest;

export type WatchlistScreeningIndividualGetOperationRequest = WatchlistScreeningIndividualGetRequest;

export type WatchlistScreeningIndividualHistoryListOperationRequest = WatchlistScreeningIndividualHistoryListRequest;

export type WatchlistScreeningIndividualHitListOperationRequest = WatchlistScreeningIndividualHitListRequest;

export type WatchlistScreeningIndividualListOperationRequest = WatchlistScreeningIndividualListRequest;

export type WatchlistScreeningIndividualProgramGetOperationRequest = WatchlistScreeningIndividualProgramGetRequest;

export type WatchlistScreeningIndividualProgramListOperationRequest = WatchlistScreeningIndividualProgramListRequest;

export type WatchlistScreeningIndividualReviewCreateOperationRequest = WatchlistScreeningIndividualReviewCreateRequest;

export type WatchlistScreeningIndividualReviewListOperationRequest = WatchlistScreeningIndividualReviewListRequest;

export type WatchlistScreeningIndividualUpdateOperationRequest = WatchlistScreeningIndividualUpdateRequest;

export type WebhookVerificationKeyGetOperationRequest = WebhookVerificationKeyGetRequest;

/**
 * 
 */
export class PlaidApi extends runtime.BaseAPI {

    /**
     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     * Retrieve real-time balance data
     */
    async accountsBalanceGetRaw(requestParameters: AccountsBalanceGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'accountsBalanceGetRequest',
                'Required parameter "accountsBalanceGetRequest" was null or undefined when calling accountsBalanceGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/accounts/balance/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountsBalanceGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     * Retrieve real-time balance data
     */
    async accountsBalanceGet(requestParameters: AccountsBalanceGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsGetResponse> {
        const response = await this.accountsBalanceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
     * Retrieve accounts
     */
    async accountsGetRaw(requestParameters: AccountsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'accountsGetRequest',
                'Required parameter "accountsGetRequest" was null or undefined when calling accountsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/accounts/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
     * Retrieve accounts
     */
    async accountsGet(requestParameters: AccountsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsGetResponse> {
        const response = await this.accountsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * Retrieve information about a Plaid application
     */
    async applicationGetRaw(requestParameters: ApplicationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'applicationGetRequest',
                'Required parameter "applicationGetRequest" was null or undefined when calling applicationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/application/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationGetResponseFromJSON(jsonValue));
    }

    /**
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * Retrieve information about a Plaid application
     */
    async applicationGet(requestParameters: ApplicationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationGetResponse> {
        const response = await this.applicationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * Create Asset Report Audit Copy
     */
    async assetReportAuditCopyCreateRaw(requestParameters: AssetReportAuditCopyCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportAuditCopyCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportAuditCopyCreateRequest',
                'Required parameter "assetReportAuditCopyCreateRequest" was null or undefined when calling assetReportAuditCopyCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/asset_report/audit_copy/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportAuditCopyCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportAuditCopyCreateResponseFromJSON(jsonValue));
    }

    /**
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * Create Asset Report Audit Copy
     */
    async assetReportAuditCopyCreate(requestParameters: AssetReportAuditCopyCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportAuditCopyCreateResponse> {
        const response = await this.assetReportAuditCopyCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
     * Retrieve an Asset Report Audit Copy
     */
    async assetReportAuditCopyGetRaw(requestParameters: AssetReportAuditCopyGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportAuditCopyGetRequest',
                'Required parameter "assetReportAuditCopyGetRequest" was null or undefined when calling assetReportAuditCopyGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/asset_report/audit_copy/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportAuditCopyGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportGetResponseFromJSON(jsonValue));
    }

    /**
     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
     * Retrieve an Asset Report Audit Copy
     */
    async assetReportAuditCopyGet(requestParameters: AssetReportAuditCopyGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportGetResponse> {
        const response = await this.assetReportAuditCopyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * Remove Asset Report Audit Copy
     */
    async assetReportAuditCopyRemoveRaw(requestParameters: AssetReportAuditCopyRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportAuditCopyRemoveResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportAuditCopyRemoveRequest',
                'Required parameter "assetReportAuditCopyRemoveRequest" was null or undefined when calling assetReportAuditCopyRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/asset_report/audit_copy/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportAuditCopyRemoveRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportAuditCopyRemoveResponseFromJSON(jsonValue));
    }

    /**
     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * Remove Asset Report Audit Copy
     */
    async assetReportAuditCopyRemove(requestParameters: AssetReportAuditCopyRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportAuditCopyRemoveResponse> {
        const response = await this.assetReportAuditCopyRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
     * Create an Asset Report
     */
    async assetReportCreateRaw(requestParameters: AssetReportCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportCreateRequest',
                'Required parameter "assetReportCreateRequest" was null or undefined when calling assetReportCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/asset_report/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportCreateResponseFromJSON(jsonValue));
    }

    /**
     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
     * Create an Asset Report
     */
    async assetReportCreate(requestParameters: AssetReportCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportCreateResponse> {
        const response = await this.assetReportCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     * Filter Asset Report
     */
    async assetReportFilterRaw(requestParameters: AssetReportFilterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportFilterResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportFilterRequest',
                'Required parameter "assetReportFilterRequest" was null or undefined when calling assetReportFilter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/asset_report/filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportFilterRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportFilterResponseFromJSON(jsonValue));
    }

    /**
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     * Filter Asset Report
     */
    async assetReportFilter(requestParameters: AssetReportFilterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportFilterResponse> {
        const response = await this.assetReportFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
     * Retrieve an Asset Report
     */
    async assetReportGetRaw(requestParameters: AssetReportGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportGetRequest',
                'Required parameter "assetReportGetRequest" was null or undefined when calling assetReportGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/asset_report/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
     * Retrieve an Asset Report
     */
    async assetReportGet(requestParameters: AssetReportGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportGetResponse> {
        const response = await this.assetReportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * Retrieve a PDF Asset Report
     */
    async assetReportPdfGetRaw(requestParameters: AssetReportPdfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportPDFGetRequest',
                'Required parameter "assetReportPDFGetRequest" was null or undefined when calling assetReportPdfGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/asset_report/pdf/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportPDFGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * Retrieve a PDF Asset Report
     */
    async assetReportPdfGet(requestParameters: AssetReportPdfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.assetReportPdfGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
     * Refresh an Asset Report
     */
    async assetReportRefreshRaw(requestParameters: AssetReportRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportRefreshResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportRefreshRequest',
                'Required parameter "assetReportRefreshRequest" was null or undefined when calling assetReportRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/asset_report/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportRefreshRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportRefreshResponseFromJSON(jsonValue));
    }

    /**
     * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
     * Refresh an Asset Report
     */
    async assetReportRefresh(requestParameters: AssetReportRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportRefreshResponse> {
        const response = await this.assetReportRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
     * Delete an Asset Report
     */
    async assetReportRemoveRaw(requestParameters: AssetReportRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportRemoveResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportRemoveRequest',
                'Required parameter "assetReportRemoveRequest" was null or undefined when calling assetReportRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/asset_report/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportRemoveRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportRemoveResponseFromJSON(jsonValue));
    }

    /**
     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
     * Delete an Asset Report
     */
    async assetReportRemove(requestParameters: AssetReportRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportRemoveResponse> {
        const response = await this.assetReportRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * Retrieve auth data
     */
    async authGetRaw(requestParameters: AuthGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'authGetRequest',
                'Required parameter "authGetRequest" was null or undefined when calling authGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/auth/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * Retrieve auth data
     */
    async authGet(requestParameters: AuthGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGetResponse> {
        const response = await this.authGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * Get balance of your Bank Transfer account
     */
    async bankTransferBalanceGetRaw(requestParameters: BankTransferBalanceGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferBalanceGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferBalanceGetRequest',
                'Required parameter "bankTransferBalanceGetRequest" was null or undefined when calling bankTransferBalanceGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/balance/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferBalanceGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferBalanceGetResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * Get balance of your Bank Transfer account
     */
    async bankTransferBalanceGet(requestParameters: BankTransferBalanceGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferBalanceGetResponse> {
        const response = await this.bankTransferBalanceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
     * Cancel a bank transfer
     */
    async bankTransferCancelRaw(requestParameters: BankTransferCancelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferCancelResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferCancelRequest',
                'Required parameter "bankTransferCancelRequest" was null or undefined when calling bankTransferCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferCancelRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferCancelResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
     * Cancel a bank transfer
     */
    async bankTransferCancel(requestParameters: BankTransferCancelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferCancelResponse> {
        const response = await this.bankTransferCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
     * Create a bank transfer
     */
    async bankTransferCreateRaw(requestParameters: BankTransferCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferCreateRequest',
                'Required parameter "bankTransferCreateRequest" was null or undefined when calling bankTransferCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
     * Create a bank transfer
     */
    async bankTransferCreate(requestParameters: BankTransferCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferCreateResponse> {
        const response = await this.bankTransferCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
     * List bank transfer events
     */
    async bankTransferEventListRaw(requestParameters: BankTransferEventListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferEventListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferEventListRequest',
                'Required parameter "bankTransferEventListRequest" was null or undefined when calling bankTransferEventList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/event/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferEventListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferEventListResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
     * List bank transfer events
     */
    async bankTransferEventList(requestParameters: BankTransferEventListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferEventListResponse> {
        const response = await this.bankTransferEventListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * Sync bank transfer events
     */
    async bankTransferEventSyncRaw(requestParameters: BankTransferEventSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferEventSyncResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferEventSyncRequest',
                'Required parameter "bankTransferEventSyncRequest" was null or undefined when calling bankTransferEventSync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/event/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferEventSyncRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferEventSyncResponseFromJSON(jsonValue));
    }

    /**
     * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * Sync bank transfer events
     */
    async bankTransferEventSync(requestParameters: BankTransferEventSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferEventSyncResponse> {
        const response = await this.bankTransferEventSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
     * Retrieve a bank transfer
     */
    async bankTransferGetRaw(requestParameters: BankTransferGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferGetRequest',
                'Required parameter "bankTransferGetRequest" was null or undefined when calling bankTransferGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
     * Retrieve a bank transfer
     */
    async bankTransferGet(requestParameters: BankTransferGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferGetResponse> {
        const response = await this.bankTransferGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
     * List bank transfers
     */
    async bankTransferListRaw(requestParameters: BankTransferListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferListRequest',
                'Required parameter "bankTransferListRequest" was null or undefined when calling bankTransferList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferListResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
     * List bank transfers
     */
    async bankTransferList(requestParameters: BankTransferListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferListResponse> {
        const response = await this.bankTransferListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * Migrate account into Bank Transfers
     */
    async bankTransferMigrateAccountRaw(requestParameters: BankTransferMigrateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferMigrateAccountResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferMigrateAccountRequest',
                'Required parameter "bankTransferMigrateAccountRequest" was null or undefined when calling bankTransferMigrateAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/migrate_account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferMigrateAccountRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferMigrateAccountResponseFromJSON(jsonValue));
    }

    /**
     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * Migrate account into Bank Transfers
     */
    async bankTransferMigrateAccount(requestParameters: BankTransferMigrateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferMigrateAccountResponse> {
        const response = await this.bankTransferMigrateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
     * Retrieve a sweep
     */
    async bankTransferSweepGetRaw(requestParameters: BankTransferSweepGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferSweepGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferSweepGetRequest',
                'Required parameter "bankTransferSweepGetRequest" was null or undefined when calling bankTransferSweepGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/sweep/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferSweepGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferSweepGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
     * Retrieve a sweep
     */
    async bankTransferSweepGet(requestParameters: BankTransferSweepGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferSweepGetResponse> {
        const response = await this.bankTransferSweepGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
     * List sweeps
     */
    async bankTransferSweepListRaw(requestParameters: BankTransferSweepListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransferSweepListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'bankTransferSweepListRequest',
                'Required parameter "bankTransferSweepListRequest" was null or undefined when calling bankTransferSweepList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/bank_transfer/sweep/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankTransferSweepListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransferSweepListResponseFromJSON(jsonValue));
    }

    /**
     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
     * List sweeps
     */
    async bankTransferSweepList(requestParameters: BankTransferSweepListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransferSweepListResponse> {
        const response = await this.bankTransferSweepListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows the customer to create a Base Report by passing in a user token. The Base Report will be generated based on the most recently linked item from the user token.
     * Create a Base Report
     */
    async baseReportCreateRaw(requestParameters: BaseReportCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseReportCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'baseReportCreateRequest',
                'Required parameter "baseReportCreateRequest" was null or undefined when calling baseReportCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/cra/base_report/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BaseReportCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseReportCreateResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows the customer to create a Base Report by passing in a user token. The Base Report will be generated based on the most recently linked item from the user token.
     * Create a Base Report
     */
    async baseReportCreate(requestParameters: BaseReportCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseReportCreateResponse> {
        const response = await this.baseReportCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/link/token/create`.
     * Retrieve a Base Report
     */
    async baseReportGetRaw(requestParameters: BaseReportGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseReportGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'baseReportGetRequest',
                'Required parameter "baseReportGetRequest" was null or undefined when calling baseReportGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/cra/base_report/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BaseReportGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseReportGetResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/link/token/create`.
     * Retrieve a Base Report
     */
    async baseReportGet(requestParameters: BaseReportGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseReportGetResponse> {
        const response = await this.baseReportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
     * Evaluate risk of a bank account
     */
    async beaconAccountRiskEvaluateRaw(requestParameters: BeaconAccountRiskEvaluateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconAccountRiskEvaluateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconAccountRiskEvaluateRequest',
                'Required parameter "beaconAccountRiskEvaluateRequest" was null or undefined when calling beaconAccountRiskEvaluate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/account_risk/v1/evaluate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconAccountRiskEvaluateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconAccountRiskEvaluateResponseFromJSON(jsonValue));
    }

    /**
     * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
     * Evaluate risk of a bank account
     */
    async beaconAccountRiskEvaluate(requestParameters: BeaconAccountRiskEvaluateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconAccountRiskEvaluateResponse> {
        const response = await this.beaconAccountRiskEvaluateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`. 
     * Get a Beacon Duplicate
     */
    async beaconDuplicateGetRaw(requestParameters: BeaconDuplicateGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconDuplicateGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconDuplicateGetRequest',
                'Required parameter "beaconDuplicateGetRequest" was null or undefined when calling beaconDuplicateGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/duplicate/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconDuplicateGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconDuplicateGetResponseFromJSON(jsonValue));
    }

    /**
     * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`. 
     * Get a Beacon Duplicate
     */
    async beaconDuplicateGet(requestParameters: BeaconDuplicateGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconDuplicateGetResponse> {
        const response = await this.beaconDuplicateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a fraud report for a given Beacon User.
     * Create a Beacon Report
     */
    async beaconReportCreateRaw(requestParameters: BeaconReportCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconReportCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconReportCreateRequest',
                'Required parameter "beaconReportCreateRequest" was null or undefined when calling beaconReportCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/report/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconReportCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconReportCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a fraud report for a given Beacon User.
     * Create a Beacon Report
     */
    async beaconReportCreate(requestParameters: BeaconReportCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconReportCreateResponse> {
        const response = await this.beaconReportCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a Beacon report for a given Beacon report id.
     * Get a Beacon Report
     */
    async beaconReportGetRaw(requestParameters: BeaconReportGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconReportGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconReportGetRequest',
                'Required parameter "beaconReportGetRequest" was null or undefined when calling beaconReportGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/report/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconReportGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconReportGetResponseFromJSON(jsonValue));
    }

    /**
     * Returns a Beacon report for a given Beacon report id.
     * Get a Beacon Report
     */
    async beaconReportGet(requestParameters: BeaconReportGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconReportGetResponse> {
        const response = await this.beaconReportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
     * List Beacon Reports for a Beacon User
     */
    async beaconReportListRaw(requestParameters: BeaconReportListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconReportListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconReportListRequest',
                'Required parameter "beaconReportListRequest" was null or undefined when calling beaconReportList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/report/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconReportListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconReportListResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
     * List Beacon Reports for a Beacon User
     */
    async beaconReportList(requestParameters: BeaconReportListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconReportListResponse> {
        const response = await this.beaconReportListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
     * Get a Beacon Report Syndication
     */
    async beaconReportSyndicationGetRaw(requestParameters: BeaconReportSyndicationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconReportSyndicationGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconReportSyndicationGetRequest',
                'Required parameter "beaconReportSyndicationGetRequest" was null or undefined when calling beaconReportSyndicationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/report_syndication/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconReportSyndicationGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconReportSyndicationGetResponseFromJSON(jsonValue));
    }

    /**
     * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
     * Get a Beacon Report Syndication
     */
    async beaconReportSyndicationGet(requestParameters: BeaconReportSyndicationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconReportSyndicationGetResponse> {
        const response = await this.beaconReportSyndicationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
     * List Beacon Report Syndications for a Beacon User
     */
    async beaconReportSyndicationListRaw(requestParameters: BeaconReportSyndicationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconReportSyndicationListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconReportSyndicationListRequest',
                'Required parameter "beaconReportSyndicationListRequest" was null or undefined when calling beaconReportSyndicationList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/report_syndication/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconReportSyndicationListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconReportSyndicationListResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
     * List Beacon Report Syndications for a Beacon User
     */
    async beaconReportSyndicationList(requestParameters: BeaconReportSyndicationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconReportSyndicationListResponse> {
        const response = await this.beaconReportSyndicationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
     * Create a Beacon User
     */
    async beaconUserCreateRaw(requestParameters: BeaconUserCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconUserCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconUserCreateRequest',
                'Required parameter "beaconUserCreateRequest" was null or undefined when calling beaconUserCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/user/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconUserCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconUserCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
     * Create a Beacon User
     */
    async beaconUserCreate(requestParameters: BeaconUserCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconUserCreateResponse> {
        const response = await this.beaconUserCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks. 
     * Get a Beacon User
     */
    async beaconUserGetRaw(requestParameters: BeaconUserGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconUserGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconUserGetRequest',
                'Required parameter "beaconUserGetRequest" was null or undefined when calling beaconUserGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/user/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconUserGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconUserGetResponseFromJSON(jsonValue));
    }

    /**
     * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks. 
     * Get a Beacon User
     */
    async beaconUserGet(requestParameters: BeaconUserGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconUserGetResponse> {
        const response = await this.beaconUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all changes to the Beacon User in reverse-chronological order.
     * List a Beacon User\'s history
     */
    async beaconUserHistoryListRaw(requestParameters: BeaconUserHistoryListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconUserHistoryListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconUserHistoryListRequest',
                'Required parameter "beaconUserHistoryListRequest" was null or undefined when calling beaconUserHistoryList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/user/history/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconUserHistoryListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconUserHistoryListResponseFromJSON(jsonValue));
    }

    /**
     * List all changes to the Beacon User in reverse-chronological order.
     * List a Beacon User\'s history
     */
    async beaconUserHistoryList(requestParameters: BeaconUserHistoryListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconUserHistoryListResponse> {
        const response = await this.beaconUserHistoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
     * Review a Beacon User
     */
    async beaconUserReviewRaw(requestParameters: BeaconUserReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconUserGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconUserReviewRequest',
                'Required parameter "beaconUserReviewRequest" was null or undefined when calling beaconUserReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/user/review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconUserReviewRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconUserGetResponseFromJSON(jsonValue));
    }

    /**
     * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
     * Review a Beacon User
     */
    async beaconUserReview(requestParameters: BeaconUserReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconUserGetResponse> {
        const response = await this.beaconUserReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the identity data for a Beacon User in your Beacon Program.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit a change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
     * Update the identity data of a Beacon User
     */
    async beaconUserUpdateRaw(requestParameters: BeaconUserUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeaconUserUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'beaconUserUpdateRequest',
                'Required parameter "beaconUserUpdateRequest" was null or undefined when calling beaconUserUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beacon/user/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeaconUserUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeaconUserUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update the identity data for a Beacon User in your Beacon Program.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit a change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
     * Update the identity data of a Beacon User
     */
    async beaconUserUpdate(requestParameters: BeaconUserUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeaconUserUpdateResponse> {
        const response = await this.beaconUserUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
     * Get categories
     */
    async categoriesGetRaw(requestParameters: CategoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoriesGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling categoriesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categories/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoriesGetResponseFromJSON(jsonValue));
    }

    /**
     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
     * Get categories
     */
    async categoriesGet(requestParameters: CategoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoriesGetResponse> {
        const response = await this.categoriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/cra/bank_income/create` creates a CRA report for income verification
     * Create a CRA report for income verification
     */
    async craBankIncomeCreateRaw(requestParameters: CraBankIncomeCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CraBankIncomeCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'craBankIncomeCreateRequest',
                'Required parameter "craBankIncomeCreateRequest" was null or undefined when calling craBankIncomeCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/cra/bank_income/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CraBankIncomeCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CraBankIncomeCreateResponseFromJSON(jsonValue));
    }

    /**
     * `/cra/bank_income/create` creates a CRA report for income verification
     * Create a CRA report for income verification
     */
    async craBankIncomeCreate(requestParameters: CraBankIncomeCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CraBankIncomeCreateResponse> {
        const response = await this.craBankIncomeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
     * Retrieve information from the bank accounts used for income verification
     */
    async craBankIncomeGetRaw(requestParameters: CraBankIncomeGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CraBankIncomeGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'craBankIncomeGetRequest',
                'Required parameter "craBankIncomeGetRequest" was null or undefined when calling craBankIncomeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/cra/bank_income/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CraBankIncomeGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CraBankIncomeGetResponseFromJSON(jsonValue));
    }

    /**
     * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
     * Retrieve information from the bank accounts used for income verification
     */
    async craBankIncomeGet(requestParameters: CraBankIncomeGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CraBankIncomeGetResponse> {
        const response = await this.craBankIncomeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/cra/partner_insights/get` returns cash flow insights for a specified user.
     * Retrieve cash flow insights from the bank accounts used for income verification
     */
    async craPartnerInsightsGetRaw(requestParameters: CraPartnerInsightsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CraPartnerInsightsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'craPartnerInsightsGetRequest',
                'Required parameter "craPartnerInsightsGetRequest" was null or undefined when calling craPartnerInsightsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/cra/partner_insights/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CraPartnerInsightsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CraPartnerInsightsGetResponseFromJSON(jsonValue));
    }

    /**
     * `/cra/partner_insights/get` returns cash flow insights for a specified user.
     * Retrieve cash flow insights from the bank accounts used for income verification
     */
    async craPartnerInsightsGet(requestParameters: CraPartnerInsightsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CraPartnerInsightsGetResponse> {
        const response = await this.craPartnerInsightsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * Create payment token
     * @deprecated
     */
    async createPaymentTokenRaw(requestParameters: CreatePaymentTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationPaymentTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationPaymentTokenCreateRequest',
                'Required parameter "paymentInitiationPaymentTokenCreateRequest" was null or undefined when calling createPaymentToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/payment/token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationPaymentTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationPaymentTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * Create payment token
     * @deprecated
     */
    async createPaymentToken(requestParameters: CreatePaymentTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationPaymentTokenCreateResponse> {
        const response = await this.createPaymentTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
     * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     */
    async creditAssetReportFreddieMacGetRaw(requestParameters: CreditAssetReportFreddieMacGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportFreddieGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'assetReportFreddieGetRequest',
                'Required parameter "assetReportFreddieGetRequest" was null or undefined when calling creditAssetReportFreddieMacGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/asset_report/freddie_mac/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReportFreddieGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportFreddieGetResponseFromJSON(jsonValue));
    }

    /**
     * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
     * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     */
    async creditAssetReportFreddieMacGet(requestParameters: CreditAssetReportFreddieMacGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportFreddieGetResponse> {
        const response = await this.creditAssetReportFreddieMacGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
     * Create Asset or Income Report Audit Copy Token
     */
    async creditAuditCopyTokenCreateRaw(requestParameters: CreditAuditCopyTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditAuditCopyTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditAuditCopyTokenCreateRequest',
                'Required parameter "creditAuditCopyTokenCreateRequest" was null or undefined when calling creditAuditCopyTokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/audit_copy_token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditAuditCopyTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditAuditCopyTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
     * Create Asset or Income Report Audit Copy Token
     */
    async creditAuditCopyTokenCreate(requestParameters: CreditAuditCopyTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditAuditCopyTokenCreateResponse> {
        const response = await this.creditAuditCopyTokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
     * Update an Audit Copy Token
     */
    async creditAuditCopyTokenUpdateRaw(requestParameters: CreditAuditCopyTokenUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditAuditCopyTokenUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditAuditCopyTokenUpdateRequest',
                'Required parameter "creditAuditCopyTokenUpdateRequest" was null or undefined when calling creditAuditCopyTokenUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/audit_copy_token/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditAuditCopyTokenUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditAuditCopyTokenUpdateResponseFromJSON(jsonValue));
    }

    /**
     * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
     * Update an Audit Copy Token
     */
    async creditAuditCopyTokenUpdate(requestParameters: CreditAuditCopyTokenUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditAuditCopyTokenUpdateResponse> {
        const response = await this.creditAuditCopyTokenUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
     * Retrieve information from the bank accounts used for employment verification
     */
    async creditBankEmploymentGetRaw(requestParameters: CreditBankEmploymentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditBankEmploymentGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditBankEmploymentGetRequest',
                'Required parameter "creditBankEmploymentGetRequest" was null or undefined when calling creditBankEmploymentGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beta/credit/v1/bank_employment/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditBankEmploymentGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditBankEmploymentGetResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
     * Retrieve information from the bank accounts used for employment verification
     */
    async creditBankEmploymentGet(requestParameters: CreditBankEmploymentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditBankEmploymentGetResponse> {
        const response = await this.creditBankEmploymentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
     * Retrieve information from the bank accounts used for income verification
     */
    async creditBankIncomeGetRaw(requestParameters: CreditBankIncomeGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditBankIncomeGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditBankIncomeGetRequest',
                'Required parameter "creditBankIncomeGetRequest" was null or undefined when calling creditBankIncomeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/bank_income/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditBankIncomeGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditBankIncomeGetResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
     * Retrieve information from the bank accounts used for income verification
     */
    async creditBankIncomeGet(requestParameters: CreditBankIncomeGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditBankIncomeGetResponse> {
        const response = await this.creditBankIncomeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
     * Retrieve information from the bank accounts used for income verification in PDF format
     */
    async creditBankIncomePdfGetRaw(requestParameters: CreditBankIncomePdfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditBankIncomePDFGetRequest',
                'Required parameter "creditBankIncomePDFGetRequest" was null or undefined when calling creditBankIncomePdfGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/bank_income/pdf/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditBankIncomePDFGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
     * Retrieve information from the bank accounts used for income verification in PDF format
     */
    async creditBankIncomePdfGet(requestParameters: CreditBankIncomePdfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.creditBankIncomePdfGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
     * Refresh a user\'s bank income information
     */
    async creditBankIncomeRefreshRaw(requestParameters: CreditBankIncomeRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditBankIncomeRefreshResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditBankIncomeRefreshRequest',
                'Required parameter "creditBankIncomeRefreshRequest" was null or undefined when calling creditBankIncomeRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/bank_income/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditBankIncomeRefreshRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditBankIncomeRefreshResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
     * Refresh a user\'s bank income information
     */
    async creditBankIncomeRefresh(requestParameters: CreditBankIncomeRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditBankIncomeRefreshResponse> {
        const response = await this.creditBankIncomeRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
     * Subscribe and unsubscribe to proactive notifications for a user\'s income profile
     */
    async creditBankIncomeWebhookUpdateRaw(requestParameters: CreditBankIncomeWebhookUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditBankIncomeWebhookUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditBankIncomeWebhookUpdateRequest',
                'Required parameter "creditBankIncomeWebhookUpdateRequest" was null or undefined when calling creditBankIncomeWebhookUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/bank_income/webhook/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditBankIncomeWebhookUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditBankIncomeWebhookUpdateResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
     * Subscribe and unsubscribe to proactive notifications for a user\'s income profile
     */
    async creditBankIncomeWebhookUpdate(requestParameters: CreditBankIncomeWebhookUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditBankIncomeWebhookUpdateResponse> {
        const response = await this.creditBankIncomeWebhookUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
     * Retrieve data for a user\'s uploaded bank statements
     */
    async creditBankStatementsUploadsGetRaw(requestParameters: CreditBankStatementsUploadsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditBankStatementsUploadsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditBankStatementsUploadsGetRequest',
                'Required parameter "creditBankStatementsUploadsGetRequest" was null or undefined when calling creditBankStatementsUploadsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/bank_statements/uploads/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditBankStatementsUploadsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditBankStatementsUploadsGetResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
     * Retrieve data for a user\'s uploaded bank statements
     */
    async creditBankStatementsUploadsGet(requestParameters: CreditBankStatementsUploadsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditBankStatementsUploadsGetResponse> {
        const response = await this.creditBankStatementsUploadsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
     * Retrieve a summary of an individual\'s employment information
     */
    async creditEmploymentGetRaw(requestParameters: CreditEmploymentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditEmploymentGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditEmploymentGetRequest',
                'Required parameter "creditEmploymentGetRequest" was null or undefined when calling creditEmploymentGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/employment/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditEmploymentGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditEmploymentGetResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
     * Retrieve a summary of an individual\'s employment information
     */
    async creditEmploymentGet(requestParameters: CreditEmploymentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditEmploymentGetResponse> {
        const response = await this.creditEmploymentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
     * Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
     */
    async creditFreddieMacReportsGetRaw(requestParameters: CreditFreddieMacReportsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditFreddieMacReportsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditFreddieMacReportsGetRequest',
                'Required parameter "creditFreddieMacReportsGetRequest" was null or undefined when calling creditFreddieMacReportsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/freddie_mac/reports/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditFreddieMacReportsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditFreddieMacReportsGetResponseFromJSON(jsonValue));
    }

    /**
     * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
     * Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
     */
    async creditFreddieMacReportsGet(requestParameters: CreditFreddieMacReportsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditFreddieMacReportsGetResponse> {
        const response = await this.creditFreddieMacReportsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     * Retrieve a user\'s payroll information
     */
    async creditPayrollIncomeGetRaw(requestParameters: CreditPayrollIncomeGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditPayrollIncomeGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditPayrollIncomeGetRequest',
                'Required parameter "creditPayrollIncomeGetRequest" was null or undefined when calling creditPayrollIncomeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/payroll_income/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditPayrollIncomeGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditPayrollIncomeGetResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     * Retrieve a user\'s payroll information
     */
    async creditPayrollIncomeGet(requestParameters: CreditPayrollIncomeGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditPayrollIncomeGetResponse> {
        const response = await this.creditPayrollIncomeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
     * Update the parsing configuration for a document income verification
     */
    async creditPayrollIncomeParsingConfigUpdateRaw(requestParameters: CreditPayrollIncomeParsingConfigUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditPayrollIncomeParsingConfigUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditPayrollIncomeParsingConfigUpdateRequest',
                'Required parameter "creditPayrollIncomeParsingConfigUpdateRequest" was null or undefined when calling creditPayrollIncomeParsingConfigUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/payroll_income/parsing_config/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditPayrollIncomeParsingConfigUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditPayrollIncomeParsingConfigUpdateResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
     * Update the parsing configuration for a document income verification
     */
    async creditPayrollIncomeParsingConfigUpdate(requestParameters: CreditPayrollIncomeParsingConfigUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditPayrollIncomeParsingConfigUpdateResponse> {
        const response = await this.creditPayrollIncomeParsingConfigUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
     * Check income verification eligibility and optimize conversion
     * @deprecated
     */
    async creditPayrollIncomePrecheckRaw(requestParameters: CreditPayrollIncomePrecheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditPayrollIncomePrecheckResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditPayrollIncomePrecheckRequest',
                'Required parameter "creditPayrollIncomePrecheckRequest" was null or undefined when calling creditPayrollIncomePrecheck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/payroll_income/precheck`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditPayrollIncomePrecheckRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditPayrollIncomePrecheckResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
     * Check income verification eligibility and optimize conversion
     * @deprecated
     */
    async creditPayrollIncomePrecheck(requestParameters: CreditPayrollIncomePrecheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditPayrollIncomePrecheckResponse> {
        const response = await this.creditPayrollIncomePrecheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
     * Refresh a digital payroll income verification
     */
    async creditPayrollIncomeRefreshRaw(requestParameters: CreditPayrollIncomeRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditPayrollIncomeRefreshResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditPayrollIncomeRefreshRequest',
                'Required parameter "creditPayrollIncomeRefreshRequest" was null or undefined when calling creditPayrollIncomeRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/payroll_income/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditPayrollIncomeRefreshRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditPayrollIncomeRefreshResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
     * Refresh a digital payroll income verification
     */
    async creditPayrollIncomeRefresh(requestParameters: CreditPayrollIncomeRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditPayrollIncomeRefreshResponse> {
        const response = await this.creditPayrollIncomeRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
     * Retrieve fraud insights for a user\'s manually uploaded document(s).
     */
    async creditPayrollIncomeRiskSignalsGetRaw(requestParameters: CreditPayrollIncomeRiskSignalsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditPayrollIncomeRiskSignalsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditPayrollIncomeRiskSignalsGetRequest',
                'Required parameter "creditPayrollIncomeRiskSignalsGetRequest" was null or undefined when calling creditPayrollIncomeRiskSignalsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/payroll_income/risk_signals/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditPayrollIncomeRiskSignalsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditPayrollIncomeRiskSignalsGetResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
     * Retrieve fraud insights for a user\'s manually uploaded document(s).
     */
    async creditPayrollIncomeRiskSignalsGet(requestParameters: CreditPayrollIncomeRiskSignalsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditPayrollIncomeRiskSignalsGetResponse> {
        const response = await this.creditPayrollIncomeRiskSignalsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
     * Create a relay token to share an Asset Report with a partner client (beta)
     */
    async creditRelayCreateRaw(requestParameters: CreditRelayCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditRelayCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditRelayCreateRequest',
                'Required parameter "creditRelayCreateRequest" was null or undefined when calling creditRelayCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/relay/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditRelayCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditRelayCreateResponseFromJSON(jsonValue));
    }

    /**
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
     * Create a relay token to share an Asset Report with a partner client (beta)
     */
    async creditRelayCreate(requestParameters: CreditRelayCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditRelayCreateResponse> {
        const response = await this.creditRelayCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
     * Retrieve the reports associated with a relay token that was shared with you (beta)
     */
    async creditRelayGetRaw(requestParameters: CreditRelayGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetReportGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditRelayGetRequest',
                'Required parameter "creditRelayGetRequest" was null or undefined when calling creditRelayGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/relay/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditRelayGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetReportGetResponseFromJSON(jsonValue));
    }

    /**
     * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
     * Retrieve the reports associated with a relay token that was shared with you (beta)
     */
    async creditRelayGet(requestParameters: CreditRelayGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetReportGetResponse> {
        const response = await this.creditRelayGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * Retrieve the pdf reports associated with a relay token that was shared with you (beta)
     */
    async creditRelayPdfGetRaw(requestParameters: CreditRelayPdfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditRelayPDFGetRequest',
                'Required parameter "creditRelayPDFGetRequest" was null or undefined when calling creditRelayPdfGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/relay/pdf/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditRelayPDFGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * Retrieve the pdf reports associated with a relay token that was shared with you (beta)
     */
    async creditRelayPdfGet(requestParameters: CreditRelayPdfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.creditRelayPdfGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
     * Refresh a report of a relay token (beta)
     */
    async creditRelayRefreshRaw(requestParameters: CreditRelayRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditRelayRefreshResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditRelayRefreshRequest',
                'Required parameter "creditRelayRefreshRequest" was null or undefined when calling creditRelayRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/relay/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditRelayRefreshRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditRelayRefreshResponseFromJSON(jsonValue));
    }

    /**
     * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
     * Refresh a report of a relay token (beta)
     */
    async creditRelayRefresh(requestParameters: CreditRelayRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditRelayRefreshResponse> {
        const response = await this.creditRelayRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
     * Remove relay token (beta)
     */
    async creditRelayRemoveRaw(requestParameters: CreditRelayRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditRelayRemoveResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditRelayRemoveRequest',
                'Required parameter "creditRelayRemoveRequest" was null or undefined when calling creditRelayRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/relay/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditRelayRemoveRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditRelayRemoveResponseFromJSON(jsonValue));
    }

    /**
     * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
     * Remove relay token (beta)
     */
    async creditRelayRemove(requestParameters: CreditRelayRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditRelayRemoveResponse> {
        const response = await this.creditRelayRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * Remove an Audit Copy token
     */
    async creditReportAuditCopyRemoveRaw(requestParameters: CreditReportAuditCopyRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditAuditCopyTokenRemoveResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditAuditCopyTokenRemoveRequest',
                'Required parameter "creditAuditCopyTokenRemoveRequest" was null or undefined when calling creditReportAuditCopyRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/audit_copy_token/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditAuditCopyTokenRemoveRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditAuditCopyTokenRemoveResponseFromJSON(jsonValue));
    }

    /**
     * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * Remove an Audit Copy token
     */
    async creditReportAuditCopyRemove(requestParameters: CreditReportAuditCopyRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditAuditCopyTokenRemoveResponse> {
        const response = await this.creditReportAuditCopyRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
     * Retrieve Link sessions for your user
     */
    async creditSessionsGetRaw(requestParameters: CreditSessionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditSessionsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'creditSessionsGetRequest',
                'Required parameter "creditSessionsGetRequest" was null or undefined when calling creditSessionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/credit/sessions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditSessionsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditSessionsGetResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
     * Retrieve Link sessions for your user
     */
    async creditSessionsGet(requestParameters: CreditSessionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditSessionsGetResponse> {
        const response = await this.creditSessionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information about a dashboard user.
     * Retrieve a dashboard user
     */
    async dashboardUserGetRaw(requestParameters: DashboardUserGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardUserGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'dashboardUserGetRequest',
                'Required parameter "dashboardUserGetRequest" was null or undefined when calling dashboardUserGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/dashboard_user/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DashboardUserGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardUserGetResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve information about a dashboard user.
     * Retrieve a dashboard user
     */
    async dashboardUserGet(requestParameters: DashboardUserGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardUserGetResponse> {
        const response = await this.dashboardUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all dashboard users associated with your account.
     * List dashboard users
     */
    async dashboardUserListRaw(requestParameters: DashboardUserListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardUserListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'dashboardUserListRequest',
                'Required parameter "dashboardUserListRequest" was null or undefined when calling dashboardUserList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/dashboard_user/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DashboardUserListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardUserListResponseFromJSON(jsonValue));
    }

    /**
     * List all dashboard users associated with your account.
     * List dashboard users
     */
    async dashboardUserList(requestParameters: DashboardUserListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardUserListResponse> {
        const response = await this.dashboardUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * Create a deposit switch without using Plaid Exchange
     */
    async depositSwitchAltCreateRaw(requestParameters: DepositSwitchAltCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositSwitchAltCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'depositSwitchAltCreateRequest',
                'Required parameter "depositSwitchAltCreateRequest" was null or undefined when calling depositSwitchAltCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/deposit_switch/alt/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepositSwitchAltCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositSwitchAltCreateResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * Create a deposit switch without using Plaid Exchange
     */
    async depositSwitchAltCreate(requestParameters: DepositSwitchAltCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositSwitchAltCreateResponse> {
        const response = await this.depositSwitchAltCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * Create a deposit switch
     */
    async depositSwitchCreateRaw(requestParameters: DepositSwitchCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositSwitchCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'depositSwitchCreateRequest',
                'Required parameter "depositSwitchCreateRequest" was null or undefined when calling depositSwitchCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/deposit_switch/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepositSwitchCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositSwitchCreateResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * Create a deposit switch
     */
    async depositSwitchCreate(requestParameters: DepositSwitchCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositSwitchCreateResponse> {
        const response = await this.depositSwitchCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
     * Retrieve a deposit switch
     */
    async depositSwitchGetRaw(requestParameters: DepositSwitchGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositSwitchGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'depositSwitchGetRequest',
                'Required parameter "depositSwitchGetRequest" was null or undefined when calling depositSwitchGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/deposit_switch/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepositSwitchGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositSwitchGetResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
     * Retrieve a deposit switch
     */
    async depositSwitchGet(requestParameters: DepositSwitchGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositSwitchGetResponse> {
        const response = await this.depositSwitchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * Create a deposit switch token
     */
    async depositSwitchTokenCreateRaw(requestParameters: DepositSwitchTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositSwitchTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'depositSwitchTokenCreateRequest',
                'Required parameter "depositSwitchTokenCreateRequest" was null or undefined when calling depositSwitchTokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/deposit_switch/token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepositSwitchTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositSwitchTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * Create a deposit switch token
     */
    async depositSwitchTokenCreate(requestParameters: DepositSwitchTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositSwitchTokenCreateResponse> {
        const response = await this.depositSwitchTokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * Search employer database
     */
    async employersSearchRaw(requestParameters: EmployersSearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployersSearchResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'employersSearchRequest',
                'Required parameter "employersSearchRequest" was null or undefined when calling employersSearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/employers/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmployersSearchRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployersSearchResponseFromJSON(jsonValue));
    }

    /**
     * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * Search employer database
     */
    async employersSearch(requestParameters: EmployersSearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployersSearchResponse> {
        const response = await this.employersSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
     * (Deprecated) Retrieve a summary of an individual\'s employment information
     * @deprecated
     */
    async employmentVerificationGetRaw(requestParameters: EmploymentVerificationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmploymentVerificationGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'employmentVerificationGetRequest',
                'Required parameter "employmentVerificationGetRequest" was null or undefined when calling employmentVerificationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/employment/verification/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmploymentVerificationGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentVerificationGetResponseFromJSON(jsonValue));
    }

    /**
     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
     * (Deprecated) Retrieve a summary of an individual\'s employment information
     * @deprecated
     */
    async employmentVerificationGet(requestParameters: EmploymentVerificationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmploymentVerificationGetResponse> {
        const response = await this.employmentVerificationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A generic webhook receiver endpoint for FDX Event Notifications
     * Webhook receiver for fdx notifications
     */
    async fdxNotificationsRaw(requestParameters: FdxNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'fDXNotification',
                'Required parameter "fDXNotification" was null or undefined when calling fdxNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/fdx/notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FDXNotificationToJSON(requestParameters),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A generic webhook receiver endpoint for FDX Event Notifications
     * Webhook receiver for fdx notifications
     */
    async fdxNotifications(requestParameters: FdxNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fdxNotificationsRaw(requestParameters, initOverrides);
    }

    /**
     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * Retrieve identity data
     */
    async identityGetRaw(requestParameters: IdentityGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'identityGetRequest',
                'Required parameter "identityGetRequest" was null or undefined when calling identityGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/identity/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * Retrieve identity data
     */
    async identityGet(requestParameters: IdentityGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityGetResponse> {
        const response = await this.identityGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * Retrieve identity match score
     */
    async identityMatchRaw(requestParameters: IdentityMatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityMatchResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'identityMatchRequest',
                'Required parameter "identityMatchRequest" was null or undefined when calling identityMatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/identity/match`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityMatchRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityMatchResponseFromJSON(jsonValue));
    }

    /**
     * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * Retrieve identity match score
     */
    async identityMatch(requestParameters: IdentityMatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityMatchResponse> {
        const response = await this.identityMatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * Refresh identity data
     */
    async identityRefreshRaw(requestParameters: IdentityRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityRefreshResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'identityRefreshRequest',
                'Required parameter "identityRefreshRequest" was null or undefined when calling identityRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/identity/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityRefreshRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityRefreshResponseFromJSON(jsonValue));
    }

    /**
     * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * Refresh identity data
     */
    async identityRefresh(requestParameters: IdentityRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityRefreshResponse> {
        const response = await this.identityRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
     * Create autofill for an Identity Verification
     */
    async identityVerificationAutofillCreateRaw(requestParameters: IdentityVerificationAutofillCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityVerificationAutofillCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'identityVerificationAutofillCreateRequest',
                'Required parameter "identityVerificationAutofillCreateRequest" was null or undefined when calling identityVerificationAutofillCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/identity_verification/autofill/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityVerificationAutofillCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityVerificationAutofillCreateResponseFromJSON(jsonValue));
    }

    /**
     * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
     * Create autofill for an Identity Verification
     */
    async identityVerificationAutofillCreate(requestParameters: IdentityVerificationAutofillCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityVerificationAutofillCreateResponse> {
        const response = await this.identityVerificationAutofillCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow. 
     * Create a new Identity Verification
     */
    async identityVerificationCreateRaw(requestParameters: IdentityVerificationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityVerificationCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'identityVerificationCreateRequest',
                'Required parameter "identityVerificationCreateRequest" was null or undefined when calling identityVerificationCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/identity_verification/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityVerificationCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityVerificationCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow. 
     * Create a new Identity Verification
     */
    async identityVerificationCreate(requestParameters: IdentityVerificationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityVerificationCreateResponse> {
        const response = await this.identityVerificationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a previously created Identity Verification.
     * Retrieve Identity Verification
     */
    async identityVerificationGetRaw(requestParameters: IdentityVerificationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityVerificationGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'identityVerificationGetRequest',
                'Required parameter "identityVerificationGetRequest" was null or undefined when calling identityVerificationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/identity_verification/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityVerificationGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityVerificationGetResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a previously created Identity Verification.
     * Retrieve Identity Verification
     */
    async identityVerificationGet(requestParameters: IdentityVerificationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityVerificationGetResponse> {
        const response = await this.identityVerificationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Filter and list Identity Verifications created by your account
     * List Identity Verifications
     */
    async identityVerificationListRaw(requestParameters: IdentityVerificationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityVerificationListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'identityVerificationListRequest',
                'Required parameter "identityVerificationListRequest" was null or undefined when calling identityVerificationList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/identity_verification/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityVerificationListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityVerificationListResponseFromJSON(jsonValue));
    }

    /**
     * Filter and list Identity Verifications created by your account
     * List Identity Verifications
     */
    async identityVerificationList(requestParameters: IdentityVerificationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityVerificationListResponse> {
        const response = await this.identityVerificationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allow a customer to retry their Identity Verification
     * Retry an Identity Verification
     */
    async identityVerificationRetryRaw(requestParameters: IdentityVerificationRetryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityVerificationRetryResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'identityVerificationRetryRequest',
                'Required parameter "identityVerificationRetryRequest" was null or undefined when calling identityVerificationRetry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/identity_verification/retry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityVerificationRetryRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityVerificationRetryResponseFromJSON(jsonValue));
    }

    /**
     * Allow a customer to retry their Identity Verification
     * Retry an Identity Verification
     */
    async identityVerificationRetry(requestParameters: IdentityVerificationRetryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityVerificationRetryResponse> {
        const response = await this.identityVerificationRetryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * (Deprecated) Create an income verification instance
     * @deprecated
     */
    async incomeVerificationCreateRaw(requestParameters: IncomeVerificationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeVerificationCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'incomeVerificationCreateRequest',
                'Required parameter "incomeVerificationCreateRequest" was null or undefined when calling incomeVerificationCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/income/verification/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeVerificationCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeVerificationCreateResponseFromJSON(jsonValue));
    }

    /**
     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * (Deprecated) Create an income verification instance
     * @deprecated
     */
    async incomeVerificationCreate(requestParameters: IncomeVerificationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeVerificationCreateResponse> {
        const response = await this.incomeVerificationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
     * (Deprecated) Download the original documents used for income verification
     * @deprecated
     */
    async incomeVerificationDocumentsDownloadRaw(requestParameters: IncomeVerificationDocumentsDownloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'incomeVerificationDocumentsDownloadRequest',
                'Required parameter "incomeVerificationDocumentsDownloadRequest" was null or undefined when calling incomeVerificationDocumentsDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/income/verification/documents/download`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeVerificationDocumentsDownloadRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
     * (Deprecated) Download the original documents used for income verification
     * @deprecated
     */
    async incomeVerificationDocumentsDownload(requestParameters: IncomeVerificationDocumentsDownloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.incomeVerificationDocumentsDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * (Deprecated) Retrieve information from the paystubs used for income verification
     * @deprecated
     */
    async incomeVerificationPaystubsGetRaw(requestParameters: IncomeVerificationPaystubsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeVerificationPaystubsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'incomeVerificationPaystubsGetRequest',
                'Required parameter "incomeVerificationPaystubsGetRequest" was null or undefined when calling incomeVerificationPaystubsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/income/verification/paystubs/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeVerificationPaystubsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeVerificationPaystubsGetResponseFromJSON(jsonValue));
    }

    /**
     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * (Deprecated) Retrieve information from the paystubs used for income verification
     * @deprecated
     */
    async incomeVerificationPaystubsGet(requestParameters: IncomeVerificationPaystubsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeVerificationPaystubsGetResponse> {
        const response = await this.incomeVerificationPaystubsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
     * (Deprecated) Check digital income verification eligibility and optimize conversion
     * @deprecated
     */
    async incomeVerificationPrecheckRaw(requestParameters: IncomeVerificationPrecheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeVerificationPrecheckResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'incomeVerificationPrecheckRequest',
                'Required parameter "incomeVerificationPrecheckRequest" was null or undefined when calling incomeVerificationPrecheck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/income/verification/precheck`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeVerificationPrecheckRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeVerificationPrecheckResponseFromJSON(jsonValue));
    }

    /**
     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
     * (Deprecated) Check digital income verification eligibility and optimize conversion
     * @deprecated
     */
    async incomeVerificationPrecheck(requestParameters: IncomeVerificationPrecheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeVerificationPrecheckResponse> {
        const response = await this.incomeVerificationPrecheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * (Deprecated) Retrieve information from the tax documents used for income verification
     * @deprecated
     */
    async incomeVerificationTaxformsGetRaw(requestParameters: IncomeVerificationTaxformsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeVerificationTaxformsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'incomeVerificationTaxformsGetRequest',
                'Required parameter "incomeVerificationTaxformsGetRequest" was null or undefined when calling incomeVerificationTaxformsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/income/verification/taxforms/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeVerificationTaxformsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeVerificationTaxformsGetResponseFromJSON(jsonValue));
    }

    /**
     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * (Deprecated) Retrieve information from the tax documents used for income verification
     * @deprecated
     */
    async incomeVerificationTaxformsGet(requestParameters: IncomeVerificationTaxformsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeVerificationTaxformsGetResponse> {
        const response = await this.incomeVerificationTaxformsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * Get details of all supported institutions
     */
    async institutionsGetRaw(requestParameters: InstitutionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstitutionsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'institutionsGetRequest',
                'Required parameter "institutionsGetRequest" was null or undefined when calling institutionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/institutions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstitutionsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionsGetResponseFromJSON(jsonValue));
    }

    /**
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * Get details of all supported institutions
     */
    async institutionsGet(requestParameters: InstitutionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstitutionsGetResponse> {
        const response = await this.institutionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * Get details of an institution
     */
    async institutionsGetByIdRaw(requestParameters: InstitutionsGetByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstitutionsGetByIdResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'institutionsGetByIdRequest',
                'Required parameter "institutionsGetByIdRequest" was null or undefined when calling institutionsGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/institutions/get_by_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstitutionsGetByIdRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionsGetByIdResponseFromJSON(jsonValue));
    }

    /**
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * Get details of an institution
     */
    async institutionsGetById(requestParameters: InstitutionsGetByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstitutionsGetByIdResponse> {
        const response = await this.institutionsGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * Search institutions
     */
    async institutionsSearchRaw(requestParameters: InstitutionsSearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstitutionsSearchResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'institutionsSearchRequest',
                'Required parameter "institutionsSearchRequest" was null or undefined when calling institutionsSearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/institutions/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstitutionsSearchRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionsSearchResponseFromJSON(jsonValue));
    }

    /**
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * Search institutions
     */
    async institutionsSearch(requestParameters: InstitutionsSearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstitutionsSearchResponse> {
        const response = await this.institutionsSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
     * Get data needed to authorize an investments transfer
     */
    async investmentsAuthGetRaw(requestParameters: InvestmentsAuthGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvestmentsAuthGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'investmentsAuthGetRequest',
                'Required parameter "investmentsAuthGetRequest" was null or undefined when calling investmentsAuthGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/investments/auth/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvestmentsAuthGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvestmentsAuthGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
     * Get data needed to authorize an investments transfer
     */
    async investmentsAuthGet(requestParameters: InvestmentsAuthGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvestmentsAuthGetResponse> {
        const response = await this.investmentsAuthGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
     * Get Investment holdings
     */
    async investmentsHoldingsGetRaw(requestParameters: InvestmentsHoldingsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvestmentsHoldingsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'investmentsHoldingsGetRequest',
                'Required parameter "investmentsHoldingsGetRequest" was null or undefined when calling investmentsHoldingsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/investments/holdings/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvestmentsHoldingsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvestmentsHoldingsGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
     * Get Investment holdings
     */
    async investmentsHoldingsGet(requestParameters: InvestmentsHoldingsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvestmentsHoldingsGetResponse> {
        const response = await this.investmentsHoldingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. \"Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * Refresh investment data
     */
    async investmentsRefreshRaw(requestParameters: InvestmentsRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvestmentsRefreshResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'investmentsRefreshRequest',
                'Required parameter "investmentsRefreshRequest" was null or undefined when calling investmentsRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/investments/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvestmentsRefreshRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvestmentsRefreshResponseFromJSON(jsonValue));
    }

    /**
     * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. \"Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * Refresh investment data
     */
    async investmentsRefresh(requestParameters: InvestmentsRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvestmentsRefreshResponse> {
        const response = await this.investmentsRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     * Get investment transactions
     */
    async investmentsTransactionsGetRaw(requestParameters: InvestmentsTransactionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvestmentsTransactionsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'investmentsTransactionsGetRequest',
                'Required parameter "investmentsTransactionsGetRequest" was null or undefined when calling investmentsTransactionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/investments/transactions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvestmentsTransactionsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvestmentsTransactionsGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     * Get investment transactions
     */
    async investmentsTransactionsGet(requestParameters: InvestmentsTransactionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvestmentsTransactionsGetResponse> {
        const response = await this.investmentsTransactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
     * Invalidate access_token
     */
    async itemAccessTokenInvalidateRaw(requestParameters: ItemAccessTokenInvalidateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemAccessTokenInvalidateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemAccessTokenInvalidateRequest',
                'Required parameter "itemAccessTokenInvalidateRequest" was null or undefined when calling itemAccessTokenInvalidate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/access_token/invalidate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemAccessTokenInvalidateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemAccessTokenInvalidateResponseFromJSON(jsonValue));
    }

    /**
     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
     * Invalidate access_token
     */
    async itemAccessTokenInvalidate(requestParameters: ItemAccessTokenInvalidateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemAccessTokenInvalidateResponse> {
        const response = await this.itemAccessTokenInvalidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List a historical log of user consent events
     * List a historical log of user consent events
     */
    async itemActivityListRaw(requestParameters: ItemActivityListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemActivityListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemActivityListRequest',
                'Required parameter "itemActivityListRequest" was null or undefined when calling itemActivityList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/activity/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemActivityListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemActivityListResponseFromJSON(jsonValue));
    }

    /**
     * List a historical log of user consent events
     * List a historical log of user consent events
     */
    async itemActivityList(requestParameters: ItemActivityListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemActivityListResponse> {
        const response = await this.itemActivityListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List a user’s connected applications
     * List a user’s connected applications
     */
    async itemApplicationListRaw(requestParameters: ItemApplicationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemApplicationListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemApplicationListRequest',
                'Required parameter "itemApplicationListRequest" was null or undefined when calling itemApplicationList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/application/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemApplicationListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemApplicationListResponseFromJSON(jsonValue));
    }

    /**
     * List a user’s connected applications
     * List a user’s connected applications
     */
    async itemApplicationList(requestParameters: ItemApplicationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemApplicationListResponse> {
        const response = await this.itemApplicationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable consumers to update product access on selected accounts for an application.
     * Update the scopes of access for a particular application
     */
    async itemApplicationScopesUpdateRaw(requestParameters: ItemApplicationScopesUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemApplicationScopesUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemApplicationScopesUpdateRequest',
                'Required parameter "itemApplicationScopesUpdateRequest" was null or undefined when calling itemApplicationScopesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/application/scopes/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemApplicationScopesUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemApplicationScopesUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Enable consumers to update product access on selected accounts for an application.
     * Update the scopes of access for a particular application
     */
    async itemApplicationScopesUpdate(requestParameters: ItemApplicationScopesUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemApplicationScopesUpdateResponse> {
        const response = await this.itemApplicationScopesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
     * Unlink a user’s connected application
     */
    async itemApplicationUnlinkRaw(requestParameters: ItemApplicationUnlinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemApplicationUnlinkResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemApplicationUnlinkRequest',
                'Required parameter "itemApplicationUnlinkRequest" was null or undefined when calling itemApplicationUnlink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/application/unlink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemApplicationUnlinkRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemApplicationUnlinkResponseFromJSON(jsonValue));
    }

    /**
     * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
     * Unlink a user’s connected application
     */
    async itemApplicationUnlink(requestParameters: ItemApplicationUnlinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemApplicationUnlinkResponse> {
        const response = await this.itemApplicationUnlinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * Create public token
     */
    async itemCreatePublicTokenRaw(requestParameters: ItemCreatePublicTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemPublicTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemPublicTokenCreateRequest',
                'Required parameter "itemPublicTokenCreateRequest" was null or undefined when calling itemCreatePublicToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/public_token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemPublicTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemPublicTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * Create public token
     */
    async itemCreatePublicToken(requestParameters: ItemCreatePublicTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemPublicTokenCreateResponse> {
        const response = await this.itemCreatePublicTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns information about the status of an Item.
     * Retrieve an Item
     */
    async itemGetRaw(requestParameters: ItemGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemGetRequest',
                'Required parameter "itemGetRequest" was null or undefined when calling itemGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemGetResponseFromJSON(jsonValue));
    }

    /**
     * Returns information about the status of an Item.
     * Retrieve an Item
     */
    async itemGet(requestParameters: ItemGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemGetResponse> {
        const response = await this.itemGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
     * Import Item
     */
    async itemImportRaw(requestParameters: ItemImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemImportResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemImportRequest',
                'Required parameter "itemImportRequest" was null or undefined when calling itemImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemImportRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemImportResponseFromJSON(jsonValue));
    }

    /**
     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
     * Import Item
     */
    async itemImport(requestParameters: ItemImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemImportResponse> {
        const response = await this.itemImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     * Exchange public token for an access token
     */
    async itemPublicTokenExchangeRaw(requestParameters: ItemPublicTokenExchangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemPublicTokenExchangeResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemPublicTokenExchangeRequest',
                'Required parameter "itemPublicTokenExchangeRequest" was null or undefined when calling itemPublicTokenExchange().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/public_token/exchange`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemPublicTokenExchangeRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemPublicTokenExchangeResponseFromJSON(jsonValue));
    }

    /**
     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     * Exchange public token for an access token
     */
    async itemPublicTokenExchange(requestParameters: ItemPublicTokenExchangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemPublicTokenExchangeResponse> {
        const response = await this.itemPublicTokenExchangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     * Remove an Item
     */
    async itemRemoveRaw(requestParameters: ItemRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemRemoveResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemRemoveRequest',
                'Required parameter "itemRemoveRequest" was null or undefined when calling itemRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemRemoveRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemRemoveResponseFromJSON(jsonValue));
    }

    /**
     * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     * Remove an Item
     */
    async itemRemove(requestParameters: ItemRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemRemoveResponse> {
        const response = await this.itemRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     * Update Webhook URL
     */
    async itemWebhookUpdateRaw(requestParameters: ItemWebhookUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemWebhookUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'itemWebhookUpdateRequest',
                'Required parameter "itemWebhookUpdateRequest" was null or undefined when calling itemWebhookUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/item/webhook/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemWebhookUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemWebhookUpdateResponseFromJSON(jsonValue));
    }

    /**
     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     * Update Webhook URL
     */
    async itemWebhookUpdate(requestParameters: ItemWebhookUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemWebhookUpdateResponse> {
        const response = await this.itemWebhookUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * Retrieve Liabilities data
     */
    async liabilitiesGetRaw(requestParameters: LiabilitiesGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiabilitiesGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'liabilitiesGetRequest',
                'Required parameter "liabilitiesGetRequest" was null or undefined when calling liabilitiesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/liabilities/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LiabilitiesGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiabilitiesGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * Retrieve Liabilities data
     */
    async liabilitiesGet(requestParameters: LiabilitiesGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiabilitiesGetResponse> {
        const response = await this.liabilitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
     * Create Hosted Link session
     */
    async linkDeliveryCreateRaw(requestParameters: LinkDeliveryCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkDeliveryCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'linkDeliveryCreateRequest',
                'Required parameter "linkDeliveryCreateRequest" was null or undefined when calling linkDeliveryCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/link_delivery/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkDeliveryCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkDeliveryCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
     * Create Hosted Link session
     */
    async linkDeliveryCreate(requestParameters: LinkDeliveryCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkDeliveryCreateResponse> {
        const response = await this.linkDeliveryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
     * Get Hosted Link session
     */
    async linkDeliveryGetRaw(requestParameters: LinkDeliveryGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkDeliveryGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'linkDeliveryGetRequest',
                'Required parameter "linkDeliveryGetRequest" was null or undefined when calling linkDeliveryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/link_delivery/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkDeliveryGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkDeliveryGetResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
     * Get Hosted Link session
     */
    async linkDeliveryGet(requestParameters: LinkDeliveryGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkDeliveryGetResponse> {
        const response = await this.linkDeliveryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
     * Exchange the Link Correlation Id for a Link Token
     */
    async linkOauthCorrelationIdExchangeRaw(requestParameters: LinkOauthCorrelationIdExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkOAuthCorrelationIdExchangeResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'linkOAuthCorrelationIdExchangeRequest',
                'Required parameter "linkOAuthCorrelationIdExchangeRequest" was null or undefined when calling linkOauthCorrelationIdExchange().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/link/oauth/correlation_id/exchange`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkOAuthCorrelationIdExchangeRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkOAuthCorrelationIdExchangeResponseFromJSON(jsonValue));
    }

    /**
     * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
     * Exchange the Link Correlation Id for a Link Token
     */
    async linkOauthCorrelationIdExchange(requestParameters: LinkOauthCorrelationIdExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkOAuthCorrelationIdExchangeResponse> {
        const response = await this.linkOauthCorrelationIdExchangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * Create Link Token
     */
    async linkTokenCreateRaw(requestParameters: LinkTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'linkTokenCreateRequest',
                'Required parameter "linkTokenCreateRequest" was null or undefined when calling linkTokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/link/token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * Create Link Token
     */
    async linkTokenCreate(requestParameters: LinkTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkTokenCreateResponse> {
        const response = await this.linkTokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
     * Get Link Token
     */
    async linkTokenGetRaw(requestParameters: LinkTokenGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkTokenGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'linkTokenGetRequest',
                'Required parameter "linkTokenGetRequest" was null or undefined when calling linkTokenGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/link/token/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkTokenGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkTokenGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
     * Get Link Token
     */
    async linkTokenGet(requestParameters: LinkTokenGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkTokenGetResponse> {
        const response = await this.linkTokenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
     * Creates a new end customer for a Plaid reseller.
     */
    async partnerCustomerCreateRaw(requestParameters: PartnerCustomerCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartnerCustomerCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'partnerCustomerCreateRequest',
                'Required parameter "partnerCustomerCreateRequest" was null or undefined when calling partnerCustomerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/partner/customer/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerCustomerCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerCustomerCreateResponseFromJSON(jsonValue));
    }

    /**
     * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
     * Creates a new end customer for a Plaid reseller.
     */
    async partnerCustomerCreate(requestParameters: PartnerCustomerCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartnerCustomerCreateResponse> {
        const response = await this.partnerCustomerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
     * Enables a Plaid reseller\'s end customer in the Production environment.
     */
    async partnerCustomerEnableRaw(requestParameters: PartnerCustomerEnableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartnerCustomerEnableResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'partnerCustomerEnableRequest',
                'Required parameter "partnerCustomerEnableRequest" was null or undefined when calling partnerCustomerEnable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/partner/customer/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerCustomerEnableRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerCustomerEnableResponseFromJSON(jsonValue));
    }

    /**
     * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
     * Enables a Plaid reseller\'s end customer in the Production environment.
     */
    async partnerCustomerEnable(requestParameters: PartnerCustomerEnableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartnerCustomerEnableResponse> {
        const response = await this.partnerCustomerEnableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
     * Returns a Plaid reseller\'s end customer.
     */
    async partnerCustomerGetRaw(requestParameters: PartnerCustomerGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartnerCustomerGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'partnerCustomerGetRequest',
                'Required parameter "partnerCustomerGetRequest" was null or undefined when calling partnerCustomerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/partner/customer/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerCustomerGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerCustomerGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
     * Returns a Plaid reseller\'s end customer.
     */
    async partnerCustomerGet(requestParameters: PartnerCustomerGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartnerCustomerGetResponse> {
        const response = await this.partnerCustomerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
     * Returns OAuth-institution registration information for a given end customer.
     */
    async partnerCustomerOauthInstitutionsGetRaw(requestParameters: PartnerCustomerOauthInstitutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartnerCustomerOAuthInstitutionsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'partnerCustomerOAuthInstitutionsGetRequest',
                'Required parameter "partnerCustomerOAuthInstitutionsGetRequest" was null or undefined when calling partnerCustomerOauthInstitutionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/partner/customer/oauth_institutions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerCustomerOAuthInstitutionsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerCustomerOAuthInstitutionsGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
     * Returns OAuth-institution registration information for a given end customer.
     */
    async partnerCustomerOauthInstitutionsGet(requestParameters: PartnerCustomerOauthInstitutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartnerCustomerOAuthInstitutionsGetResponse> {
        const response = await this.partnerCustomerOauthInstitutionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
     * Removes a Plaid reseller\'s end customer.
     */
    async partnerCustomerRemoveRaw(requestParameters: PartnerCustomerRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartnerCustomerRemoveResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'partnerCustomerRemoveRequest',
                'Required parameter "partnerCustomerRemoveRequest" was null or undefined when calling partnerCustomerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/partner/customer/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerCustomerRemoveRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerCustomerRemoveResponseFromJSON(jsonValue));
    }

    /**
     * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
     * Removes a Plaid reseller\'s end customer.
     */
    async partnerCustomerRemove(requestParameters: PartnerCustomerRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartnerCustomerRemoveResponse> {
        const response = await this.partnerCustomerRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     * Create payment consent
     */
    async paymentInitiationConsentCreateRaw(requestParameters: PaymentInitiationConsentCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationConsentCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationConsentCreateRequest',
                'Required parameter "paymentInitiationConsentCreateRequest" was null or undefined when calling paymentInitiationConsentCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/consent/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationConsentCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationConsentCreateResponseFromJSON(jsonValue));
    }

    /**
     * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     * Create payment consent
     */
    async paymentInitiationConsentCreate(requestParameters: PaymentInitiationConsentCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationConsentCreateResponse> {
        const response = await this.paymentInitiationConsentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     * Get payment consent
     */
    async paymentInitiationConsentGetRaw(requestParameters: PaymentInitiationConsentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationConsentGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationConsentGetRequest',
                'Required parameter "paymentInitiationConsentGetRequest" was null or undefined when calling paymentInitiationConsentGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/consent/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationConsentGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationConsentGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     * Get payment consent
     */
    async paymentInitiationConsentGet(requestParameters: PaymentInitiationConsentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationConsentGetResponse> {
        const response = await this.paymentInitiationConsentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
     * Execute a single payment using consent
     */
    async paymentInitiationConsentPaymentExecuteRaw(requestParameters: PaymentInitiationConsentPaymentExecuteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationConsentPaymentExecuteResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationConsentPaymentExecuteRequest',
                'Required parameter "paymentInitiationConsentPaymentExecuteRequest" was null or undefined when calling paymentInitiationConsentPaymentExecute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/consent/payment/execute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationConsentPaymentExecuteRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationConsentPaymentExecuteResponseFromJSON(jsonValue));
    }

    /**
     * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
     * Execute a single payment using consent
     */
    async paymentInitiationConsentPaymentExecute(requestParameters: PaymentInitiationConsentPaymentExecuteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationConsentPaymentExecuteResponse> {
        const response = await this.paymentInitiationConsentPaymentExecuteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     * Revoke payment consent
     */
    async paymentInitiationConsentRevokeRaw(requestParameters: PaymentInitiationConsentRevokeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationConsentRevokeResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationConsentRevokeRequest',
                'Required parameter "paymentInitiationConsentRevokeRequest" was null or undefined when calling paymentInitiationConsentRevoke().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/consent/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationConsentRevokeRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationConsentRevokeResponseFromJSON(jsonValue));
    }

    /**
     * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     * Revoke payment consent
     */
    async paymentInitiationConsentRevoke(requestParameters: PaymentInitiationConsentRevokeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationConsentRevokeResponse> {
        const response = await this.paymentInitiationConsentRevokeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
     * Create a payment
     */
    async paymentInitiationPaymentCreateRaw(requestParameters: PaymentInitiationPaymentCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationPaymentCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationPaymentCreateRequest',
                'Required parameter "paymentInitiationPaymentCreateRequest" was null or undefined when calling paymentInitiationPaymentCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/payment/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationPaymentCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationPaymentCreateResponseFromJSON(jsonValue));
    }

    /**
     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
     * Create a payment
     */
    async paymentInitiationPaymentCreate(requestParameters: PaymentInitiationPaymentCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationPaymentCreateResponse> {
        const response = await this.paymentInitiationPaymentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * Get payment details
     */
    async paymentInitiationPaymentGetRaw(requestParameters: PaymentInitiationPaymentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationPaymentGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationPaymentGetRequest',
                'Required parameter "paymentInitiationPaymentGetRequest" was null or undefined when calling paymentInitiationPaymentGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/payment/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationPaymentGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationPaymentGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * Get payment details
     */
    async paymentInitiationPaymentGet(requestParameters: PaymentInitiationPaymentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationPaymentGetResponse> {
        const response = await this.paymentInitiationPaymentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
     * List payments
     */
    async paymentInitiationPaymentListRaw(requestParameters: PaymentInitiationPaymentListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationPaymentListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationPaymentListRequest',
                'Required parameter "paymentInitiationPaymentListRequest" was null or undefined when calling paymentInitiationPaymentList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/payment/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationPaymentListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationPaymentListResponseFromJSON(jsonValue));
    }

    /**
     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
     * List payments
     */
    async paymentInitiationPaymentList(requestParameters: PaymentInitiationPaymentListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationPaymentListResponse> {
        const response = await this.paymentInitiationPaymentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
     * Reverse an existing payment
     */
    async paymentInitiationPaymentReverseRaw(requestParameters: PaymentInitiationPaymentReverseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationPaymentReverseResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationPaymentReverseRequest',
                'Required parameter "paymentInitiationPaymentReverseRequest" was null or undefined when calling paymentInitiationPaymentReverse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/payment/reverse`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationPaymentReverseRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationPaymentReverseResponseFromJSON(jsonValue));
    }

    /**
     * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
     * Reverse an existing payment
     */
    async paymentInitiationPaymentReverse(requestParameters: PaymentInitiationPaymentReverseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationPaymentReverseResponse> {
        const response = await this.paymentInitiationPaymentReverseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. 
     * Create payment recipient
     */
    async paymentInitiationRecipientCreateRaw(requestParameters: PaymentInitiationRecipientCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationRecipientCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationRecipientCreateRequest',
                'Required parameter "paymentInitiationRecipientCreateRequest" was null or undefined when calling paymentInitiationRecipientCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/recipient/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationRecipientCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationRecipientCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. 
     * Create payment recipient
     */
    async paymentInitiationRecipientCreate(requestParameters: PaymentInitiationRecipientCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationRecipientCreateResponse> {
        const response = await this.paymentInitiationRecipientCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details about a payment recipient you have previously created.
     * Get payment recipient
     */
    async paymentInitiationRecipientGetRaw(requestParameters: PaymentInitiationRecipientGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationRecipientGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationRecipientGetRequest',
                'Required parameter "paymentInitiationRecipientGetRequest" was null or undefined when calling paymentInitiationRecipientGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/recipient/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationRecipientGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationRecipientGetResponseFromJSON(jsonValue));
    }

    /**
     * Get details about a payment recipient you have previously created.
     * Get payment recipient
     */
    async paymentInitiationRecipientGet(requestParameters: PaymentInitiationRecipientGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationRecipientGetResponse> {
        const response = await this.paymentInitiationRecipientGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
     * List payment recipients
     */
    async paymentInitiationRecipientListRaw(requestParameters: PaymentInitiationRecipientListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentInitiationRecipientListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentInitiationRecipientListRequest',
                'Required parameter "paymentInitiationRecipientListRequest" was null or undefined when calling paymentInitiationRecipientList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_initiation/recipient/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInitiationRecipientListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentInitiationRecipientListResponseFromJSON(jsonValue));
    }

    /**
     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
     * List payment recipients
     */
    async paymentInitiationRecipientList(requestParameters: PaymentInitiationRecipientListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentInitiationRecipientListResponse> {
        const response = await this.paymentInitiationRecipientListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
     * Create payment profile
     * @deprecated
     */
    async paymentProfileCreateRaw(requestParameters: PaymentProfileCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentProfileCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentProfileCreateRequest',
                'Required parameter "paymentProfileCreateRequest" was null or undefined when calling paymentProfileCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_profile/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentProfileCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentProfileCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
     * Create payment profile
     * @deprecated
     */
    async paymentProfileCreate(requestParameters: PaymentProfileCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentProfileCreateResponse> {
        const response = await this.paymentProfileCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
     * Get payment profile
     * @deprecated
     */
    async paymentProfileGetRaw(requestParameters: PaymentProfileGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentProfileGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentProfileGetRequest',
                'Required parameter "paymentProfileGetRequest" was null or undefined when calling paymentProfileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_profile/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentProfileGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentProfileGetResponseFromJSON(jsonValue));
    }

    /**
     * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
     * Get payment profile
     * @deprecated
     */
    async paymentProfileGet(requestParameters: PaymentProfileGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentProfileGetResponse> {
        const response = await this.paymentProfileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     * Remove payment profile
     * @deprecated
     */
    async paymentProfileRemoveRaw(requestParameters: PaymentProfileRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentProfileRemoveResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'paymentProfileRemoveRequest',
                'Required parameter "paymentProfileRemoveRequest" was null or undefined when calling paymentProfileRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/payment_profile/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentProfileRemoveRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentProfileRemoveResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     * Remove payment profile
     * @deprecated
     */
    async paymentProfileRemove(requestParameters: PaymentProfileRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentProfileRemoveResponse> {
        const response = await this.paymentProfileRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable. 
     * Retrieve the account associated with a processor token
     */
    async processorAccountGetRaw(requestParameters: ProcessorAccountGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorAccountGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorAccountGetRequest',
                'Required parameter "processorAccountGetRequest" was null or undefined when calling processorAccountGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/account/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorAccountGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorAccountGetResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable. 
     * Retrieve the account associated with a processor token
     */
    async processorAccountGet(requestParameters: ProcessorAccountGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorAccountGetResponse> {
        const response = await this.processorAccountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * Create Apex bank account token
     */
    async processorApexProcessorTokenCreateRaw(requestParameters: ProcessorApexProcessorTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorApexProcessorTokenCreateRequest',
                'Required parameter "processorApexProcessorTokenCreateRequest" was null or undefined when calling processorApexProcessorTokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/apex/processor_token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorApexProcessorTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * Create Apex bank account token
     */
    async processorApexProcessorTokenCreate(requestParameters: ProcessorApexProcessorTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorTokenCreateResponse> {
        const response = await this.processorApexProcessorTokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * Retrieve Auth data
     */
    async processorAuthGetRaw(requestParameters: ProcessorAuthGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorAuthGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorAuthGetRequest',
                'Required parameter "processorAuthGetRequest" was null or undefined when calling processorAuthGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/auth/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorAuthGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorAuthGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * Retrieve Auth data
     */
    async processorAuthGet(requestParameters: ProcessorAuthGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorAuthGetResponse> {
        const response = await this.processorAuthGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
     * Retrieve Balance data
     */
    async processorBalanceGetRaw(requestParameters: ProcessorBalanceGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorBalanceGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorBalanceGetRequest',
                'Required parameter "processorBalanceGetRequest" was null or undefined when calling processorBalanceGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/balance/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorBalanceGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorBalanceGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
     * Retrieve Balance data
     */
    async processorBalanceGet(requestParameters: ProcessorBalanceGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorBalanceGetResponse> {
        const response = await this.processorBalanceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
     * Create a bank transfer as a processor
     */
    async processorBankTransferCreateRaw(requestParameters: ProcessorBankTransferCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorBankTransferCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorBankTransferCreateRequest',
                'Required parameter "processorBankTransferCreateRequest" was null or undefined when calling processorBankTransferCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/bank_transfer/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorBankTransferCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorBankTransferCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
     * Create a bank transfer as a processor
     */
    async processorBankTransferCreate(requestParameters: ProcessorBankTransferCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorBankTransferCreateResponse> {
        const response = await this.processorBankTransferCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * Retrieve Identity data
     */
    async processorIdentityGetRaw(requestParameters: ProcessorIdentityGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorIdentityGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorIdentityGetRequest',
                'Required parameter "processorIdentityGetRequest" was null or undefined when calling processorIdentityGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/identity/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorIdentityGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorIdentityGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * Retrieve Identity data
     */
    async processorIdentityGet(requestParameters: ProcessorIdentityGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorIdentityGetResponse> {
        const response = await this.processorIdentityGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * Retrieve identity match score
     */
    async processorIdentityMatchRaw(requestParameters: ProcessorIdentityMatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorIdentityMatchResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorIdentityMatchRequest',
                'Required parameter "processorIdentityMatchRequest" was null or undefined when calling processorIdentityMatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/identity/match`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorIdentityMatchRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorIdentityMatchResponseFromJSON(jsonValue));
    }

    /**
     * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * Retrieve identity match score
     */
    async processorIdentityMatch(requestParameters: ProcessorIdentityMatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorIdentityMatchResponse> {
        const response = await this.processorIdentityMatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * Retrieve Liabilities data
     */
    async processorLiabilitiesGetRaw(requestParameters: ProcessorLiabilitiesGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorLiabilitiesGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorLiabilitiesGetRequest',
                'Required parameter "processorLiabilitiesGetRequest" was null or undefined when calling processorLiabilitiesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/liabilities/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorLiabilitiesGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorLiabilitiesGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * Retrieve Liabilities data
     */
    async processorLiabilitiesGet(requestParameters: ProcessorLiabilitiesGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorLiabilitiesGetResponse> {
        const response = await this.processorLiabilitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
     * Report whether you initiated an ACH transaction
     */
    async processorSignalDecisionReportRaw(requestParameters: ProcessorSignalDecisionReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorSignalDecisionReportResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorSignalDecisionReportRequest',
                'Required parameter "processorSignalDecisionReportRequest" was null or undefined when calling processorSignalDecisionReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/signal/decision/report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorSignalDecisionReportRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorSignalDecisionReportResponseFromJSON(jsonValue));
    }

    /**
     * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
     * Report whether you initiated an ACH transaction
     */
    async processorSignalDecisionReport(requestParameters: ProcessorSignalDecisionReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorSignalDecisionReportResponse> {
        const response = await this.processorSignalDecisionReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
     * Evaluate a planned ACH transaction
     */
    async processorSignalEvaluateRaw(requestParameters: ProcessorSignalEvaluateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorSignalEvaluateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorSignalEvaluateRequest',
                'Required parameter "processorSignalEvaluateRequest" was null or undefined when calling processorSignalEvaluate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/signal/evaluate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorSignalEvaluateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorSignalEvaluateResponseFromJSON(jsonValue));
    }

    /**
     * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
     * Evaluate a planned ACH transaction
     */
    async processorSignalEvaluate(requestParameters: ProcessorSignalEvaluateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorSignalEvaluateResponse> {
        const response = await this.processorSignalEvaluateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
     * Opt-in a processor token to Signal
     */
    async processorSignalPrepareRaw(requestParameters: ProcessorSignalPrepareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorSignalPrepareResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorSignalPrepareRequest',
                'Required parameter "processorSignalPrepareRequest" was null or undefined when calling processorSignalPrepare().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/signal/prepare`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorSignalPrepareRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorSignalPrepareResponseFromJSON(jsonValue));
    }

    /**
     * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
     * Opt-in a processor token to Signal
     */
    async processorSignalPrepare(requestParameters: ProcessorSignalPrepareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorSignalPrepareResponse> {
        const response = await this.processorSignalPrepareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
     * Report a return for an ACH transaction
     */
    async processorSignalReturnReportRaw(requestParameters: ProcessorSignalReturnReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorSignalReturnReportResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorSignalReturnReportRequest',
                'Required parameter "processorSignalReturnReportRequest" was null or undefined when calling processorSignalReturnReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/signal/return/report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorSignalReturnReportRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorSignalReturnReportResponseFromJSON(jsonValue));
    }

    /**
     * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
     * Report a return for an ACH transaction
     */
    async processorSignalReturnReport(requestParameters: ProcessorSignalReturnReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorSignalReturnReportResponse> {
        const response = await this.processorSignalReturnReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
     * Create Stripe bank account token
     */
    async processorStripeBankAccountTokenCreateRaw(requestParameters: ProcessorStripeBankAccountTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorStripeBankAccountTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorStripeBankAccountTokenCreateRequest',
                'Required parameter "processorStripeBankAccountTokenCreateRequest" was null or undefined when calling processorStripeBankAccountTokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/stripe/bank_account_token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorStripeBankAccountTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorStripeBankAccountTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
     * Create Stripe bank account token
     */
    async processorStripeBankAccountTokenCreate(requestParameters: ProcessorStripeBankAccountTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorStripeBankAccountTokenCreateResponse> {
        const response = await this.processorStripeBankAccountTokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
     * Create processor token
     */
    async processorTokenCreateRaw(requestParameters: ProcessorTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorTokenCreateRequest',
                'Required parameter "processorTokenCreateRequest" was null or undefined when calling processorTokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
     * Create processor token
     */
    async processorTokenCreate(requestParameters: ProcessorTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorTokenCreateResponse> {
        const response = await this.processorTokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
     * Get a processor token\'s product permissions
     */
    async processorTokenPermissionsGetRaw(requestParameters: ProcessorTokenPermissionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorTokenPermissionsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorTokenPermissionsGetRequest',
                'Required parameter "processorTokenPermissionsGetRequest" was null or undefined when calling processorTokenPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/token/permissions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorTokenPermissionsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorTokenPermissionsGetResponseFromJSON(jsonValue));
    }

    /**
     * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
     * Get a processor token\'s product permissions
     */
    async processorTokenPermissionsGet(requestParameters: ProcessorTokenPermissionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorTokenPermissionsGetResponse> {
        const response = await this.processorTokenPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
     * Control a processor\'s access to products
     */
    async processorTokenPermissionsSetRaw(requestParameters: ProcessorTokenPermissionsSetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorTokenPermissionsSetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorTokenPermissionsSetRequest',
                'Required parameter "processorTokenPermissionsSetRequest" was null or undefined when calling processorTokenPermissionsSet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/token/permissions/set`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorTokenPermissionsSetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorTokenPermissionsSetResponseFromJSON(jsonValue));
    }

    /**
     * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
     * Control a processor\'s access to products
     */
    async processorTokenPermissionsSet(requestParameters: ProcessorTokenPermissionsSetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorTokenPermissionsSetResponse> {
        const response = await this.processorTokenPermissionsSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
     * Update a processor token\'s webhook URL
     */
    async processorTokenWebhookUpdateRaw(requestParameters: ProcessorTokenWebhookUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorTokenWebhookUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorTokenWebhookUpdateRequest',
                'Required parameter "processorTokenWebhookUpdateRequest" was null or undefined when calling processorTokenWebhookUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/token/webhook/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorTokenWebhookUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorTokenWebhookUpdateResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
     * Update a processor token\'s webhook URL
     */
    async processorTokenWebhookUpdate(requestParameters: ProcessorTokenWebhookUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorTokenWebhookUpdateResponse> {
        const response = await this.processorTokenWebhookUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
     * Get transaction data
     */
    async processorTransactionsGetRaw(requestParameters: ProcessorTransactionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorTransactionsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorTransactionsGetRequest',
                'Required parameter "processorTransactionsGetRequest" was null or undefined when calling processorTransactionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/transactions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorTransactionsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorTransactionsGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
     * Get transaction data
     */
    async processorTransactionsGet(requestParameters: ProcessorTransactionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorTransactionsGetResponse> {
        const response = await this.processorTransactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
     * Fetch recurring transaction streams
     */
    async processorTransactionsRecurringGetRaw(requestParameters: ProcessorTransactionsRecurringGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorTransactionsRecurringGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorTransactionsRecurringGetRequest',
                'Required parameter "processorTransactionsRecurringGetRequest" was null or undefined when calling processorTransactionsRecurringGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/transactions/recurring/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorTransactionsRecurringGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorTransactionsRecurringGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
     * Fetch recurring transaction streams
     */
    async processorTransactionsRecurringGet(requestParameters: ProcessorTransactionsRecurringGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorTransactionsRecurringGetResponse> {
        const response = await this.processorTransactionsRecurringGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on a processor token from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * Refresh transaction data
     */
    async processorTransactionsRefreshRaw(requestParameters: ProcessorTransactionsRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorTransactionsRefreshResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorTransactionsRefreshRequest',
                'Required parameter "processorTransactionsRefreshRequest" was null or undefined when calling processorTransactionsRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/transactions/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorTransactionsRefreshRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorTransactionsRefreshResponseFromJSON(jsonValue));
    }

    /**
     * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on a processor token from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * Refresh transaction data
     */
    async processorTransactionsRefresh(requestParameters: ProcessorTransactionsRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorTransactionsRefreshResponse> {
        const response = await this.processorTransactionsRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
     * Get incremental transaction updates on a processor token
     */
    async processorTransactionsSyncRaw(requestParameters: ProcessorTransactionsSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorTransactionsSyncResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'processorTransactionsSyncRequest',
                'Required parameter "processorTransactionsSyncRequest" was null or undefined when calling processorTransactionsSync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/processor/transactions/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorTransactionsSyncRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorTransactionsSyncResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
     * Get incremental transaction updates on a processor token
     */
    async processorTransactionsSync(requestParameters: ProcessorTransactionsSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorTransactionsSyncResponse> {
        const response = await this.processorTransactionsSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns user permissioned profile data including identity and item access tokens.
     * Retrieve a Profile
     */
    async profileGetRaw(requestParameters: ProfileGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'profileGetRequest',
                'Required parameter "profileGetRequest" was null or undefined when calling profileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/profile/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileGetResponseFromJSON(jsonValue));
    }

    /**
     * Returns user permissioned profile data including identity and item access tokens.
     * Retrieve a Profile
     */
    async profileGet(requestParameters: ProfileGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileGetResponse> {
        const response = await this.profileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
     * Manually fire a bank income webhook in sandbox
     */
    async sandboxBankIncomeFireWebhookRaw(requestParameters: SandboxBankIncomeFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxBankIncomeFireWebhookResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxBankIncomeFireWebhookRequest',
                'Required parameter "sandboxBankIncomeFireWebhookRequest" was null or undefined when calling sandboxBankIncomeFireWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/bank_income/fire_webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxBankIncomeFireWebhookRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxBankIncomeFireWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
     * Manually fire a bank income webhook in sandbox
     */
    async sandboxBankIncomeFireWebhook(requestParameters: SandboxBankIncomeFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxBankIncomeFireWebhookResponse> {
        const response = await this.sandboxBankIncomeFireWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * Manually fire a Bank Transfer webhook
     */
    async sandboxBankTransferFireWebhookRaw(requestParameters: SandboxBankTransferFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxBankTransferFireWebhookResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxBankTransferFireWebhookRequest',
                'Required parameter "sandboxBankTransferFireWebhookRequest" was null or undefined when calling sandboxBankTransferFireWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/bank_transfer/fire_webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxBankTransferFireWebhookRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxBankTransferFireWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * Manually fire a Bank Transfer webhook
     */
    async sandboxBankTransferFireWebhook(requestParameters: SandboxBankTransferFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxBankTransferFireWebhookResponse> {
        const response = await this.sandboxBankTransferFireWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * Simulate a bank transfer event in Sandbox
     */
    async sandboxBankTransferSimulateRaw(requestParameters: SandboxBankTransferSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxBankTransferSimulateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxBankTransferSimulateRequest',
                'Required parameter "sandboxBankTransferSimulateRequest" was null or undefined when calling sandboxBankTransferSimulate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/bank_transfer/simulate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxBankTransferSimulateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxBankTransferSimulateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * Simulate a bank transfer event in Sandbox
     */
    async sandboxBankTransferSimulate(requestParameters: SandboxBankTransferSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxBankTransferSimulateResponse> {
        const response = await this.sandboxBankTransferSimulateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
     * Manually fire an Income webhook
     */
    async sandboxIncomeFireWebhookRaw(requestParameters: SandboxIncomeFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxIncomeFireWebhookResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxIncomeFireWebhookRequest',
                'Required parameter "sandboxIncomeFireWebhookRequest" was null or undefined when calling sandboxIncomeFireWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/income/fire_webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxIncomeFireWebhookRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxIncomeFireWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
     * Manually fire an Income webhook
     */
    async sandboxIncomeFireWebhook(requestParameters: SandboxIncomeFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxIncomeFireWebhookResponse> {
        const response = await this.sandboxIncomeFireWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development (except for webhooks of type `TRANSFER`).
     * Fire a test webhook
     */
    async sandboxItemFireWebhookRaw(requestParameters: SandboxItemFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxItemFireWebhookResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxItemFireWebhookRequest',
                'Required parameter "sandboxItemFireWebhookRequest" was null or undefined when calling sandboxItemFireWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/item/fire_webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxItemFireWebhookRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxItemFireWebhookResponseFromJSON(jsonValue));
    }

    /**
     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development (except for webhooks of type `TRANSFER`).
     * Fire a test webhook
     */
    async sandboxItemFireWebhook(requestParameters: SandboxItemFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxItemFireWebhookResponse> {
        const response = await this.sandboxItemFireWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
     * Force a Sandbox Item into an error state
     */
    async sandboxItemResetLoginRaw(requestParameters: SandboxItemResetLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxItemResetLoginResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxItemResetLoginRequest',
                'Required parameter "sandboxItemResetLoginRequest" was null or undefined when calling sandboxItemResetLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/item/reset_login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxItemResetLoginRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxItemResetLoginResponseFromJSON(jsonValue));
    }

    /**
     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
     * Force a Sandbox Item into an error state
     */
    async sandboxItemResetLogin(requestParameters: SandboxItemResetLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxItemResetLoginResponse> {
        const response = await this.sandboxItemResetLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * Set verification status for Sandbox account
     */
    async sandboxItemSetVerificationStatusRaw(requestParameters: SandboxItemSetVerificationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxItemSetVerificationStatusResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxItemSetVerificationStatusRequest',
                'Required parameter "sandboxItemSetVerificationStatusRequest" was null or undefined when calling sandboxItemSetVerificationStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/item/set_verification_status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxItemSetVerificationStatusRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxItemSetVerificationStatusResponseFromJSON(jsonValue));
    }

    /**
     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * Set verification status for Sandbox account
     */
    async sandboxItemSetVerificationStatus(requestParameters: SandboxItemSetVerificationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxItemSetVerificationStatusResponse> {
        const response = await this.sandboxItemSetVerificationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * Save the selected accounts when connecting to the Platypus Oauth institution
     */
    async sandboxOauthSelectAccountsRaw(requestParameters: SandboxOauthSelectAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxOauthSelectAccountsRequest',
                'Required parameter "sandboxOauthSelectAccountsRequest" was null or undefined when calling sandboxOauthSelectAccounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/oauth/select_accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxOauthSelectAccountsRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * Save the selected accounts when connecting to the Platypus Oauth institution
     */
    async sandboxOauthSelectAccounts(requestParameters: SandboxOauthSelectAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.sandboxOauthSelectAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
     * Reset the login of a Payment Profile
     * @deprecated
     */
    async sandboxPaymentProfileResetLoginRaw(requestParameters: SandboxPaymentProfileResetLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxPaymentProfileResetLoginResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxPaymentProfileResetLoginRequest',
                'Required parameter "sandboxPaymentProfileResetLoginRequest" was null or undefined when calling sandboxPaymentProfileResetLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/payment_profile/reset_login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxPaymentProfileResetLoginRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxPaymentProfileResetLoginResponseFromJSON(jsonValue));
    }

    /**
     * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
     * Reset the login of a Payment Profile
     * @deprecated
     */
    async sandboxPaymentProfileResetLogin(requestParameters: SandboxPaymentProfileResetLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxPaymentProfileResetLoginResponse> {
        const response = await this.sandboxPaymentProfileResetLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * Create a test Item and processor token
     */
    async sandboxProcessorTokenCreateRaw(requestParameters: SandboxProcessorTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxProcessorTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxProcessorTokenCreateRequest',
                'Required parameter "sandboxProcessorTokenCreateRequest" was null or undefined when calling sandboxProcessorTokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/processor_token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxProcessorTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxProcessorTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * Create a test Item and processor token
     */
    async sandboxProcessorTokenCreate(requestParameters: SandboxProcessorTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxProcessorTokenCreateResponse> {
        const response = await this.sandboxProcessorTokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
     * Create a test Item
     */
    async sandboxPublicTokenCreateRaw(requestParameters: SandboxPublicTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxPublicTokenCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxPublicTokenCreateRequest',
                'Required parameter "sandboxPublicTokenCreateRequest" was null or undefined when calling sandboxPublicTokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/public_token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxPublicTokenCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxPublicTokenCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
     * Create a test Item
     */
    async sandboxPublicTokenCreate(requestParameters: SandboxPublicTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxPublicTokenCreateResponse> {
        const response = await this.sandboxPublicTokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
     * Manually fire a Transfer webhook
     */
    async sandboxTransferFireWebhookRaw(requestParameters: SandboxTransferFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferFireWebhookResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferFireWebhookRequest',
                'Required parameter "sandboxTransferFireWebhookRequest" was null or undefined when calling sandboxTransferFireWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/fire_webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferFireWebhookRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferFireWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
     * Manually fire a Transfer webhook
     */
    async sandboxTransferFireWebhook(requestParameters: SandboxTransferFireWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferFireWebhookResponse> {
        const response = await this.sandboxTransferFireWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
     * Simulate a ledger deposit event in Sandbox
     */
    async sandboxTransferLedgerDepositSimulateRaw(requestParameters: SandboxTransferLedgerDepositSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferLedgerDepositSimulateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferLedgerDepositSimulateRequest',
                'Required parameter "sandboxTransferLedgerDepositSimulateRequest" was null or undefined when calling sandboxTransferLedgerDepositSimulate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/ledger/deposit/simulate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferLedgerDepositSimulateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferLedgerDepositSimulateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
     * Simulate a ledger deposit event in Sandbox
     */
    async sandboxTransferLedgerDepositSimulate(requestParameters: SandboxTransferLedgerDepositSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferLedgerDepositSimulateResponse> {
        const response = await this.sandboxTransferLedgerDepositSimulateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
     * Simulate converting pending balance to available balance
     */
    async sandboxTransferLedgerSimulateAvailableRaw(requestParameters: SandboxTransferLedgerSimulateAvailableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferLedgerSimulateAvailableResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferLedgerSimulateAvailableRequest',
                'Required parameter "sandboxTransferLedgerSimulateAvailableRequest" was null or undefined when calling sandboxTransferLedgerSimulateAvailable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/ledger/simulate_available`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferLedgerSimulateAvailableRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferLedgerSimulateAvailableResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
     * Simulate converting pending balance to available balance
     */
    async sandboxTransferLedgerSimulateAvailable(requestParameters: SandboxTransferLedgerSimulateAvailableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferLedgerSimulateAvailableResponse> {
        const response = await this.sandboxTransferLedgerSimulateAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
     * Simulate a ledger withdraw event in Sandbox
     */
    async sandboxTransferLedgerWithdrawSimulateRaw(requestParameters: SandboxTransferLedgerWithdrawSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferLedgerWithdrawSimulateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferLedgerWithdrawSimulateRequest',
                'Required parameter "sandboxTransferLedgerWithdrawSimulateRequest" was null or undefined when calling sandboxTransferLedgerWithdrawSimulate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/ledger/withdraw/simulate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferLedgerWithdrawSimulateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferLedgerWithdrawSimulateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
     * Simulate a ledger withdraw event in Sandbox
     */
    async sandboxTransferLedgerWithdrawSimulate(requestParameters: SandboxTransferLedgerWithdrawSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferLedgerWithdrawSimulateResponse> {
        const response = await this.sandboxTransferLedgerWithdrawSimulateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * Simulate a refund event in Sandbox
     */
    async sandboxTransferRefundSimulateRaw(requestParameters: SandboxTransferRefundSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferRefundSimulateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferRefundSimulateRequest',
                'Required parameter "sandboxTransferRefundSimulateRequest" was null or undefined when calling sandboxTransferRefundSimulate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/refund/simulate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferRefundSimulateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferRefundSimulateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * Simulate a refund event in Sandbox
     */
    async sandboxTransferRefundSimulate(requestParameters: SandboxTransferRefundSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferRefundSimulateResponse> {
        const response = await this.sandboxTransferRefundSimulateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * Trigger the creation of a repayment
     */
    async sandboxTransferRepaymentSimulateRaw(requestParameters: SandboxTransferRepaymentSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferRepaymentSimulateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferRepaymentSimulateRequest',
                'Required parameter "sandboxTransferRepaymentSimulateRequest" was null or undefined when calling sandboxTransferRepaymentSimulate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/repayment/simulate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferRepaymentSimulateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferRepaymentSimulateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * Trigger the creation of a repayment
     */
    async sandboxTransferRepaymentSimulate(requestParameters: SandboxTransferRepaymentSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferRepaymentSimulateResponse> {
        const response = await this.sandboxTransferRepaymentSimulateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * Simulate a transfer event in Sandbox
     */
    async sandboxTransferSimulateRaw(requestParameters: SandboxTransferSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferSimulateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferSimulateRequest',
                'Required parameter "sandboxTransferSimulateRequest" was null or undefined when calling sandboxTransferSimulate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/simulate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferSimulateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferSimulateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * Simulate a transfer event in Sandbox
     */
    async sandboxTransferSimulate(requestParameters: SandboxTransferSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferSimulateResponse> {
        const response = await this.sandboxTransferSimulateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
     * Simulate creating a sweep
     */
    async sandboxTransferSweepSimulateRaw(requestParameters: SandboxTransferSweepSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferSweepSimulateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferSweepSimulateRequest',
                'Required parameter "sandboxTransferSweepSimulateRequest" was null or undefined when calling sandboxTransferSweepSimulate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/sweep/simulate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferSweepSimulateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferSweepSimulateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
     * Simulate creating a sweep
     */
    async sandboxTransferSweepSimulate(requestParameters: SandboxTransferSweepSimulateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferSweepSimulateResponse> {
        const response = await this.sandboxTransferSweepSimulateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
     * Advance a test clock
     */
    async sandboxTransferTestClockAdvanceRaw(requestParameters: SandboxTransferTestClockAdvanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferTestClockAdvanceResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferTestClockAdvanceRequest',
                'Required parameter "sandboxTransferTestClockAdvanceRequest" was null or undefined when calling sandboxTransferTestClockAdvance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/test_clock/advance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferTestClockAdvanceRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferTestClockAdvanceResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
     * Advance a test clock
     */
    async sandboxTransferTestClockAdvance(requestParameters: SandboxTransferTestClockAdvanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferTestClockAdvanceResponse> {
        const response = await this.sandboxTransferTestClockAdvanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
     * Create a test clock
     */
    async sandboxTransferTestClockCreateRaw(requestParameters: SandboxTransferTestClockCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferTestClockCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferTestClockCreateRequest',
                'Required parameter "sandboxTransferTestClockCreateRequest" was null or undefined when calling sandboxTransferTestClockCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/test_clock/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferTestClockCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferTestClockCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
     * Create a test clock
     */
    async sandboxTransferTestClockCreate(requestParameters: SandboxTransferTestClockCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferTestClockCreateResponse> {
        const response = await this.sandboxTransferTestClockCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
     * Get a test clock
     */
    async sandboxTransferTestClockGetRaw(requestParameters: SandboxTransferTestClockGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferTestClockGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferTestClockGetRequest',
                'Required parameter "sandboxTransferTestClockGetRequest" was null or undefined when calling sandboxTransferTestClockGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/test_clock/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferTestClockGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferTestClockGetResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
     * Get a test clock
     */
    async sandboxTransferTestClockGet(requestParameters: SandboxTransferTestClockGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferTestClockGetResponse> {
        const response = await this.sandboxTransferTestClockGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
     * List test clocks
     */
    async sandboxTransferTestClockListRaw(requestParameters: SandboxTransferTestClockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SandboxTransferTestClockListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'sandboxTransferTestClockListRequest',
                'Required parameter "sandboxTransferTestClockListRequest" was null or undefined when calling sandboxTransferTestClockList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/sandbox/transfer/test_clock/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SandboxTransferTestClockListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SandboxTransferTestClockListResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
     * List test clocks
     */
    async sandboxTransferTestClockList(requestParameters: SandboxTransferTestClockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SandboxTransferTestClockListResponse> {
        const response = await this.sandboxTransferTestClockListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
     * Report whether you initiated an ACH transaction
     */
    async signalDecisionReportRaw(requestParameters: SignalDecisionReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignalDecisionReportResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'signalDecisionReportRequest',
                'Required parameter "signalDecisionReportRequest" was null or undefined when calling signalDecisionReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/signal/decision/report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignalDecisionReportRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalDecisionReportResponseFromJSON(jsonValue));
    }

    /**
     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
     * Report whether you initiated an ACH transaction
     */
    async signalDecisionReport(requestParameters: SignalDecisionReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignalDecisionReportResponse> {
        const response = await this.signalDecisionReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * Evaluate a planned ACH transaction
     */
    async signalEvaluateRaw(requestParameters: SignalEvaluateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignalEvaluateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'signalEvaluateRequest',
                'Required parameter "signalEvaluateRequest" was null or undefined when calling signalEvaluate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/signal/evaluate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignalEvaluateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalEvaluateResponseFromJSON(jsonValue));
    }

    /**
     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * Evaluate a planned ACH transaction
     */
    async signalEvaluate(requestParameters: SignalEvaluateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignalEvaluateResponse> {
        const response = await this.signalEvaluateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
     * Opt-in an Item to Signal
     */
    async signalPrepareRaw(requestParameters: SignalPrepareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignalPrepareResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'signalPrepareRequest',
                'Required parameter "signalPrepareRequest" was null or undefined when calling signalPrepare().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/signal/prepare`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignalPrepareRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalPrepareResponseFromJSON(jsonValue));
    }

    /**
     * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
     * Opt-in an Item to Signal
     */
    async signalPrepare(requestParameters: SignalPrepareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignalPrepareResponse> {
        const response = await this.signalPrepareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * Report a return for an ACH transaction
     */
    async signalReturnReportRaw(requestParameters: SignalReturnReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignalReturnReportResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'signalReturnReportRequest',
                'Required parameter "signalReturnReportRequest" was null or undefined when calling signalReturnReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/signal/return/report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignalReturnReportRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalReturnReportResponseFromJSON(jsonValue));
    }

    /**
     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * Report a return for an ACH transaction
     */
    async signalReturnReport(requestParameters: SignalReturnReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignalReturnReportResponse> {
        const response = await this.signalReturnReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
     * Retrieve a single statement.
     */
    async statementsDownloadRaw(requestParameters: StatementsDownloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'statementsDownloadRequest',
                'Required parameter "statementsDownloadRequest" was null or undefined when calling statementsDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/statements/download`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatementsDownloadRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
     * Retrieve a single statement.
     */
    async statementsDownload(requestParameters: StatementsDownloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.statementsDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/statements/list` endpoint retrieves a list of all statements associated with the provided item.
     * Retrieve a list of all statements associated with the provided item.
     */
    async statementsListRaw(requestParameters: StatementsListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatementsListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'statementsListRequest',
                'Required parameter "statementsListRequest" was null or undefined when calling statementsList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/statements/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatementsListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatementsListResponseFromJSON(jsonValue));
    }

    /**
     * The `/statements/list` endpoint retrieves a list of all statements associated with the provided item.
     * Retrieve a list of all statements associated with the provided item.
     */
    async statementsList(requestParameters: StatementsListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatementsListResponse> {
        const response = await this.statementsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
     * Refresh statements data.
     */
    async statementsRefreshRaw(requestParameters: StatementsRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatementsRefreshResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'statementsRefreshRequest',
                'Required parameter "statementsRefreshRequest" was null or undefined when calling statementsRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/statements/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatementsRefreshRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatementsRefreshResponseFromJSON(jsonValue));
    }

    /**
     * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
     * Refresh statements data.
     */
    async statementsRefresh(requestParameters: StatementsRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatementsRefreshResponse> {
        const response = await this.statementsRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     * enhance locally-held transaction data
     */
    async transactionsEnhanceRaw(requestParameters: TransactionsEnhanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsEnhanceGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsEnhanceGetRequest',
                'Required parameter "transactionsEnhanceGetRequest" was null or undefined when calling transactionsEnhance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beta/transactions/v1/enhance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsEnhanceGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsEnhanceGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     * enhance locally-held transaction data
     */
    async transactionsEnhance(requestParameters: TransactionsEnhanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsEnhanceGetResponse> {
        const response = await this.transactionsEnhanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
     * Enrich locally-held transaction data
     */
    async transactionsEnrichRaw(requestParameters: TransactionsEnrichOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsEnrichResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsEnrichRequest',
                'Required parameter "transactionsEnrichRequest" was null or undefined when calling transactionsEnrich().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transactions/enrich`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsEnrichRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsEnrichResponseFromJSON(jsonValue));
    }

    /**
     * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
     * Enrich locally-held transaction data
     */
    async transactionsEnrich(requestParameters: TransactionsEnrichOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsEnrichResponse> {
        const response = await this.transactionsEnrichRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     * Get transaction data
     */
    async transactionsGetRaw(requestParameters: TransactionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsGetRequest',
                'Required parameter "transactionsGetRequest" was null or undefined when calling transactionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transactions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsGetResponseFromJSON(jsonValue));
    }

    /**
     * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     * Get transaction data
     */
    async transactionsGet(requestParameters: TransactionsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsGetResponse> {
        const response = await this.transactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). For optimal results, we strongly recommend customers using Recurring Transactions to request at least 180 days of history when initializing items with Transactions (using the [`days_requested`](https://plaid.com/docs/api/tokens/#link-token-create-request-transactions-days-requested) option). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     * Fetch recurring transaction streams
     */
    async transactionsRecurringGetRaw(requestParameters: TransactionsRecurringGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsRecurringGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsRecurringGetRequest',
                'Required parameter "transactionsRecurringGetRequest" was null or undefined when calling transactionsRecurringGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transactions/recurring/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsRecurringGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsRecurringGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). For optimal results, we strongly recommend customers using Recurring Transactions to request at least 180 days of history when initializing items with Transactions (using the [`days_requested`](https://plaid.com/docs/api/tokens/#link-token-create-request-transactions-days-requested) option). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     * Fetch recurring transaction streams
     */
    async transactionsRecurringGet(requestParameters: TransactionsRecurringGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsRecurringGetResponse> {
        const response = await this.transactionsRecurringGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item from that institution.   As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * Refresh transaction data
     */
    async transactionsRefreshRaw(requestParameters: TransactionsRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsRefreshResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsRefreshRequest',
                'Required parameter "transactionsRefreshRequest" was null or undefined when calling transactionsRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transactions/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsRefreshRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsRefreshResponseFromJSON(jsonValue));
    }

    /**
     * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item from that institution.   As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * Refresh transaction data
     */
    async transactionsRefresh(requestParameters: TransactionsRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsRefreshResponse> {
        const response = await this.transactionsRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * Create transaction category rule
     */
    async transactionsRulesCreateRaw(requestParameters: TransactionsRulesCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsRulesCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsRulesCreateRequest',
                'Required parameter "transactionsRulesCreateRequest" was null or undefined when calling transactionsRulesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beta/transactions/rules/v1/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsRulesCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsRulesCreateResponseFromJSON(jsonValue));
    }

    /**
     * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * Create transaction category rule
     */
    async transactionsRulesCreate(requestParameters: TransactionsRulesCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsRulesCreateResponse> {
        const response = await this.transactionsRulesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
     * Return a list of rules created for the Item associated with the access token.
     */
    async transactionsRulesListRaw(requestParameters: TransactionsRulesListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsRulesListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsRulesListRequest',
                'Required parameter "transactionsRulesListRequest" was null or undefined when calling transactionsRulesList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beta/transactions/rules/v1/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsRulesListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsRulesListResponseFromJSON(jsonValue));
    }

    /**
     * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
     * Return a list of rules created for the Item associated with the access token.
     */
    async transactionsRulesList(requestParameters: TransactionsRulesListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsRulesListResponse> {
        const response = await this.transactionsRulesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
     * Remove transaction rule
     */
    async transactionsRulesRemoveRaw(requestParameters: TransactionsRulesRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsRulesRemoveResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsRulesRemoveRequest',
                'Required parameter "transactionsRulesRemoveRequest" was null or undefined when calling transactionsRulesRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beta/transactions/rules/v1/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsRulesRemoveRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsRulesRemoveResponseFromJSON(jsonValue));
    }

    /**
     * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
     * Remove transaction rule
     */
    async transactionsRulesRemove(requestParameters: TransactionsRulesRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsRulesRemoveResponse> {
        const response = await this.transactionsRulesRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  `/transactions/sync` does not directly return balance data. To get the balance for an account, call `/accounts/get`, which is a free-to-use endpoint that will return the cached balance as of the last successful transactions update.
     * Get incremental transaction updates on an Item
     */
    async transactionsSyncRaw(requestParameters: TransactionsSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsSyncResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsSyncRequest',
                'Required parameter "transactionsSyncRequest" was null or undefined when calling transactionsSync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transactions/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsSyncRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsSyncResponseFromJSON(jsonValue));
    }

    /**
     * The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  `/transactions/sync` does not directly return balance data. To get the balance for an account, call `/accounts/get`, which is a free-to-use endpoint that will return the cached balance as of the last successful transactions update.
     * Get incremental transaction updates on an Item
     */
    async transactionsSync(requestParameters: TransactionsSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsSyncResponse> {
        const response = await this.transactionsSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
     * Obtain user insights based on transactions sent through /transactions/enrich
     */
    async transactionsUserInsightsGetRaw(requestParameters: TransactionsUserInsightsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsUserInsightsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transactionsUserInsightsGetRequest',
                'Required parameter "transactionsUserInsightsGetRequest" was null or undefined when calling transactionsUserInsightsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/beta/transactions/user_insights/v1/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsUserInsightsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsUserInsightsGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
     * Obtain user insights based on transactions sent through /transactions/enrich
     */
    async transactionsUserInsightsGet(requestParameters: TransactionsUserInsightsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsUserInsightsGetResponse> {
        const response = await this.transactionsUserInsightsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`.  There are three possible outcomes to calling this endpoint: If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer. If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
     * Create a transfer authorization
     */
    async transferAuthorizationCreateRaw(requestParameters: TransferAuthorizationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferAuthorizationCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferAuthorizationCreateRequest',
                'Required parameter "transferAuthorizationCreateRequest" was null or undefined when calling transferAuthorizationCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/authorization/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferAuthorizationCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferAuthorizationCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`.  There are three possible outcomes to calling this endpoint: If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer. If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
     * Create a transfer authorization
     */
    async transferAuthorizationCreate(requestParameters: TransferAuthorizationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferAuthorizationCreateResponse> {
        const response = await this.transferAuthorizationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
     * Retrieve a balance held with Plaid
     */
    async transferBalanceGetRaw(requestParameters: TransferBalanceGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferBalanceGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferBalanceGetRequest',
                'Required parameter "transferBalanceGetRequest" was null or undefined when calling transferBalanceGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/balance/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferBalanceGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferBalanceGetResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
     * Retrieve a balance held with Plaid
     */
    async transferBalanceGet(requestParameters: TransferBalanceGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferBalanceGetResponse> {
        const response = await this.transferBalanceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
     * Cancel a transfer
     */
    async transferCancelRaw(requestParameters: TransferCancelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferCancelResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferCancelRequest',
                'Required parameter "transferCancelRequest" was null or undefined when calling transferCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferCancelRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferCancelResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
     * Cancel a transfer
     */
    async transferCancel(requestParameters: TransferCancelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferCancelResponse> {
        const response = await this.transferCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
     * Get RTP eligibility information of a transfer
     */
    async transferCapabilitiesGetRaw(requestParameters: TransferCapabilitiesGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferCapabilitiesGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferCapabilitiesGetRequest',
                'Required parameter "transferCapabilitiesGetRequest" was null or undefined when calling transferCapabilitiesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/capabilities/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferCapabilitiesGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferCapabilitiesGetResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
     * Get RTP eligibility information of a transfer
     */
    async transferCapabilitiesGet(requestParameters: TransferCapabilitiesGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferCapabilitiesGetResponse> {
        const response = await this.transferCapabilitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
     * Get transfer product configuration
     */
    async transferConfigurationGetRaw(requestParameters: TransferConfigurationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferConfigurationGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferConfigurationGetRequest',
                'Required parameter "transferConfigurationGetRequest" was null or undefined when calling transferConfigurationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/configuration/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferConfigurationGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferConfigurationGetResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
     * Get transfer product configuration
     */
    async transferConfigurationGet(requestParameters: TransferConfigurationGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferConfigurationGetResponse> {
        const response = await this.transferConfigurationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/create` endpoint to initiate a new transfer.
     * Create a transfer
     */
    async transferCreateRaw(requestParameters: TransferCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferCreateRequest',
                'Required parameter "transferCreateRequest" was null or undefined when calling transferCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/create` endpoint to initiate a new transfer.
     * Create a transfer
     */
    async transferCreate(requestParameters: TransferCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferCreateResponse> {
        const response = await this.transferCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
     * Upload transfer diligence document on behalf of the originator
     */
    async transferDiligenceDocumentUploadRaw(requestParameters: TransferDiligenceDocumentUploadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferDiligenceDocumentUploadResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferDiligenceDocumentUploadRequest',
                'Required parameter "transferDiligenceDocumentUploadRequest" was null or undefined when calling transferDiligenceDocumentUpload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/diligence/document/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferDiligenceDocumentUploadRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferDiligenceDocumentUploadResponseFromJSON(jsonValue));
    }

    /**
     * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
     * Upload transfer diligence document on behalf of the originator
     */
    async transferDiligenceDocumentUpload(requestParameters: TransferDiligenceDocumentUploadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferDiligenceDocumentUploadResponse> {
        const response = await this.transferDiligenceDocumentUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
     * Submit transfer diligence on behalf of the originator
     */
    async transferDiligenceSubmitRaw(requestParameters: TransferDiligenceSubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferDiligenceSubmitResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferDiligenceSubmitRequest',
                'Required parameter "transferDiligenceSubmitRequest" was null or undefined when calling transferDiligenceSubmit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/diligence/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferDiligenceSubmitRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferDiligenceSubmitResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
     * Submit transfer diligence on behalf of the originator
     */
    async transferDiligenceSubmit(requestParameters: TransferDiligenceSubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferDiligenceSubmitResponse> {
        const response = await this.transferDiligenceSubmitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
     * List transfer events
     */
    async transferEventListRaw(requestParameters: TransferEventListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferEventListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferEventListRequest',
                'Required parameter "transferEventListRequest" was null or undefined when calling transferEventList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/event/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferEventListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferEventListResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
     * List transfer events
     */
    async transferEventList(requestParameters: TransferEventListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferEventListResponse> {
        const response = await this.transferEventListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
     * Sync transfer events
     */
    async transferEventSyncRaw(requestParameters: TransferEventSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferEventSyncResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferEventSyncRequest',
                'Required parameter "transferEventSyncRequest" was null or undefined when calling transferEventSync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/event/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferEventSyncRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferEventSyncResponseFromJSON(jsonValue));
    }

    /**
     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
     * Sync transfer events
     */
    async transferEventSync(requestParameters: TransferEventSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferEventSyncResponse> {
        const response = await this.transferEventSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
     * Retrieve a transfer
     */
    async transferGetRaw(requestParameters: TransferGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferGetRequest',
                'Required parameter "transferGetRequest" was null or undefined when calling transferGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
     * Retrieve a transfer
     */
    async transferGet(requestParameters: TransferGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferGetResponse> {
        const response = await this.transferGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
     * Create a transfer intent object to invoke the Transfer UI
     */
    async transferIntentCreateRaw(requestParameters: TransferIntentCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferIntentCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferIntentCreateRequest',
                'Required parameter "transferIntentCreateRequest" was null or undefined when calling transferIntentCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/intent/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferIntentCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferIntentCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
     * Create a transfer intent object to invoke the Transfer UI
     */
    async transferIntentCreate(requestParameters: TransferIntentCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferIntentCreateResponse> {
        const response = await this.transferIntentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
     * Retrieve more information about a transfer intent
     */
    async transferIntentGetRaw(requestParameters: TransferIntentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferIntentGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferIntentGetRequest',
                'Required parameter "transferIntentGetRequest" was null or undefined when calling transferIntentGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/intent/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferIntentGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferIntentGetResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
     * Retrieve more information about a transfer intent
     */
    async transferIntentGet(requestParameters: TransferIntentGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferIntentGetResponse> {
        const response = await this.transferIntentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
     * Deposit funds into a Plaid Ledger balance
     */
    async transferLedgerDepositRaw(requestParameters: TransferLedgerDepositOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferLedgerDepositResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferLedgerDepositRequest',
                'Required parameter "transferLedgerDepositRequest" was null or undefined when calling transferLedgerDeposit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/ledger/deposit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferLedgerDepositRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferLedgerDepositResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
     * Deposit funds into a Plaid Ledger balance
     */
    async transferLedgerDeposit(requestParameters: TransferLedgerDepositOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferLedgerDepositResponse> {
        const response = await this.transferLedgerDepositRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
     * Move available balance between the ledgers of the platform and one of its originators
     */
    async transferLedgerDistributeRaw(requestParameters: TransferLedgerDistributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferLedgerDistributeResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferLedgerDistributeRequest',
                'Required parameter "transferLedgerDistributeRequest" was null or undefined when calling transferLedgerDistribute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/ledger/distribute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferLedgerDistributeRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferLedgerDistributeResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
     * Move available balance between the ledgers of the platform and one of its originators
     */
    async transferLedgerDistribute(requestParameters: TransferLedgerDistributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferLedgerDistributeResponse> {
        const response = await this.transferLedgerDistributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
     * Retrieve Plaid Ledger balance
     */
    async transferLedgerGetRaw(requestParameters: TransferLedgerGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferLedgerGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferLedgerGetRequest',
                'Required parameter "transferLedgerGetRequest" was null or undefined when calling transferLedgerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/ledger/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferLedgerGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferLedgerGetResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
     * Retrieve Plaid Ledger balance
     */
    async transferLedgerGet(requestParameters: TransferLedgerGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferLedgerGetResponse> {
        const response = await this.transferLedgerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
     * Withdraw funds from a Plaid Ledger balance
     */
    async transferLedgerWithdrawRaw(requestParameters: TransferLedgerWithdrawOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferLedgerWithdrawResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferLedgerWithdrawRequest',
                'Required parameter "transferLedgerWithdrawRequest" was null or undefined when calling transferLedgerWithdraw().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/ledger/withdraw`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferLedgerWithdrawRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferLedgerWithdrawResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
     * Withdraw funds from a Plaid Ledger balance
     */
    async transferLedgerWithdraw(requestParameters: TransferLedgerWithdrawOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferLedgerWithdrawResponse> {
        const response = await this.transferLedgerWithdrawRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. 
     * List transfers
     */
    async transferListRaw(requestParameters: TransferListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferListRequest',
                'Required parameter "transferListRequest" was null or undefined when calling transferList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferListResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. 
     * List transfers
     */
    async transferList(requestParameters: TransferListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferListResponse> {
        const response = await this.transferListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
     * Get transfer product usage metrics
     */
    async transferMetricsGetRaw(requestParameters: TransferMetricsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferMetricsGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferMetricsGetRequest',
                'Required parameter "transferMetricsGetRequest" was null or undefined when calling transferMetricsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/metrics/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferMetricsGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferMetricsGetResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
     * Get transfer product usage metrics
     */
    async transferMetricsGet(requestParameters: TransferMetricsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferMetricsGetResponse> {
        const response = await this.transferMetricsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. If you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * Migrate account into Transfers
     */
    async transferMigrateAccountRaw(requestParameters: TransferMigrateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferMigrateAccountResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferMigrateAccountRequest',
                'Required parameter "transferMigrateAccountRequest" was null or undefined when calling transferMigrateAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/migrate_account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferMigrateAccountRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferMigrateAccountResponseFromJSON(jsonValue));
    }

    /**
     * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. If you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * Migrate account into Transfers
     */
    async transferMigrateAccount(requestParameters: TransferMigrateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferMigrateAccountResponse> {
        const response = await this.transferMigrateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
     * Create a new originator
     */
    async transferOriginatorCreateRaw(requestParameters: TransferOriginatorCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferOriginatorCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferOriginatorCreateRequest',
                'Required parameter "transferOriginatorCreateRequest" was null or undefined when calling transferOriginatorCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/originator/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferOriginatorCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferOriginatorCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
     * Create a new originator
     */
    async transferOriginatorCreate(requestParameters: TransferOriginatorCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferOriginatorCreateResponse> {
        const response = await this.transferOriginatorCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
     * Update the funding account associated with the originator
     */
    async transferOriginatorFundingAccountUpdateRaw(requestParameters: TransferOriginatorFundingAccountUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferOriginatorFundingAccountUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferOriginatorFundingAccountUpdateRequest',
                'Required parameter "transferOriginatorFundingAccountUpdateRequest" was null or undefined when calling transferOriginatorFundingAccountUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/originator/funding_account/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferOriginatorFundingAccountUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferOriginatorFundingAccountUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
     * Update the funding account associated with the originator
     */
    async transferOriginatorFundingAccountUpdate(requestParameters: TransferOriginatorFundingAccountUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferOriginatorFundingAccountUpdateResponse> {
        const response = await this.transferOriginatorFundingAccountUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
     * Get status of an originator\'s onboarding
     */
    async transferOriginatorGetRaw(requestParameters: TransferOriginatorGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferOriginatorGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferOriginatorGetRequest',
                'Required parameter "transferOriginatorGetRequest" was null or undefined when calling transferOriginatorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/originator/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferOriginatorGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferOriginatorGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
     * Get status of an originator\'s onboarding
     */
    async transferOriginatorGet(requestParameters: TransferOriginatorGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferOriginatorGetResponse> {
        const response = await this.transferOriginatorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
     * Get status of all originators\' onboarding
     */
    async transferOriginatorListRaw(requestParameters: TransferOriginatorListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferOriginatorListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferOriginatorListRequest',
                'Required parameter "transferOriginatorListRequest" was null or undefined when calling transferOriginatorList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/originator/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferOriginatorListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferOriginatorListResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
     * Get status of all originators\' onboarding
     */
    async transferOriginatorList(requestParameters: TransferOriginatorListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferOriginatorListResponse> {
        const response = await this.transferOriginatorListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
     * Generate a Plaid-hosted onboarding UI URL.
     */
    async transferQuestionnaireCreateRaw(requestParameters: TransferQuestionnaireCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferQuestionnaireCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferQuestionnaireCreateRequest',
                'Required parameter "transferQuestionnaireCreateRequest" was null or undefined when calling transferQuestionnaireCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/questionnaire/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferQuestionnaireCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferQuestionnaireCreateResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
     * Generate a Plaid-hosted onboarding UI URL.
     */
    async transferQuestionnaireCreate(requestParameters: TransferQuestionnaireCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferQuestionnaireCreateResponse> {
        const response = await this.transferQuestionnaireCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
     * Cancel a recurring transfer.
     */
    async transferRecurringCancelRaw(requestParameters: TransferRecurringCancelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferRecurringCancelResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferRecurringCancelRequest',
                'Required parameter "transferRecurringCancelRequest" was null or undefined when calling transferRecurringCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/recurring/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRecurringCancelRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferRecurringCancelResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
     * Cancel a recurring transfer.
     */
    async transferRecurringCancel(requestParameters: TransferRecurringCancelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferRecurringCancelResponse> {
        const response = await this.transferRecurringCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
     * Create a recurring transfer
     */
    async transferRecurringCreateRaw(requestParameters: TransferRecurringCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferRecurringCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferRecurringCreateRequest',
                'Required parameter "transferRecurringCreateRequest" was null or undefined when calling transferRecurringCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/recurring/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRecurringCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferRecurringCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
     * Create a recurring transfer
     */
    async transferRecurringCreate(requestParameters: TransferRecurringCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferRecurringCreateResponse> {
        const response = await this.transferRecurringCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
     * Retrieve a recurring transfer
     */
    async transferRecurringGetRaw(requestParameters: TransferRecurringGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferRecurringGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferRecurringGetRequest',
                'Required parameter "transferRecurringGetRequest" was null or undefined when calling transferRecurringGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/recurring/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRecurringGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferRecurringGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
     * Retrieve a recurring transfer
     */
    async transferRecurringGet(requestParameters: TransferRecurringGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferRecurringGetResponse> {
        const response = await this.transferRecurringGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers. 
     * List recurring transfers
     */
    async transferRecurringListRaw(requestParameters: TransferRecurringListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferRecurringListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferRecurringListRequest',
                'Required parameter "transferRecurringListRequest" was null or undefined when calling transferRecurringList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/recurring/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRecurringListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferRecurringListResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers. 
     * List recurring transfers
     */
    async transferRecurringList(requestParameters: TransferRecurringListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferRecurringListResponse> {
        const response = await this.transferRecurringListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
     * Cancel a refund
     */
    async transferRefundCancelRaw(requestParameters: TransferRefundCancelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferRefundCancelResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferRefundCancelRequest',
                'Required parameter "transferRefundCancelRequest" was null or undefined when calling transferRefundCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/refund/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRefundCancelRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferRefundCancelResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
     * Cancel a refund
     */
    async transferRefundCancel(requestParameters: TransferRefundCancelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferRefundCancelResponse> {
        const response = await this.transferRefundCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
     * Create a refund
     */
    async transferRefundCreateRaw(requestParameters: TransferRefundCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferRefundCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferRefundCreateRequest',
                'Required parameter "transferRefundCreateRequest" was null or undefined when calling transferRefundCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/refund/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRefundCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferRefundCreateResponseFromJSON(jsonValue));
    }

    /**
     * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
     * Create a refund
     */
    async transferRefundCreate(requestParameters: TransferRefundCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferRefundCreateResponse> {
        const response = await this.transferRefundCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
     * Retrieve a refund
     */
    async transferRefundGetRaw(requestParameters: TransferRefundGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferRefundGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferRefundGetRequest',
                'Required parameter "transferRefundGetRequest" was null or undefined when calling transferRefundGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/refund/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRefundGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferRefundGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
     * Retrieve a refund
     */
    async transferRefundGet(requestParameters: TransferRefundGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferRefundGetResponse> {
        const response = await this.transferRefundGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
     * Lists historical repayments
     */
    async transferRepaymentListRaw(requestParameters: TransferRepaymentListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferRepaymentListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferRepaymentListRequest',
                'Required parameter "transferRepaymentListRequest" was null or undefined when calling transferRepaymentList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/repayment/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRepaymentListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferRepaymentListResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
     * Lists historical repayments
     */
    async transferRepaymentList(requestParameters: TransferRepaymentListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferRepaymentListResponse> {
        const response = await this.transferRepaymentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * List the returns included in a repayment
     */
    async transferRepaymentReturnListRaw(requestParameters: TransferRepaymentReturnListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferRepaymentReturnListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferRepaymentReturnListRequest',
                'Required parameter "transferRepaymentReturnListRequest" was null or undefined when calling transferRepaymentReturnList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/repayment/return/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRepaymentReturnListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferRepaymentReturnListResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * List the returns included in a repayment
     */
    async transferRepaymentReturnList(requestParameters: TransferRepaymentReturnListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferRepaymentReturnListResponse> {
        const response = await this.transferRepaymentReturnListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
     * Retrieve a sweep
     */
    async transferSweepGetRaw(requestParameters: TransferSweepGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferSweepGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferSweepGetRequest',
                'Required parameter "transferSweepGetRequest" was null or undefined when calling transferSweepGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/sweep/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferSweepGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferSweepGetResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
     * Retrieve a sweep
     */
    async transferSweepGet(requestParameters: TransferSweepGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferSweepGetResponse> {
        const response = await this.transferSweepGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
     * List sweeps
     */
    async transferSweepListRaw(requestParameters: TransferSweepListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferSweepListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'transferSweepListRequest',
                'Required parameter "transferSweepListRequest" was null or undefined when calling transferSweepList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/transfer/sweep/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferSweepListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferSweepListResponseFromJSON(jsonValue));
    }

    /**
     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
     * List sweeps
     */
    async transferSweepList(requestParameters: TransferSweepListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferSweepListResponse> {
        const response = await this.transferSweepListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
     * Create user
     */
    async userCreateRaw(requestParameters: UserCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'userCreateRequest',
                'Required parameter "userCreateRequest" was null or undefined when calling userCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/user/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCreateResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
     * Create user
     */
    async userCreate(requestParameters: UserCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCreateResponse> {
        const response = await this.userCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint is used to update user information associated with an existing `user_token`. The `user_token` should be in the response of `/user/create` call  If you call the endpoint with a non-exist `user_token`, the call will fail with an error message indicating that the user token is not found.
     * Update user information
     */
    async userUpdateRaw(requestParameters: UserUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'userUpdateRequest',
                'Required parameter "userUpdateRequest" was null or undefined when calling userUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/user/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserUpdateResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint is used to update user information associated with an existing `user_token`. The `user_token` should be in the response of `/user/create` call  If you call the endpoint with a non-exist `user_token`, the call will fail with an error message indicating that the user token is not found.
     * Update user information
     */
    async userUpdate(requestParameters: UserUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserUpdateResponse> {
        const response = await this.userUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an e-wallet. The response is the newly created e-wallet object.
     * Create an e-wallet
     */
    async walletCreateRaw(requestParameters: WalletCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'walletCreateRequest',
                'Required parameter "walletCreateRequest" was null or undefined when calling walletCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/wallet/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create an e-wallet. The response is the newly created e-wallet object.
     * Create an e-wallet
     */
    async walletCreate(requestParameters: WalletCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletCreateResponse> {
        const response = await this.walletCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch an e-wallet. The response includes the current balance.
     * Fetch an e-wallet
     */
    async walletGetRaw(requestParameters: WalletGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'walletGetRequest',
                'Required parameter "walletGetRequest" was null or undefined when calling walletGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/wallet/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletGetResponseFromJSON(jsonValue));
    }

    /**
     * Fetch an e-wallet. The response includes the current balance.
     * Fetch an e-wallet
     */
    async walletGet(requestParameters: WalletGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletGetResponse> {
        const response = await this.walletGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint lists all e-wallets in descending order of creation.
     * Fetch a list of e-wallets
     */
    async walletListRaw(requestParameters: WalletListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'walletListRequest',
                'Required parameter "walletListRequest" was null or undefined when calling walletList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/wallet/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletListResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint lists all e-wallets in descending order of creation.
     * Fetch a list of e-wallets
     */
    async walletList(requestParameters: WalletListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletListResponse> {
        const response = await this.walletListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
     * Execute a transaction using an e-wallet
     */
    async walletTransactionExecuteRaw(requestParameters: WalletTransactionExecuteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletTransactionExecuteResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'walletTransactionExecuteRequest',
                'Required parameter "walletTransactionExecuteRequest" was null or undefined when calling walletTransactionExecute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/wallet/transaction/execute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletTransactionExecuteRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletTransactionExecuteResponseFromJSON(jsonValue));
    }

    /**
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
     * Execute a transaction using an e-wallet
     */
    async walletTransactionExecute(requestParameters: WalletTransactionExecuteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletTransactionExecuteResponse> {
        const response = await this.walletTransactionExecuteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a specific e-wallet transaction
     * Fetch an e-wallet transaction
     */
    async walletTransactionGetRaw(requestParameters: WalletTransactionGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletTransactionGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'walletTransactionGetRequest',
                'Required parameter "walletTransactionGetRequest" was null or undefined when calling walletTransactionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/wallet/transaction/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletTransactionGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletTransactionGetResponseFromJSON(jsonValue));
    }

    /**
     * Fetch a specific e-wallet transaction
     * Fetch an e-wallet transaction
     */
    async walletTransactionGet(requestParameters: WalletTransactionGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletTransactionGetResponse> {
        const response = await this.walletTransactionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
     * List e-wallet transactions
     */
    async walletTransactionListRaw(requestParameters: WalletTransactionListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletTransactionListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'walletTransactionListRequest',
                'Required parameter "walletTransactionListRequest" was null or undefined when calling walletTransactionList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/wallet/transaction/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletTransactionListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletTransactionListResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
     * List e-wallet transactions
     */
    async walletTransactionList(requestParameters: WalletTransactionListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletTransactionListResponse> {
        const response = await this.walletTransactionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * Create a watchlist screening for an entity
     */
    async watchlistScreeningEntityCreateRaw(requestParameters: WatchlistScreeningEntityCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityCreateRequest',
                'Required parameter "watchlistScreeningEntityCreateRequest" was null or undefined when calling watchlistScreeningEntityCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * Create a watchlist screening for an entity
     */
    async watchlistScreeningEntityCreate(requestParameters: WatchlistScreeningEntityCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityCreateResponse> {
        const response = await this.watchlistScreeningEntityCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an entity watchlist screening.
     * Get an entity screening
     */
    async watchlistScreeningEntityGetRaw(requestParameters: WatchlistScreeningEntityGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityGetRequest',
                'Required parameter "watchlistScreeningEntityGetRequest" was null or undefined when calling watchlistScreeningEntityGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityGetResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve an entity watchlist screening.
     * Get an entity screening
     */
    async watchlistScreeningEntityGet(requestParameters: WatchlistScreeningEntityGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityGetResponse> {
        const response = await this.watchlistScreeningEntityGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * List history for entity watchlist screenings
     */
    async watchlistScreeningEntityHistoryListRaw(requestParameters: WatchlistScreeningEntityHistoryListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityHistoryListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityHistoryListRequest',
                'Required parameter "watchlistScreeningEntityHistoryListRequest" was null or undefined when calling watchlistScreeningEntityHistoryList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/history/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityHistoryListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityHistoryListResponseFromJSON(jsonValue));
    }

    /**
     * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * List history for entity watchlist screenings
     */
    async watchlistScreeningEntityHistoryList(requestParameters: WatchlistScreeningEntityHistoryListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityHistoryListResponse> {
        const response = await this.watchlistScreeningEntityHistoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all hits for the entity watchlist screening.
     * List hits for entity watchlist screenings
     */
    async watchlistScreeningEntityHitListRaw(requestParameters: WatchlistScreeningEntityHitListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityHitListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityHitListRequest',
                'Required parameter "watchlistScreeningEntityHitListRequest" was null or undefined when calling watchlistScreeningEntityHitList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/hit/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityHitListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityHitListResponseFromJSON(jsonValue));
    }

    /**
     * List all hits for the entity watchlist screening.
     * List hits for entity watchlist screenings
     */
    async watchlistScreeningEntityHitList(requestParameters: WatchlistScreeningEntityHitListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityHitListResponse> {
        const response = await this.watchlistScreeningEntityHitListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all entity screenings.
     * List entity watchlist screenings
     */
    async watchlistScreeningEntityListRaw(requestParameters: WatchlistScreeningEntityListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityListRequest',
                'Required parameter "watchlistScreeningEntityListRequest" was null or undefined when calling watchlistScreeningEntityList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityListResponseFromJSON(jsonValue));
    }

    /**
     * List all entity screenings.
     * List entity watchlist screenings
     */
    async watchlistScreeningEntityList(requestParameters: WatchlistScreeningEntityListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityListResponse> {
        const response = await this.watchlistScreeningEntityListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an entity watchlist screening program
     * Get entity watchlist screening program
     */
    async watchlistScreeningEntityProgramGetRaw(requestParameters: WatchlistScreeningEntityProgramGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityProgramGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityProgramGetRequest',
                'Required parameter "watchlistScreeningEntityProgramGetRequest" was null or undefined when calling watchlistScreeningEntityProgramGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/program/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityProgramGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityProgramGetResponseFromJSON(jsonValue));
    }

    /**
     * Get an entity watchlist screening program
     * Get entity watchlist screening program
     */
    async watchlistScreeningEntityProgramGet(requestParameters: WatchlistScreeningEntityProgramGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityProgramGetResponse> {
        const response = await this.watchlistScreeningEntityProgramGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all entity watchlist screening programs
     * List entity watchlist screening programs
     */
    async watchlistScreeningEntityProgramListRaw(requestParameters: WatchlistScreeningEntityProgramListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityProgramListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityProgramListRequest',
                'Required parameter "watchlistScreeningEntityProgramListRequest" was null or undefined when calling watchlistScreeningEntityProgramList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/program/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityProgramListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityProgramListResponseFromJSON(jsonValue));
    }

    /**
     * List all entity watchlist screening programs
     * List entity watchlist screening programs
     */
    async watchlistScreeningEntityProgramList(requestParameters: WatchlistScreeningEntityProgramListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityProgramListResponse> {
        const response = await this.watchlistScreeningEntityProgramListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * Create a review for an entity watchlist screening
     */
    async watchlistScreeningEntityReviewCreateRaw(requestParameters: WatchlistScreeningEntityReviewCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityReviewCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityReviewCreateRequest',
                'Required parameter "watchlistScreeningEntityReviewCreateRequest" was null or undefined when calling watchlistScreeningEntityReviewCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/review/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityReviewCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityReviewCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * Create a review for an entity watchlist screening
     */
    async watchlistScreeningEntityReviewCreate(requestParameters: WatchlistScreeningEntityReviewCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityReviewCreateResponse> {
        const response = await this.watchlistScreeningEntityReviewCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * List reviews for entity watchlist screenings
     */
    async watchlistScreeningEntityReviewListRaw(requestParameters: WatchlistScreeningEntityReviewListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityReviewListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityReviewListRequest',
                'Required parameter "watchlistScreeningEntityReviewListRequest" was null or undefined when calling watchlistScreeningEntityReviewList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/review/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityReviewListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityReviewListResponseFromJSON(jsonValue));
    }

    /**
     * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * List reviews for entity watchlist screenings
     */
    async watchlistScreeningEntityReviewList(requestParameters: WatchlistScreeningEntityReviewListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityReviewListResponse> {
        const response = await this.watchlistScreeningEntityReviewListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an entity watchlist screening.
     * Update an entity screening
     */
    async watchlistScreeningEntityUpdateRaw(requestParameters: WatchlistScreeningEntityUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningEntityUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningEntityUpdateRequest',
                'Required parameter "watchlistScreeningEntityUpdateRequest" was null or undefined when calling watchlistScreeningEntityUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/entity/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningEntityUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningEntityUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update an entity watchlist screening.
     * Update an entity screening
     */
    async watchlistScreeningEntityUpdate(requestParameters: WatchlistScreeningEntityUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningEntityUpdateResponse> {
        const response = await this.watchlistScreeningEntityUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * Create a watchlist screening for a person
     */
    async watchlistScreeningIndividualCreateRaw(requestParameters: WatchlistScreeningIndividualCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualCreateRequest',
                'Required parameter "watchlistScreeningIndividualCreateRequest" was null or undefined when calling watchlistScreeningIndividualCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * Create a watchlist screening for a person
     */
    async watchlistScreeningIndividualCreate(requestParameters: WatchlistScreeningIndividualCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualCreateResponse> {
        const response = await this.watchlistScreeningIndividualCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a previously created individual watchlist screening
     * Retrieve an individual watchlist screening
     */
    async watchlistScreeningIndividualGetRaw(requestParameters: WatchlistScreeningIndividualGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualGetRequest',
                'Required parameter "watchlistScreeningIndividualGetRequest" was null or undefined when calling watchlistScreeningIndividualGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualGetResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a previously created individual watchlist screening
     * Retrieve an individual watchlist screening
     */
    async watchlistScreeningIndividualGet(requestParameters: WatchlistScreeningIndividualGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualGetResponse> {
        const response = await this.watchlistScreeningIndividualGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * List history for individual watchlist screenings
     */
    async watchlistScreeningIndividualHistoryListRaw(requestParameters: WatchlistScreeningIndividualHistoryListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualHistoryListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualHistoryListRequest',
                'Required parameter "watchlistScreeningIndividualHistoryListRequest" was null or undefined when calling watchlistScreeningIndividualHistoryList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/history/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualHistoryListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualHistoryListResponseFromJSON(jsonValue));
    }

    /**
     * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * List history for individual watchlist screenings
     */
    async watchlistScreeningIndividualHistoryList(requestParameters: WatchlistScreeningIndividualHistoryListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualHistoryListResponse> {
        const response = await this.watchlistScreeningIndividualHistoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all hits found by Plaid for a particular individual watchlist screening.
     * List hits for individual watchlist screening
     */
    async watchlistScreeningIndividualHitListRaw(requestParameters: WatchlistScreeningIndividualHitListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualHitListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualHitListRequest',
                'Required parameter "watchlistScreeningIndividualHitListRequest" was null or undefined when calling watchlistScreeningIndividualHitList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/hit/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualHitListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualHitListResponseFromJSON(jsonValue));
    }

    /**
     * List all hits found by Plaid for a particular individual watchlist screening.
     * List hits for individual watchlist screening
     */
    async watchlistScreeningIndividualHitList(requestParameters: WatchlistScreeningIndividualHitListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualHitListResponse> {
        const response = await this.watchlistScreeningIndividualHitListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List previously created watchlist screenings for individuals
     * List Individual Watchlist Screenings
     */
    async watchlistScreeningIndividualListRaw(requestParameters: WatchlistScreeningIndividualListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualListRequest',
                'Required parameter "watchlistScreeningIndividualListRequest" was null or undefined when calling watchlistScreeningIndividualList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualListResponseFromJSON(jsonValue));
    }

    /**
     * List previously created watchlist screenings for individuals
     * List Individual Watchlist Screenings
     */
    async watchlistScreeningIndividualList(requestParameters: WatchlistScreeningIndividualListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualListResponse> {
        const response = await this.watchlistScreeningIndividualListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual watchlist screening program
     * Get individual watchlist screening program
     */
    async watchlistScreeningIndividualProgramGetRaw(requestParameters: WatchlistScreeningIndividualProgramGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualProgramGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualProgramGetRequest',
                'Required parameter "watchlistScreeningIndividualProgramGetRequest" was null or undefined when calling watchlistScreeningIndividualProgramGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/program/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualProgramGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualProgramGetResponseFromJSON(jsonValue));
    }

    /**
     * Get an individual watchlist screening program
     * Get individual watchlist screening program
     */
    async watchlistScreeningIndividualProgramGet(requestParameters: WatchlistScreeningIndividualProgramGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualProgramGetResponse> {
        const response = await this.watchlistScreeningIndividualProgramGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all individual watchlist screening programs
     * List individual watchlist screening programs
     */
    async watchlistScreeningIndividualProgramListRaw(requestParameters: WatchlistScreeningIndividualProgramListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualProgramListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualProgramListRequest',
                'Required parameter "watchlistScreeningIndividualProgramListRequest" was null or undefined when calling watchlistScreeningIndividualProgramList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/program/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualProgramListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualProgramListResponseFromJSON(jsonValue));
    }

    /**
     * List all individual watchlist screening programs
     * List individual watchlist screening programs
     */
    async watchlistScreeningIndividualProgramList(requestParameters: WatchlistScreeningIndividualProgramListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualProgramListResponse> {
        const response = await this.watchlistScreeningIndividualProgramListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * Create a review for an individual watchlist screening
     */
    async watchlistScreeningIndividualReviewCreateRaw(requestParameters: WatchlistScreeningIndividualReviewCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualReviewCreateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualReviewCreateRequest',
                'Required parameter "watchlistScreeningIndividualReviewCreateRequest" was null or undefined when calling watchlistScreeningIndividualReviewCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/review/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualReviewCreateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualReviewCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * Create a review for an individual watchlist screening
     */
    async watchlistScreeningIndividualReviewCreate(requestParameters: WatchlistScreeningIndividualReviewCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualReviewCreateResponse> {
        const response = await this.watchlistScreeningIndividualReviewCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all reviews for the individual watchlist screening.
     * List reviews for individual watchlist screenings
     */
    async watchlistScreeningIndividualReviewListRaw(requestParameters: WatchlistScreeningIndividualReviewListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualReviewListResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualReviewListRequest',
                'Required parameter "watchlistScreeningIndividualReviewListRequest" was null or undefined when calling watchlistScreeningIndividualReviewList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/review/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualReviewListRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualReviewListResponseFromJSON(jsonValue));
    }

    /**
     * List all reviews for the individual watchlist screening.
     * List reviews for individual watchlist screenings
     */
    async watchlistScreeningIndividualReviewList(requestParameters: WatchlistScreeningIndividualReviewListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualReviewListResponse> {
        const response = await this.watchlistScreeningIndividualReviewListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
     * Update individual watchlist screening
     */
    async watchlistScreeningIndividualUpdateRaw(requestParameters: WatchlistScreeningIndividualUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistScreeningIndividualUpdateResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'watchlistScreeningIndividualUpdateRequest',
                'Required parameter "watchlistScreeningIndividualUpdateRequest" was null or undefined when calling watchlistScreeningIndividualUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/watchlist_screening/individual/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WatchlistScreeningIndividualUpdateRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistScreeningIndividualUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
     * Update individual watchlist screening
     */
    async watchlistScreeningIndividualUpdate(requestParameters: WatchlistScreeningIndividualUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistScreeningIndividualUpdateResponse> {
        const response = await this.watchlistScreeningIndividualUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * Get webhook verification key
     */
    async webhookVerificationKeyGetRaw(requestParameters: WebhookVerificationKeyGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookVerificationKeyGetResponse>> {
        if (requestParameters == null) {
            throw new runtime.RequiredError(
                'webhookVerificationKeyGetRequest',
                'Required parameter "webhookVerificationKeyGetRequest" was null or undefined when calling webhookVerificationKeyGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-CLIENT-ID"] = await this.configuration.apiKey("PLAID-CLIENT-ID"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Plaid-Version"] = await this.configuration.apiKey("Plaid-Version"); // plaidVersion authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["PLAID-SECRET"] = await this.configuration.apiKey("PLAID-SECRET"); // secret authentication
        }

        const response = await this.request({
            path: `/webhook_verification_key/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookVerificationKeyGetRequestToJSON(requestParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookVerificationKeyGetResponseFromJSON(jsonValue));
    }

    /**
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * Get webhook verification key
     */
    async webhookVerificationKeyGet(requestParameters: WebhookVerificationKeyGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookVerificationKeyGetResponse> {
        const response = await this.webhookVerificationKeyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
