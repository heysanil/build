/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActionState } from './ActionState';
import {
    ActionStateFromJSON,
    ActionStateFromJSONTyped,
    ActionStateToJSON,
} from './ActionState';
import type { ActivityType } from './ActivityType';
import {
    ActivityTypeFromJSON,
    ActivityTypeFromJSONTyped,
    ActivityTypeToJSON,
} from './ActivityType';
import type { ScopesNullable } from './ScopesNullable';
import {
    ScopesNullableFromJSON,
    ScopesNullableFromJSONTyped,
    ScopesNullableToJSON,
} from './ScopesNullable';

/**
 * Describes a consent activity.
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {ActivityType}
     * @memberof Activity
     */
    activity: ActivityType;
    /**
     * The date this activity was initiated [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
     * @type {Date}
     * @memberof Activity
     */
    initiated_date: Date;
    /**
     * A unique identifier for the activity
     * @type {string}
     * @memberof Activity
     */
    id: string;
    /**
     * Application ID of the client who initiated the activity.
     * @type {string}
     * @memberof Activity
     */
    initiator: string;
    /**
     * 
     * @type {ActionState}
     * @memberof Activity
     */
    state: ActionState;
    /**
     * This field will map to the application ID that is returned from /item/application/list, or provided to the institution in an oauth redirect.
     * @type {string}
     * @memberof Activity
     */
    target_application_id?: string;
    /**
     * 
     * @type {ScopesNullable}
     * @memberof Activity
     */
    scopes?: ScopesNullable;
}

/**
 * Check if a given object implements the Activity interface.
 */
export function instanceOfActivity(value: object): boolean {
    if (!('activity' in value)) return false;
    if (!('initiated_date' in value)) return false;
    if (!('id' in value)) return false;
    if (!('initiator' in value)) return false;
    if (!('state' in value)) return false;
    return true;
}

export function ActivityFromJSON(json: any): Activity {
    return ActivityFromJSONTyped(json, false);
}

export function ActivityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Activity {
    if (json == null) {
        return json;
    }
    return {
        
        'activity': ActivityTypeFromJSON(json['activity']),
        'initiated_date': (new Date(json['initiated_date'])),
        'id': json['id'],
        'initiator': json['initiator'],
        'state': ActionStateFromJSON(json['state']),
        'target_application_id': json['target_application_id'] == null ? undefined : json['target_application_id'],
        'scopes': json['scopes'] == null ? undefined : ScopesNullableFromJSON(json['scopes']),
    };
}

export function ActivityToJSON(value?: Activity | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'activity': ActivityTypeToJSON(value['activity']),
        'initiated_date': ((value['initiated_date']).toISOString().substring(0,10)),
        'id': value['id'],
        'initiator': value['initiator'],
        'state': ActionStateToJSON(value['state']),
        'target_application_id': value['target_application_id'],
        'scopes': ScopesNullableToJSON(value['scopes']),
    };
}

