/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ACHClass } from './ACHClass';
import {
    ACHClassFromJSON,
    ACHClassFromJSONTyped,
    ACHClassToJSON,
} from './ACHClass';
import type { BankTransferDirection } from './BankTransferDirection';
import {
    BankTransferDirectionFromJSON,
    BankTransferDirectionFromJSONTyped,
    BankTransferDirectionToJSON,
} from './BankTransferDirection';
import type { BankTransferFailure } from './BankTransferFailure';
import {
    BankTransferFailureFromJSON,
    BankTransferFailureFromJSONTyped,
    BankTransferFailureToJSON,
} from './BankTransferFailure';
import type { BankTransferNetwork } from './BankTransferNetwork';
import {
    BankTransferNetworkFromJSON,
    BankTransferNetworkFromJSONTyped,
    BankTransferNetworkToJSON,
} from './BankTransferNetwork';
import type { BankTransferStatus } from './BankTransferStatus';
import {
    BankTransferStatusFromJSON,
    BankTransferStatusFromJSONTyped,
    BankTransferStatusToJSON,
} from './BankTransferStatus';
import type { BankTransferType } from './BankTransferType';
import {
    BankTransferTypeFromJSON,
    BankTransferTypeFromJSONTyped,
    BankTransferTypeToJSON,
} from './BankTransferType';
import type { BankTransferUser } from './BankTransferUser';
import {
    BankTransferUserFromJSON,
    BankTransferUserFromJSONTyped,
    BankTransferUserToJSON,
} from './BankTransferUser';

/**
 * Represents a bank transfer within the Bank Transfers API.
 * @export
 * @interface BankTransfer
 */
export interface BankTransfer {
    [key: string]: any | any;
    /**
     * Plaid’s unique identifier for a bank transfer.
     * @type {string}
     * @memberof BankTransfer
     */
    id: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof BankTransfer
     */
    ach_class: ACHClass;
    /**
     * The account ID that should be credited/debited for this bank transfer.
     * @type {string}
     * @memberof BankTransfer
     */
    account_id: string;
    /**
     * 
     * @type {BankTransferType}
     * @memberof BankTransfer
     */
    type: BankTransferType;
    /**
     * 
     * @type {BankTransferUser}
     * @memberof BankTransfer
     */
    user: BankTransferUser;
    /**
     * The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
     * @type {string}
     * @memberof BankTransfer
     */
    amount: string;
    /**
     * The currency of the transfer amount, e.g. "USD"
     * @type {string}
     * @memberof BankTransfer
     */
    iso_currency_code: string;
    /**
     * The description of the transfer.
     * @type {string}
     * @memberof BankTransfer
     */
    description: string;
    /**
     * The datetime when this bank transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     * @type {Date}
     * @memberof BankTransfer
     */
    created: Date;
    /**
     * 
     * @type {BankTransferStatus}
     * @memberof BankTransfer
     */
    status: BankTransferStatus;
    /**
     * 
     * @type {BankTransferNetwork}
     * @memberof BankTransfer
     */
    network: BankTransferNetwork;
    /**
     * When `true`, you can still cancel this bank transfer.
     * @type {boolean}
     * @memberof BankTransfer
     */
    cancellable: boolean;
    /**
     * 
     * @type {BankTransferFailure}
     * @memberof BankTransfer
     */
    failure_reason: BankTransferFailure | null;
    /**
     * A string containing the custom tag provided by the client in the create request. Will be null if not provided.
     * @type {string}
     * @memberof BankTransfer
     */
    custom_tag: string | null;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * The JSON values must be Strings (no nested JSON objects allowed)
     * Only ASCII characters may be used
     * Maximum of 50 key/value pairs
     * Maximum key length of 40 characters
     * Maximum value length of 500 characters
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BankTransfer
     */
    metadata: { [key: string]: string; } | null;
    /**
     * Plaid’s unique identifier for the origination account that was used for this transfer.
     * @type {string}
     * @memberof BankTransfer
     */
    origination_account_id: string;
    /**
     * 
     * @type {BankTransferDirection}
     * @memberof BankTransfer
     */
    direction: BankTransferDirection | null;
}

/**
 * Check if a given object implements the BankTransfer interface.
 */
export function instanceOfBankTransfer(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('ach_class' in value)) return false;
    if (!('account_id' in value)) return false;
    if (!('type' in value)) return false;
    if (!('user' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('iso_currency_code' in value)) return false;
    if (!('description' in value)) return false;
    if (!('created' in value)) return false;
    if (!('status' in value)) return false;
    if (!('network' in value)) return false;
    if (!('cancellable' in value)) return false;
    if (!('failure_reason' in value)) return false;
    if (!('custom_tag' in value)) return false;
    if (!('metadata' in value)) return false;
    if (!('origination_account_id' in value)) return false;
    if (!('direction' in value)) return false;
    return true;
}

export function BankTransferFromJSON(json: any): BankTransfer {
    return BankTransferFromJSONTyped(json, false);
}

export function BankTransferFromJSONTyped(json: any, ignoreDiscriminator: boolean): BankTransfer {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'ach_class': ACHClassFromJSON(json['ach_class']),
        'account_id': json['account_id'],
        'type': BankTransferTypeFromJSON(json['type']),
        'user': BankTransferUserFromJSON(json['user']),
        'amount': json['amount'],
        'iso_currency_code': json['iso_currency_code'],
        'description': json['description'],
        'created': (new Date(json['created'])),
        'status': BankTransferStatusFromJSON(json['status']),
        'network': BankTransferNetworkFromJSON(json['network']),
        'cancellable': json['cancellable'],
        'failure_reason': BankTransferFailureFromJSON(json['failure_reason']),
        'custom_tag': json['custom_tag'],
        'metadata': json['metadata'],
        'origination_account_id': json['origination_account_id'],
        'direction': BankTransferDirectionFromJSON(json['direction']),
    };
}

export function BankTransferToJSON(value?: BankTransfer | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'id': value['id'],
        'ach_class': ACHClassToJSON(value['ach_class']),
        'account_id': value['account_id'],
        'type': BankTransferTypeToJSON(value['type']),
        'user': BankTransferUserToJSON(value['user']),
        'amount': value['amount'],
        'iso_currency_code': value['iso_currency_code'],
        'description': value['description'],
        'created': ((value['created']).toISOString()),
        'status': BankTransferStatusToJSON(value['status']),
        'network': BankTransferNetworkToJSON(value['network']),
        'cancellable': value['cancellable'],
        'failure_reason': BankTransferFailureToJSON(value['failure_reason']),
        'custom_tag': value['custom_tag'],
        'metadata': value['metadata'],
        'origination_account_id': value['origination_account_id'],
        'direction': BankTransferDirectionToJSON(value['direction']),
    };
}

