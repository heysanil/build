/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BankTransferDirection } from './BankTransferDirection';
import {
    BankTransferDirectionFromJSON,
    BankTransferDirectionFromJSONTyped,
    BankTransferDirectionToJSON,
} from './BankTransferDirection';
import type { BankTransferEventType } from './BankTransferEventType';
import {
    BankTransferEventTypeFromJSON,
    BankTransferEventTypeFromJSONTyped,
    BankTransferEventTypeToJSON,
} from './BankTransferEventType';
import type { BankTransferFailure } from './BankTransferFailure';
import {
    BankTransferFailureFromJSON,
    BankTransferFailureFromJSONTyped,
    BankTransferFailureToJSON,
} from './BankTransferFailure';
import type { BankTransferType } from './BankTransferType';
import {
    BankTransferTypeFromJSON,
    BankTransferTypeFromJSONTyped,
    BankTransferTypeToJSON,
} from './BankTransferType';

/**
 * Represents an event in the Bank Transfers API.
 * @export
 * @interface BankTransferEvent
 */
export interface BankTransferEvent {
    [key: string]: any | any;
    /**
     * Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
     * @type {number}
     * @memberof BankTransferEvent
     */
    event_id: number;
    /**
     * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
     * @type {Date}
     * @memberof BankTransferEvent
     */
    timestamp: Date;
    /**
     * 
     * @type {BankTransferEventType}
     * @memberof BankTransferEvent
     */
    event_type: BankTransferEventType;
    /**
     * The account ID associated with the bank transfer.
     * @type {string}
     * @memberof BankTransferEvent
     */
    account_id: string;
    /**
     * Plaid’s unique identifier for a bank transfer.
     * @type {string}
     * @memberof BankTransferEvent
     */
    bank_transfer_id: string;
    /**
     * The ID of the origination account that this balance belongs to.
     * @type {string}
     * @memberof BankTransferEvent
     */
    origination_account_id: string | null;
    /**
     * 
     * @type {BankTransferType}
     * @memberof BankTransferEvent
     */
    bank_transfer_type: BankTransferType;
    /**
     * The bank transfer amount.
     * @type {string}
     * @memberof BankTransferEvent
     */
    bank_transfer_amount: string;
    /**
     * The currency of the bank transfer amount.
     * @type {string}
     * @memberof BankTransferEvent
     */
    bank_transfer_iso_currency_code: string;
    /**
     * 
     * @type {BankTransferFailure}
     * @memberof BankTransferEvent
     */
    failure_reason: BankTransferFailure | null;
    /**
     * 
     * @type {BankTransferDirection}
     * @memberof BankTransferEvent
     */
    direction: BankTransferDirection | null;
}

/**
 * Check if a given object implements the BankTransferEvent interface.
 */
export function instanceOfBankTransferEvent(value: object): boolean {
    if (!('event_id' in value)) return false;
    if (!('timestamp' in value)) return false;
    if (!('event_type' in value)) return false;
    if (!('account_id' in value)) return false;
    if (!('bank_transfer_id' in value)) return false;
    if (!('origination_account_id' in value)) return false;
    if (!('bank_transfer_type' in value)) return false;
    if (!('bank_transfer_amount' in value)) return false;
    if (!('bank_transfer_iso_currency_code' in value)) return false;
    if (!('failure_reason' in value)) return false;
    if (!('direction' in value)) return false;
    return true;
}

export function BankTransferEventFromJSON(json: any): BankTransferEvent {
    return BankTransferEventFromJSONTyped(json, false);
}

export function BankTransferEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): BankTransferEvent {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'event_id': json['event_id'],
        'timestamp': (new Date(json['timestamp'])),
        'event_type': BankTransferEventTypeFromJSON(json['event_type']),
        'account_id': json['account_id'],
        'bank_transfer_id': json['bank_transfer_id'],
        'origination_account_id': json['origination_account_id'],
        'bank_transfer_type': BankTransferTypeFromJSON(json['bank_transfer_type']),
        'bank_transfer_amount': json['bank_transfer_amount'],
        'bank_transfer_iso_currency_code': json['bank_transfer_iso_currency_code'],
        'failure_reason': BankTransferFailureFromJSON(json['failure_reason']),
        'direction': BankTransferDirectionFromJSON(json['direction']),
    };
}

export function BankTransferEventToJSON(value?: BankTransferEvent | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'event_id': value['event_id'],
        'timestamp': ((value['timestamp']).toISOString()),
        'event_type': BankTransferEventTypeToJSON(value['event_type']),
        'account_id': value['account_id'],
        'bank_transfer_id': value['bank_transfer_id'],
        'origination_account_id': value['origination_account_id'],
        'bank_transfer_type': BankTransferTypeToJSON(value['bank_transfer_type']),
        'bank_transfer_amount': value['bank_transfer_amount'],
        'bank_transfer_iso_currency_code': value['bank_transfer_iso_currency_code'],
        'failure_reason': BankTransferFailureToJSON(value['failure_reason']),
        'direction': BankTransferDirectionToJSON(value['direction']),
    };
}

