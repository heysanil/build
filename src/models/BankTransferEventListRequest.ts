/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BankTransferEventListBankTransferType } from './BankTransferEventListBankTransferType';
import {
    BankTransferEventListBankTransferTypeFromJSON,
    BankTransferEventListBankTransferTypeFromJSONTyped,
    BankTransferEventListBankTransferTypeToJSON,
} from './BankTransferEventListBankTransferType';
import type { BankTransferEventListDirection } from './BankTransferEventListDirection';
import {
    BankTransferEventListDirectionFromJSON,
    BankTransferEventListDirectionFromJSONTyped,
    BankTransferEventListDirectionToJSON,
} from './BankTransferEventListDirection';
import type { BankTransferEventType } from './BankTransferEventType';
import {
    BankTransferEventTypeFromJSON,
    BankTransferEventTypeFromJSONTyped,
    BankTransferEventTypeToJSON,
} from './BankTransferEventType';

/**
 * Defines the request schema for `/bank_transfer/event/list`
 * @export
 * @interface BankTransferEventListRequest
 */
export interface BankTransferEventListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    secret?: string;
    /**
     * The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {Date}
     * @memberof BankTransferEventListRequest
     */
    start_date?: Date;
    /**
     * The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {Date}
     * @memberof BankTransferEventListRequest
     */
    end_date?: Date;
    /**
     * Plaidâ€™s unique identifier for a bank transfer.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    bank_transfer_id?: string;
    /**
     * The account ID to get events for all transactions to/from an account.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    account_id?: string;
    /**
     * 
     * @type {BankTransferEventListBankTransferType}
     * @memberof BankTransferEventListRequest
     */
    bank_transfer_type?: BankTransferEventListBankTransferType;
    /**
     * Filter events by event type.
     * @type {Array<BankTransferEventType>}
     * @memberof BankTransferEventListRequest
     */
    event_types?: Array<BankTransferEventType>;
    /**
     * The maximum number of bank transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
     * @type {number}
     * @memberof BankTransferEventListRequest
     */
    count?: number;
    /**
     * The offset into the list of bank transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.
     * @type {number}
     * @memberof BankTransferEventListRequest
     */
    offset?: number;
    /**
     * The origination account ID to get events for transfers from a specific origination account.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    origination_account_id?: string;
    /**
     * 
     * @type {BankTransferEventListDirection}
     * @memberof BankTransferEventListRequest
     */
    direction?: BankTransferEventListDirection;
}

/**
 * Check if a given object implements the BankTransferEventListRequest interface.
 */
export function instanceOfBankTransferEventListRequest(value: object): boolean {
    return true;
}

export function BankTransferEventListRequestFromJSON(json: any): BankTransferEventListRequest {
    return BankTransferEventListRequestFromJSONTyped(json, false);
}

export function BankTransferEventListRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BankTransferEventListRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'start_date': json['start_date'] == null ? undefined : (new Date(json['start_date'])),
        'end_date': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'bank_transfer_id': json['bank_transfer_id'] == null ? undefined : json['bank_transfer_id'],
        'account_id': json['account_id'] == null ? undefined : json['account_id'],
        'bank_transfer_type': json['bank_transfer_type'] == null ? undefined : BankTransferEventListBankTransferTypeFromJSON(json['bank_transfer_type']),
        'event_types': json['event_types'] == null ? undefined : ((json['event_types'] as Array<any>).map(BankTransferEventTypeFromJSON)),
        'count': json['count'] == null ? undefined : json['count'],
        'offset': json['offset'] == null ? undefined : json['offset'],
        'origination_account_id': json['origination_account_id'] == null ? undefined : json['origination_account_id'],
        'direction': json['direction'] == null ? undefined : BankTransferEventListDirectionFromJSON(json['direction']),
    };
}

export function BankTransferEventListRequestToJSON(value?: BankTransferEventListRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'start_date': value['start_date'] == null ? undefined : ((value['start_date'] as any).toISOString()),
        'end_date': value['end_date'] == null ? undefined : ((value['end_date'] as any).toISOString()),
        'bank_transfer_id': value['bank_transfer_id'],
        'account_id': value['account_id'],
        'bank_transfer_type': BankTransferEventListBankTransferTypeToJSON(value['bank_transfer_type']),
        'event_types': value['event_types'] == null ? undefined : ((value['event_types'] as Array<any>).map(BankTransferEventTypeToJSON)),
        'count': value['count'],
        'offset': value['offset'],
        'origination_account_id': value['origination_account_id'],
        'direction': BankTransferEventListDirectionToJSON(value['direction']),
    };
}

