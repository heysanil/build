/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BankTransferDirection } from './BankTransferDirection';
import {
    BankTransferDirectionFromJSON,
    BankTransferDirectionFromJSONTyped,
    BankTransferDirectionToJSON,
} from './BankTransferDirection';

/**
 * Defines the request schema for `/bank_transfer/list`
 * @export
 * @interface BankTransferListRequest
 */
export interface BankTransferListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferListRequest
     */
    secret?: string;
    /**
     * The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {Date}
     * @memberof BankTransferListRequest
     */
    start_date?: Date;
    /**
     * The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {Date}
     * @memberof BankTransferListRequest
     */
    end_date?: Date;
    /**
     * The maximum number of bank transfers to return.
     * @type {number}
     * @memberof BankTransferListRequest
     */
    count?: number;
    /**
     * The number of bank transfers to skip before returning results.
     * @type {number}
     * @memberof BankTransferListRequest
     */
    offset?: number;
    /**
     * Filter bank transfers to only those originated through the specified origination account.
     * @type {string}
     * @memberof BankTransferListRequest
     */
    origination_account_id?: string;
    /**
     * 
     * @type {BankTransferDirection}
     * @memberof BankTransferListRequest
     */
    direction?: BankTransferDirection;
}

/**
 * Check if a given object implements the BankTransferListRequest interface.
 */
export function instanceOfBankTransferListRequest(value: object): boolean {
    return true;
}

export function BankTransferListRequestFromJSON(json: any): BankTransferListRequest {
    return BankTransferListRequestFromJSONTyped(json, false);
}

export function BankTransferListRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BankTransferListRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'start_date': json['start_date'] == null ? undefined : (new Date(json['start_date'])),
        'end_date': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'count': json['count'] == null ? undefined : json['count'],
        'offset': json['offset'] == null ? undefined : json['offset'],
        'origination_account_id': json['origination_account_id'] == null ? undefined : json['origination_account_id'],
        'direction': json['direction'] == null ? undefined : BankTransferDirectionFromJSON(json['direction']),
    };
}

export function BankTransferListRequestToJSON(value?: BankTransferListRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'start_date': value['start_date'] == null ? undefined : ((value['start_date'] as any).toISOString()),
        'end_date': value['end_date'] == null ? undefined : ((value['end_date'] as any).toISOString()),
        'count': value['count'],
        'offset': value['offset'],
        'origination_account_id': value['origination_account_id'],
        'direction': BankTransferDirectionToJSON(value['direction']),
    };
}

