/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * BankTransferSweepListRequest defines the request schema for `/bank_transfer/sweep/list`
 * @export
 * @interface BankTransferSweepListRequest
 */
export interface BankTransferSweepListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferSweepListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferSweepListRequest
     */
    secret?: string;
    /**
     * If multiple origination accounts are available, `origination_account_id` must be used to specify the account that the sweeps belong to.
     * @type {string}
     * @memberof BankTransferSweepListRequest
     */
    origination_account_id?: string;
    /**
     * The start datetime of sweeps to return (RFC 3339 format).
     * @type {Date}
     * @memberof BankTransferSweepListRequest
     */
    start_time?: Date;
    /**
     * The end datetime of sweeps to return (RFC 3339 format).
     * @type {Date}
     * @memberof BankTransferSweepListRequest
     */
    end_time?: Date;
    /**
     * The maximum number of sweeps to return.
     * @type {number}
     * @memberof BankTransferSweepListRequest
     */
    count?: number;
}

/**
 * Check if a given object implements the BankTransferSweepListRequest interface.
 */
export function instanceOfBankTransferSweepListRequest(value: object): boolean {
    return true;
}

export function BankTransferSweepListRequestFromJSON(json: any): BankTransferSweepListRequest {
    return BankTransferSweepListRequestFromJSONTyped(json, false);
}

export function BankTransferSweepListRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BankTransferSweepListRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'origination_account_id': json['origination_account_id'] == null ? undefined : json['origination_account_id'],
        'start_time': json['start_time'] == null ? undefined : (new Date(json['start_time'])),
        'end_time': json['end_time'] == null ? undefined : (new Date(json['end_time'])),
        'count': json['count'] == null ? undefined : json['count'],
    };
}

export function BankTransferSweepListRequestToJSON(value?: BankTransferSweepListRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'origination_account_id': value['origination_account_id'],
        'start_time': value['start_time'] == null ? undefined : ((value['start_time'] as any).toISOString()),
        'end_time': value['end_time'] == null ? undefined : ((value['end_time'] as any).toISOString()),
        'count': value['count'],
    };
}

