/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BeaconAccountRiskEvaluateEvaluationReason } from './BeaconAccountRiskEvaluateEvaluationReason';
import {
    BeaconAccountRiskEvaluateEvaluationReasonFromJSON,
    BeaconAccountRiskEvaluateEvaluationReasonFromJSONTyped,
    BeaconAccountRiskEvaluateEvaluationReasonToJSON,
} from './BeaconAccountRiskEvaluateEvaluationReason';
import type { BeaconAccountRiskEvaluateRequestOptions } from './BeaconAccountRiskEvaluateRequestOptions';
import {
    BeaconAccountRiskEvaluateRequestOptionsFromJSON,
    BeaconAccountRiskEvaluateRequestOptionsFromJSONTyped,
    BeaconAccountRiskEvaluateRequestOptionsToJSON,
} from './BeaconAccountRiskEvaluateRequestOptions';
import type { SignalDevice } from './SignalDevice';
import {
    SignalDeviceFromJSON,
    SignalDeviceFromJSONTyped,
    SignalDeviceToJSON,
} from './SignalDevice';

/**
 * BeaconAccountRiskEvaluateRequest defines the request schema for `/v1/beacon/account_risk/risk/evaluate`
 * @export
 * @interface BeaconAccountRiskEvaluateRequest
 */
export interface BeaconAccountRiskEvaluateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BeaconAccountRiskEvaluateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BeaconAccountRiskEvaluateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof BeaconAccountRiskEvaluateRequest
     */
    access_token?: string;
    /**
     * 
     * @type {BeaconAccountRiskEvaluateRequestOptions}
     * @memberof BeaconAccountRiskEvaluateRequest
     */
    options?: BeaconAccountRiskEvaluateRequestOptions;
    /**
     * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple evaluations and/or multiple linked accounts. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
     * @type {string}
     * @memberof BeaconAccountRiskEvaluateRequest
     */
    client_user_id?: string;
    /**
     * Unique identifier of what you are looking to evaluate (account add, information change, etc.) to allow us to tie the activity to the decisions and possible fraud outcome sent via our feedback endpoints. You can use your internal request ID or similar.
     * @type {string}
     * @memberof BeaconAccountRiskEvaluateRequest
     */
    client_evaluation_id?: string;
    /**
     * 
     * @type {BeaconAccountRiskEvaluateEvaluationReason}
     * @memberof BeaconAccountRiskEvaluateRequest
     */
    evaluation_reason?: BeaconAccountRiskEvaluateEvaluationReason;
    /**
     * 
     * @type {SignalDevice}
     * @memberof BeaconAccountRiskEvaluateRequest
     */
    device?: SignalDevice;
    /**
     * The time the event for evaluation has occurred. Populate this field for backfilling data. If you don’t populate this field, we’ll use the timestamp at the time of receipt. Use ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).
     * @type {string}
     * @memberof BeaconAccountRiskEvaluateRequest
     */
    evaluate_time?: string;
}

/**
 * Check if a given object implements the BeaconAccountRiskEvaluateRequest interface.
 */
export function instanceOfBeaconAccountRiskEvaluateRequest(value: object): boolean {
    return true;
}

export function BeaconAccountRiskEvaluateRequestFromJSON(json: any): BeaconAccountRiskEvaluateRequest {
    return BeaconAccountRiskEvaluateRequestFromJSONTyped(json, false);
}

export function BeaconAccountRiskEvaluateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BeaconAccountRiskEvaluateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'access_token': json['access_token'] == null ? undefined : json['access_token'],
        'options': json['options'] == null ? undefined : BeaconAccountRiskEvaluateRequestOptionsFromJSON(json['options']),
        'client_user_id': json['client_user_id'] == null ? undefined : json['client_user_id'],
        'client_evaluation_id': json['client_evaluation_id'] == null ? undefined : json['client_evaluation_id'],
        'evaluation_reason': json['evaluation_reason'] == null ? undefined : BeaconAccountRiskEvaluateEvaluationReasonFromJSON(json['evaluation_reason']),
        'device': json['device'] == null ? undefined : SignalDeviceFromJSON(json['device']),
        'evaluate_time': json['evaluate_time'] == null ? undefined : json['evaluate_time'],
    };
}

export function BeaconAccountRiskEvaluateRequestToJSON(value?: BeaconAccountRiskEvaluateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'access_token': value['access_token'],
        'options': BeaconAccountRiskEvaluateRequestOptionsToJSON(value['options']),
        'client_user_id': value['client_user_id'],
        'client_evaluation_id': value['client_evaluation_id'],
        'evaluation_reason': BeaconAccountRiskEvaluateEvaluationReasonToJSON(value['evaluation_reason']),
        'device': SignalDeviceToJSON(value['device']),
        'evaluate_time': value['evaluate_time'],
    };
}

