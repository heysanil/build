/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BeaconReportType } from './BeaconReportType';
import {
    BeaconReportTypeFromJSON,
    BeaconReportTypeFromJSONTyped,
    BeaconReportTypeToJSON,
} from './BeaconReportType';
import type { FraudAmount } from './FraudAmount';
import {
    FraudAmountFromJSON,
    FraudAmountFromJSONTyped,
    FraudAmountToJSON,
} from './FraudAmount';

/**
 * Request input for creating a Beacon Report
 * @export
 * @interface BeaconReportCreateRequest
 */
export interface BeaconReportCreateRequest {
    /**
     * ID of the associated Beacon User.
     * @type {string}
     * @memberof BeaconReportCreateRequest
     */
    beacon_user_id: string;
    /**
     * 
     * @type {BeaconReportType}
     * @memberof BeaconReportCreateRequest
     */
    type: BeaconReportType;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {Date}
     * @memberof BeaconReportCreateRequest
     */
    fraud_date: Date;
    /**
     * 
     * @type {FraudAmount}
     * @memberof BeaconReportCreateRequest
     */
    fraud_amount?: FraudAmount;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BeaconReportCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BeaconReportCreateRequest
     */
    secret?: string;
}

/**
 * Check if a given object implements the BeaconReportCreateRequest interface.
 */
export function instanceOfBeaconReportCreateRequest(value: object): boolean {
    if (!('beacon_user_id' in value)) return false;
    if (!('type' in value)) return false;
    if (!('fraud_date' in value)) return false;
    return true;
}

export function BeaconReportCreateRequestFromJSON(json: any): BeaconReportCreateRequest {
    return BeaconReportCreateRequestFromJSONTyped(json, false);
}

export function BeaconReportCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BeaconReportCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'beacon_user_id': json['beacon_user_id'],
        'type': BeaconReportTypeFromJSON(json['type']),
        'fraud_date': (new Date(json['fraud_date'])),
        'fraud_amount': json['fraud_amount'] == null ? undefined : FraudAmountFromJSON(json['fraud_amount']),
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
    };
}

export function BeaconReportCreateRequestToJSON(value?: BeaconReportCreateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'beacon_user_id': value['beacon_user_id'],
        'type': BeaconReportTypeToJSON(value['type']),
        'fraud_date': ((value['fraud_date']).toISOString().substring(0,10)),
        'fraud_amount': FraudAmountToJSON(value['fraud_amount']),
        'client_id': value['client_id'],
        'secret': value['secret'],
    };
}

