/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BeaconAuditTrail } from './BeaconAuditTrail';
import {
    BeaconAuditTrailFromJSON,
    BeaconAuditTrailFromJSONTyped,
    BeaconAuditTrailToJSON,
} from './BeaconAuditTrail';
import type { BeaconReportType } from './BeaconReportType';
import {
    BeaconReportTypeFromJSON,
    BeaconReportTypeFromJSONTyped,
    BeaconReportTypeToJSON,
} from './BeaconReportType';
import type { FraudAmount } from './FraudAmount';
import {
    FraudAmountFromJSON,
    FraudAmountFromJSONTyped,
    FraudAmountToJSON,
} from './FraudAmount';

/**
 * A Beacon Report describes the type of fraud committed by a user as well as the date the fraud was committed and the total amount of money lost due to the fraud incident.
 * 
 * This information is used to block similar fraud attempts on your platform as well as alert other companies who screen a user with matching identity information.
 * Other companies will not receive any new identity information, just what matched, plus information such as industry, type of fraud, and date of fraud.
 * 
 * You can manage your fraud reports by adding, deleting, or editing reports as you get additional information on fraudulent users.
 * @export
 * @interface BeaconReportGetResponse
 */
export interface BeaconReportGetResponse {
    [key: string]: any | any;
    /**
     * ID of the associated Beacon Report.
     * @type {string}
     * @memberof BeaconReportGetResponse
     */
    id: string;
    /**
     * ID of the associated Beacon User.
     * @type {string}
     * @memberof BeaconReportGetResponse
     */
    beacon_user_id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {Date}
     * @memberof BeaconReportGetResponse
     */
    created_at: Date;
    /**
     * 
     * @type {BeaconReportType}
     * @memberof BeaconReportGetResponse
     */
    type: BeaconReportType;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {Date}
     * @memberof BeaconReportGetResponse
     */
    fraud_date: Date;
    /**
     * 
     * @type {FraudAmount}
     * @memberof BeaconReportGetResponse
     */
    fraud_amount: FraudAmount | null;
    /**
     * 
     * @type {BeaconAuditTrail}
     * @memberof BeaconReportGetResponse
     */
    audit_trail: BeaconAuditTrail;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BeaconReportGetResponse
     */
    request_id: string;
}

/**
 * Check if a given object implements the BeaconReportGetResponse interface.
 */
export function instanceOfBeaconReportGetResponse(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('beacon_user_id' in value)) return false;
    if (!('created_at' in value)) return false;
    if (!('type' in value)) return false;
    if (!('fraud_date' in value)) return false;
    if (!('fraud_amount' in value)) return false;
    if (!('audit_trail' in value)) return false;
    if (!('request_id' in value)) return false;
    return true;
}

export function BeaconReportGetResponseFromJSON(json: any): BeaconReportGetResponse {
    return BeaconReportGetResponseFromJSONTyped(json, false);
}

export function BeaconReportGetResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BeaconReportGetResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'beacon_user_id': json['beacon_user_id'],
        'created_at': (new Date(json['created_at'])),
        'type': BeaconReportTypeFromJSON(json['type']),
        'fraud_date': (new Date(json['fraud_date'])),
        'fraud_amount': FraudAmountFromJSON(json['fraud_amount']),
        'audit_trail': BeaconAuditTrailFromJSON(json['audit_trail']),
        'request_id': json['request_id'],
    };
}

export function BeaconReportGetResponseToJSON(value?: BeaconReportGetResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'id': value['id'],
        'beacon_user_id': value['beacon_user_id'],
        'created_at': ((value['created_at']).toISOString()),
        'type': BeaconReportTypeToJSON(value['type']),
        'fraud_date': ((value['fraud_date']).toISOString().substring(0,10)),
        'fraud_amount': FraudAmountToJSON(value['fraud_amount']),
        'audit_trail': BeaconAuditTrailToJSON(value['audit_trail']),
        'request_id': value['request_id'],
    };
}

