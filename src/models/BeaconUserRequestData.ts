/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BeaconUserIDNumber } from './BeaconUserIDNumber';
import {
    BeaconUserIDNumberFromJSON,
    BeaconUserIDNumberFromJSONTyped,
    BeaconUserIDNumberToJSON,
} from './BeaconUserIDNumber';
import type { BeaconUserName } from './BeaconUserName';
import {
    BeaconUserNameFromJSON,
    BeaconUserNameFromJSONTyped,
    BeaconUserNameToJSON,
} from './BeaconUserName';
import type { BeaconUserRequestAddress } from './BeaconUserRequestAddress';
import {
    BeaconUserRequestAddressFromJSON,
    BeaconUserRequestAddressFromJSONTyped,
    BeaconUserRequestAddressToJSON,
} from './BeaconUserRequestAddress';

/**
 * A Beacon User's data which is used to check against duplicate records and the Beacon Fraud Network.
 * @export
 * @interface BeaconUserRequestData
 */
export interface BeaconUserRequestData {
    [key: string]: any | any;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {Date}
     * @memberof BeaconUserRequestData
     */
    date_of_birth: Date;
    /**
     * 
     * @type {BeaconUserName}
     * @memberof BeaconUserRequestData
     */
    name: BeaconUserName;
    /**
     * 
     * @type {BeaconUserRequestAddress}
     * @memberof BeaconUserRequestData
     */
    address?: BeaconUserRequestAddress;
    /**
     * A valid email address.
     * @type {string}
     * @memberof BeaconUserRequestData
     */
    email_address?: string;
    /**
     * A phone number in E.164 format.
     * @type {string}
     * @memberof BeaconUserRequestData
     */
    phone_number?: string;
    /**
     * 
     * @type {BeaconUserIDNumber}
     * @memberof BeaconUserRequestData
     */
    id_number?: BeaconUserIDNumber;
    /**
     * An IPv4 or IPV6 address.
     * @type {string}
     * @memberof BeaconUserRequestData
     */
    ip_address?: string;
}

/**
 * Check if a given object implements the BeaconUserRequestData interface.
 */
export function instanceOfBeaconUserRequestData(value: object): boolean {
    if (!('date_of_birth' in value)) return false;
    if (!('name' in value)) return false;
    return true;
}

export function BeaconUserRequestDataFromJSON(json: any): BeaconUserRequestData {
    return BeaconUserRequestDataFromJSONTyped(json, false);
}

export function BeaconUserRequestDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): BeaconUserRequestData {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'date_of_birth': (new Date(json['date_of_birth'])),
        'name': BeaconUserNameFromJSON(json['name']),
        'address': json['address'] == null ? undefined : BeaconUserRequestAddressFromJSON(json['address']),
        'email_address': json['email_address'] == null ? undefined : json['email_address'],
        'phone_number': json['phone_number'] == null ? undefined : json['phone_number'],
        'id_number': json['id_number'] == null ? undefined : BeaconUserIDNumberFromJSON(json['id_number']),
        'ip_address': json['ip_address'] == null ? undefined : json['ip_address'],
    };
}

export function BeaconUserRequestDataToJSON(value?: BeaconUserRequestData | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'date_of_birth': ((value['date_of_birth']).toISOString().substring(0,10)),
        'name': BeaconUserNameToJSON(value['name']),
        'address': BeaconUserRequestAddressToJSON(value['address']),
        'email_address': value['email_address'],
        'phone_number': value['phone_number'],
        'id_number': BeaconUserIDNumberToJSON(value['id_number']),
        'ip_address': value['ip_address'],
    };
}

