/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BeaconUserIDNumber } from './BeaconUserIDNumber';
import {
    BeaconUserIDNumberFromJSON,
    BeaconUserIDNumberFromJSONTyped,
    BeaconUserIDNumberToJSON,
} from './BeaconUserIDNumber';
import type { BeaconUserNameNullable } from './BeaconUserNameNullable';
import {
    BeaconUserNameNullableFromJSON,
    BeaconUserNameNullableFromJSONTyped,
    BeaconUserNameNullableToJSON,
} from './BeaconUserNameNullable';
import type { BeaconUserRequestAddressNullable } from './BeaconUserRequestAddressNullable';
import {
    BeaconUserRequestAddressNullableFromJSON,
    BeaconUserRequestAddressNullableFromJSONTyped,
    BeaconUserRequestAddressNullableToJSON,
} from './BeaconUserRequestAddressNullable';

/**
 * A subset of a Beacon User's data which is used to patch the existing identity data associated with a Beacon User. At least one field must be provided,.
 * @export
 * @interface BeaconUserUpdateRequestData
 */
export interface BeaconUserUpdateRequestData {
    [key: string]: any | any;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {Date}
     * @memberof BeaconUserUpdateRequestData
     */
    date_of_birth?: Date;
    /**
     * 
     * @type {BeaconUserNameNullable}
     * @memberof BeaconUserUpdateRequestData
     */
    name?: BeaconUserNameNullable;
    /**
     * 
     * @type {BeaconUserRequestAddressNullable}
     * @memberof BeaconUserUpdateRequestData
     */
    address?: BeaconUserRequestAddressNullable;
    /**
     * A valid email address.
     * @type {string}
     * @memberof BeaconUserUpdateRequestData
     */
    email_address?: string;
    /**
     * A phone number in E.164 format.
     * @type {string}
     * @memberof BeaconUserUpdateRequestData
     */
    phone_number?: string;
    /**
     * 
     * @type {BeaconUserIDNumber}
     * @memberof BeaconUserUpdateRequestData
     */
    id_number?: BeaconUserIDNumber;
    /**
     * An IPv4 or IPV6 address.
     * @type {string}
     * @memberof BeaconUserUpdateRequestData
     */
    ip_address?: string;
}

/**
 * Check if a given object implements the BeaconUserUpdateRequestData interface.
 */
export function instanceOfBeaconUserUpdateRequestData(value: object): boolean {
    return true;
}

export function BeaconUserUpdateRequestDataFromJSON(json: any): BeaconUserUpdateRequestData {
    return BeaconUserUpdateRequestDataFromJSONTyped(json, false);
}

export function BeaconUserUpdateRequestDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): BeaconUserUpdateRequestData {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'date_of_birth': json['date_of_birth'] == null ? undefined : (new Date(json['date_of_birth'])),
        'name': json['name'] == null ? undefined : BeaconUserNameNullableFromJSON(json['name']),
        'address': json['address'] == null ? undefined : BeaconUserRequestAddressNullableFromJSON(json['address']),
        'email_address': json['email_address'] == null ? undefined : json['email_address'],
        'phone_number': json['phone_number'] == null ? undefined : json['phone_number'],
        'id_number': json['id_number'] == null ? undefined : BeaconUserIDNumberFromJSON(json['id_number']),
        'ip_address': json['ip_address'] == null ? undefined : json['ip_address'],
    };
}

export function BeaconUserUpdateRequestDataToJSON(value?: BeaconUserUpdateRequestData | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'date_of_birth': value['date_of_birth'] == null ? undefined : ((value['date_of_birth']).toISOString().substring(0,10)),
        'name': BeaconUserNameNullableToJSON(value['name']),
        'address': BeaconUserRequestAddressNullableToJSON(value['address']),
        'email_address': value['email_address'],
        'phone_number': value['phone_number'],
        'id_number': BeaconUserIDNumberToJSON(value['id_number']),
        'ip_address': value['ip_address'],
    };
}

