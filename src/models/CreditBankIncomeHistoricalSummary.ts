/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreditAmountWithCurrency } from './CreditAmountWithCurrency';
import {
    CreditAmountWithCurrencyFromJSON,
    CreditAmountWithCurrencyFromJSONTyped,
    CreditAmountWithCurrencyToJSON,
} from './CreditAmountWithCurrency';
import type { CreditBankIncomeTransaction } from './CreditBankIncomeTransaction';
import {
    CreditBankIncomeTransactionFromJSON,
    CreditBankIncomeTransactionFromJSONTyped,
    CreditBankIncomeTransactionToJSON,
} from './CreditBankIncomeTransaction';

/**
 * The end user's monthly summary for the income source(s).
 * @export
 * @interface CreditBankIncomeHistoricalSummary
 */
export interface CreditBankIncomeHistoricalSummary {
    [key: string]: any | any;
    /**
     * Total amount of earnings for the income source(s) of the user for the month in the summary.
     * This may return an incorrect value if the summary includes income sources in multiple currencies.
     * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
     * @type {number}
     * @memberof CreditBankIncomeHistoricalSummary
     * @deprecated
     */
    total_amount?: number;
    /**
     * The ISO 4217 currency code of the amount or balance.
     * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
     * @type {string}
     * @memberof CreditBankIncomeHistoricalSummary
     * @deprecated
     */
    iso_currency_code?: string;
    /**
     * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
     * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
     * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
     * @type {string}
     * @memberof CreditBankIncomeHistoricalSummary
     * @deprecated
     */
    unofficial_currency_code?: string;
    /**
     * Total amount of earnings for the income source(s) of the user for the month in the summary.
     * This can contain multiple amounts, with each amount denominated in one unique currency.
     * @type {Array<CreditAmountWithCurrency>}
     * @memberof CreditBankIncomeHistoricalSummary
     */
    total_amounts?: Array<CreditAmountWithCurrency>;
    /**
     * The start date of the period covered in this monthly summary.
     * This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month.
     * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {Date}
     * @memberof CreditBankIncomeHistoricalSummary
     */
    start_date?: Date;
    /**
     * The end date of the period included in this monthly summary.
     * This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month.
     * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {Date}
     * @memberof CreditBankIncomeHistoricalSummary
     */
    end_date?: Date;
    /**
     * 
     * @type {Array<CreditBankIncomeTransaction>}
     * @memberof CreditBankIncomeHistoricalSummary
     */
    transactions?: Array<CreditBankIncomeTransaction>;
}

/**
 * Check if a given object implements the CreditBankIncomeHistoricalSummary interface.
 */
export function instanceOfCreditBankIncomeHistoricalSummary(value: object): boolean {
    return true;
}

export function CreditBankIncomeHistoricalSummaryFromJSON(json: any): CreditBankIncomeHistoricalSummary {
    return CreditBankIncomeHistoricalSummaryFromJSONTyped(json, false);
}

export function CreditBankIncomeHistoricalSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreditBankIncomeHistoricalSummary {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'total_amount': json['total_amount'] == null ? undefined : json['total_amount'],
        'iso_currency_code': json['iso_currency_code'] == null ? undefined : json['iso_currency_code'],
        'unofficial_currency_code': json['unofficial_currency_code'] == null ? undefined : json['unofficial_currency_code'],
        'total_amounts': json['total_amounts'] == null ? undefined : ((json['total_amounts'] as Array<any>).map(CreditAmountWithCurrencyFromJSON)),
        'start_date': json['start_date'] == null ? undefined : (new Date(json['start_date'])),
        'end_date': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'transactions': json['transactions'] == null ? undefined : ((json['transactions'] as Array<any>).map(CreditBankIncomeTransactionFromJSON)),
    };
}

export function CreditBankIncomeHistoricalSummaryToJSON(value?: CreditBankIncomeHistoricalSummary | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'total_amount': value['total_amount'],
        'iso_currency_code': value['iso_currency_code'],
        'unofficial_currency_code': value['unofficial_currency_code'],
        'total_amounts': value['total_amounts'] == null ? undefined : ((value['total_amounts'] as Array<any>).map(CreditAmountWithCurrencyToJSON)),
        'start_date': value['start_date'] == null ? undefined : ((value['start_date']).toISOString().substring(0,10)),
        'end_date': value['end_date'] == null ? undefined : ((value['end_date']).toISOString().substring(0,10)),
        'transactions': value['transactions'] == null ? undefined : ((value['transactions'] as Array<any>).map(CreditBankIncomeTransactionToJSON)),
    };
}

