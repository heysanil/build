/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreditBankStatementUploadAccountOwner } from './CreditBankStatementUploadAccountOwner';
import {
    CreditBankStatementUploadAccountOwnerFromJSON,
    CreditBankStatementUploadAccountOwnerFromJSONTyped,
    CreditBankStatementUploadAccountOwnerToJSON,
} from './CreditBankStatementUploadAccountOwner';
import type { CreditBankStatementUploadBankAccountPeriod } from './CreditBankStatementUploadBankAccountPeriod';
import {
    CreditBankStatementUploadBankAccountPeriodFromJSON,
    CreditBankStatementUploadBankAccountPeriodFromJSONTyped,
    CreditBankStatementUploadBankAccountPeriodToJSON,
} from './CreditBankStatementUploadBankAccountPeriod';

/**
 * An object containing data about a user's bank account related to an uploaded bank statement.
 * @export
 * @interface CreditBankStatementUploadBankAccount
 */
export interface CreditBankStatementUploadBankAccount {
    [key: string]: any | any;
    /**
     * The name of the bank account
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    name: string | null;
    /**
     * The name of the bank institution.
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    bank_name: string | null;
    /**
     * The type of the bank account.
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    account_type: string | null;
    /**
     * The bank account number.
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    account_number: string | null;
    /**
     * 
     * @type {CreditBankStatementUploadAccountOwner}
     * @memberof CreditBankStatementUploadBankAccount
     */
    owner: CreditBankStatementUploadAccountOwner;
    /**
     * An array of period objects, containing more data on the overall period of the statement.
     * @type {Array<CreditBankStatementUploadBankAccountPeriod>}
     * @memberof CreditBankStatementUploadBankAccount
     */
    periods: Array<CreditBankStatementUploadBankAccountPeriod>;
    /**
     * The unique id of the bank account
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    account_id: string | null;
}

/**
 * Check if a given object implements the CreditBankStatementUploadBankAccount interface.
 */
export function instanceOfCreditBankStatementUploadBankAccount(value: object): boolean {
    if (!('name' in value)) return false;
    if (!('bank_name' in value)) return false;
    if (!('account_type' in value)) return false;
    if (!('account_number' in value)) return false;
    if (!('owner' in value)) return false;
    if (!('periods' in value)) return false;
    if (!('account_id' in value)) return false;
    return true;
}

export function CreditBankStatementUploadBankAccountFromJSON(json: any): CreditBankStatementUploadBankAccount {
    return CreditBankStatementUploadBankAccountFromJSONTyped(json, false);
}

export function CreditBankStatementUploadBankAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreditBankStatementUploadBankAccount {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'name': json['name'],
        'bank_name': json['bank_name'],
        'account_type': json['account_type'],
        'account_number': json['account_number'],
        'owner': CreditBankStatementUploadAccountOwnerFromJSON(json['owner']),
        'periods': ((json['periods'] as Array<any>).map(CreditBankStatementUploadBankAccountPeriodFromJSON)),
        'account_id': json['account_id'],
    };
}

export function CreditBankStatementUploadBankAccountToJSON(value?: CreditBankStatementUploadBankAccount | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'name': value['name'],
        'bank_name': value['bank_name'],
        'account_type': value['account_type'],
        'account_number': value['account_number'],
        'owner': CreditBankStatementUploadAccountOwnerToJSON(value['owner']),
        'periods': ((value['periods'] as Array<any>).map(CreditBankStatementUploadBankAccountPeriodToJSON)),
        'account_id': value['account_id'],
    };
}

