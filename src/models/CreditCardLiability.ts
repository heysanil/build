/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { APR } from './APR';
import {
    APRFromJSON,
    APRFromJSONTyped,
    APRToJSON,
} from './APR';

/**
 * An object representing a credit card account.
 * @export
 * @interface CreditCardLiability
 */
export interface CreditCardLiability {
    [key: string]: any | any;
    /**
     * The ID of the account that this liability belongs to.
     * @type {string}
     * @memberof CreditCardLiability
     */
    account_id: string | null;
    /**
     * The various interest rates that apply to the account. APR information is not provided by all card issuers; if APR data is not available, this array will be empty.
     * @type {Array<APR>}
     * @memberof CreditCardLiability
     */
    aprs: Array<APR>;
    /**
     * true if a payment is currently overdue. Availability for this field is limited.
     * @type {boolean}
     * @memberof CreditCardLiability
     */
    is_overdue: boolean | null;
    /**
     * The amount of the last payment.
     * @type {number}
     * @memberof CreditCardLiability
     */
    last_payment_amount: number | null;
    /**
     * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
     * @type {Date}
     * @memberof CreditCardLiability
     */
    last_payment_date: Date | null;
    /**
     * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {Date}
     * @memberof CreditCardLiability
     */
    last_statement_issue_date: Date | null;
    /**
     * The total amount owed as of the last statement issued
     * @type {number}
     * @memberof CreditCardLiability
     */
    last_statement_balance: number | null;
    /**
     * The minimum payment due for the next billing cycle.
     * @type {number}
     * @memberof CreditCardLiability
     */
    minimum_payment_amount: number | null;
    /**
     * The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {Date}
     * @memberof CreditCardLiability
     */
    next_payment_due_date: Date | null;
}

/**
 * Check if a given object implements the CreditCardLiability interface.
 */
export function instanceOfCreditCardLiability(value: object): boolean {
    if (!('account_id' in value)) return false;
    if (!('aprs' in value)) return false;
    if (!('is_overdue' in value)) return false;
    if (!('last_payment_amount' in value)) return false;
    if (!('last_payment_date' in value)) return false;
    if (!('last_statement_issue_date' in value)) return false;
    if (!('last_statement_balance' in value)) return false;
    if (!('minimum_payment_amount' in value)) return false;
    if (!('next_payment_due_date' in value)) return false;
    return true;
}

export function CreditCardLiabilityFromJSON(json: any): CreditCardLiability {
    return CreditCardLiabilityFromJSONTyped(json, false);
}

export function CreditCardLiabilityFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreditCardLiability {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'account_id': json['account_id'],
        'aprs': ((json['aprs'] as Array<any>).map(APRFromJSON)),
        'is_overdue': json['is_overdue'],
        'last_payment_amount': json['last_payment_amount'],
        'last_payment_date': (json['last_payment_date'] == null ? null : new Date(json['last_payment_date'])),
        'last_statement_issue_date': (json['last_statement_issue_date'] == null ? null : new Date(json['last_statement_issue_date'])),
        'last_statement_balance': json['last_statement_balance'],
        'minimum_payment_amount': json['minimum_payment_amount'],
        'next_payment_due_date': (json['next_payment_due_date'] == null ? null : new Date(json['next_payment_due_date'])),
    };
}

export function CreditCardLiabilityToJSON(value?: CreditCardLiability | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'account_id': value['account_id'],
        'aprs': ((value['aprs'] as Array<any>).map(APRToJSON)),
        'is_overdue': value['is_overdue'],
        'last_payment_amount': value['last_payment_amount'],
        'last_payment_date': (value['last_payment_date'] == null ? null : (value['last_payment_date'] as any).toISOString().substring(0,10)),
        'last_statement_issue_date': (value['last_statement_issue_date'] == null ? null : (value['last_statement_issue_date'] as any).toISOString().substring(0,10)),
        'last_statement_balance': value['last_statement_balance'],
        'minimum_payment_amount': value['minimum_payment_amount'],
        'next_payment_due_date': (value['next_payment_due_date'] == null ? null : (value['next_payment_due_date'] as any).toISOString().substring(0,10)),
    };
}

