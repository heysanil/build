/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeductionsBreakdown } from './DeductionsBreakdown';
import {
    DeductionsBreakdownFromJSON,
    DeductionsBreakdownFromJSONTyped,
    DeductionsBreakdownToJSON,
} from './DeductionsBreakdown';
import type { DeductionsTotal } from './DeductionsTotal';
import {
    DeductionsTotalFromJSON,
    DeductionsTotalFromJSONTyped,
    DeductionsTotalToJSON,
} from './DeductionsTotal';
import type { Total } from './Total';
import {
    TotalFromJSON,
    TotalFromJSONTyped,
    TotalToJSON,
} from './Total';

/**
 * An object with the deduction information found on a paystub.
 * @export
 * @interface Deductions
 */
export interface Deductions {
    [key: string]: any | any;
    /**
     * 
     * @type {Array<Total>}
     * @memberof Deductions
     * @deprecated
     */
    subtotals?: Array<Total>;
    /**
     * 
     * @type {Array<DeductionsBreakdown>}
     * @memberof Deductions
     */
    breakdown: Array<DeductionsBreakdown>;
    /**
     * 
     * @type {Array<Total>}
     * @memberof Deductions
     * @deprecated
     */
    totals?: Array<Total>;
    /**
     * 
     * @type {DeductionsTotal}
     * @memberof Deductions
     */
    total: DeductionsTotal;
}

/**
 * Check if a given object implements the Deductions interface.
 */
export function instanceOfDeductions(value: object): boolean {
    if (!('breakdown' in value)) return false;
    if (!('total' in value)) return false;
    return true;
}

export function DeductionsFromJSON(json: any): Deductions {
    return DeductionsFromJSONTyped(json, false);
}

export function DeductionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Deductions {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'subtotals': json['subtotals'] == null ? undefined : ((json['subtotals'] as Array<any>).map(TotalFromJSON)),
        'breakdown': ((json['breakdown'] as Array<any>).map(DeductionsBreakdownFromJSON)),
        'totals': json['totals'] == null ? undefined : ((json['totals'] as Array<any>).map(TotalFromJSON)),
        'total': DeductionsTotalFromJSON(json['total']),
    };
}

export function DeductionsToJSON(value?: Deductions | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'subtotals': value['subtotals'] == null ? undefined : ((value['subtotals'] as Array<any>).map(TotalToJSON)),
        'breakdown': ((value['breakdown'] as Array<any>).map(DeductionsBreakdownToJSON)),
        'totals': value['totals'] == null ? undefined : ((value['totals'] as Array<any>).map(TotalToJSON)),
        'total': DeductionsTotalToJSON(value['total']),
    };
}

