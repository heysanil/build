/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentAnalysis } from './DocumentAnalysis';
import {
    DocumentAnalysisFromJSON,
    DocumentAnalysisFromJSONTyped,
    DocumentAnalysisToJSON,
} from './DocumentAnalysis';
import type { DocumentStatus } from './DocumentStatus';
import {
    DocumentStatusFromJSON,
    DocumentStatusFromJSONTyped,
    DocumentStatusToJSON,
} from './DocumentStatus';
import type { PhysicalDocumentExtractedData } from './PhysicalDocumentExtractedData';
import {
    PhysicalDocumentExtractedDataFromJSON,
    PhysicalDocumentExtractedDataFromJSONTyped,
    PhysicalDocumentExtractedDataToJSON,
} from './PhysicalDocumentExtractedData';
import type { PhysicalDocumentImages } from './PhysicalDocumentImages';
import {
    PhysicalDocumentImagesFromJSON,
    PhysicalDocumentImagesFromJSONTyped,
    PhysicalDocumentImagesToJSON,
} from './PhysicalDocumentImages';

/**
 * Images, extracted data, and analysis from a user's identity document
 * @export
 * @interface DocumentaryVerificationDocument
 */
export interface DocumentaryVerificationDocument {
    [key: string]: any | any;
    /**
     * 
     * @type {DocumentStatus}
     * @memberof DocumentaryVerificationDocument
     */
    status: DocumentStatus;
    /**
     * The `attempt` field begins with 1 and increments with each subsequent document upload.
     * @type {number}
     * @memberof DocumentaryVerificationDocument
     */
    attempt: number;
    /**
     * 
     * @type {PhysicalDocumentImages}
     * @memberof DocumentaryVerificationDocument
     */
    images: PhysicalDocumentImages;
    /**
     * 
     * @type {PhysicalDocumentExtractedData}
     * @memberof DocumentaryVerificationDocument
     */
    extracted_data: PhysicalDocumentExtractedData | null;
    /**
     * 
     * @type {DocumentAnalysis}
     * @memberof DocumentaryVerificationDocument
     */
    analysis: DocumentAnalysis;
    /**
     * An ISO8601 formatted timestamp.
     * @type {Date}
     * @memberof DocumentaryVerificationDocument
     */
    redacted_at: Date | null;
}

/**
 * Check if a given object implements the DocumentaryVerificationDocument interface.
 */
export function instanceOfDocumentaryVerificationDocument(value: object): boolean {
    if (!('status' in value)) return false;
    if (!('attempt' in value)) return false;
    if (!('images' in value)) return false;
    if (!('extracted_data' in value)) return false;
    if (!('analysis' in value)) return false;
    if (!('redacted_at' in value)) return false;
    return true;
}

export function DocumentaryVerificationDocumentFromJSON(json: any): DocumentaryVerificationDocument {
    return DocumentaryVerificationDocumentFromJSONTyped(json, false);
}

export function DocumentaryVerificationDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentaryVerificationDocument {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'status': DocumentStatusFromJSON(json['status']),
        'attempt': json['attempt'],
        'images': PhysicalDocumentImagesFromJSON(json['images']),
        'extracted_data': PhysicalDocumentExtractedDataFromJSON(json['extracted_data']),
        'analysis': DocumentAnalysisFromJSON(json['analysis']),
        'redacted_at': (json['redacted_at'] == null ? null : new Date(json['redacted_at'])),
    };
}

export function DocumentaryVerificationDocumentToJSON(value?: DocumentaryVerificationDocument | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'status': DocumentStatusToJSON(value['status']),
        'attempt': value['attempt'],
        'images': PhysicalDocumentImagesToJSON(value['images']),
        'extracted_data': PhysicalDocumentExtractedDataToJSON(value['extracted_data']),
        'analysis': DocumentAnalysisToJSON(value['analysis']),
        'redacted_at': (value['redacted_at'] == null ? null : (value['redacted_at'] as any).toISOString()),
    };
}

