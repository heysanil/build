/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Counterparty } from './Counterparty';
import {
    CounterpartyFromJSON,
    CounterpartyFromJSONTyped,
    CounterpartyToJSON,
} from './Counterparty';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';
import type { PaymentChannel } from './PaymentChannel';
import {
    PaymentChannelFromJSON,
    PaymentChannelFromJSONTyped,
    PaymentChannelToJSON,
} from './PaymentChannel';
import type { PersonalFinanceCategory } from './PersonalFinanceCategory';
import {
    PersonalFinanceCategoryFromJSON,
    PersonalFinanceCategoryFromJSONTyped,
    PersonalFinanceCategoryToJSON,
} from './PersonalFinanceCategory';

/**
 * A grouping of the Plaid produced transaction enhancement fields.
 * @export
 * @interface Enhancements
 */
export interface Enhancements {
    [key: string]: any | any;
    /**
     * The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
     * @type {string}
     * @memberof Enhancements
     */
    merchant_name?: string;
    /**
     * The website associated with this transaction, if available.
     * @type {string}
     * @memberof Enhancements
     */
    website?: string;
    /**
     * The URL of a logo associated with this transaction, if available. The logo will always be 100×100 pixel PNG file.
     * @type {string}
     * @memberof Enhancements
     */
    logo_url?: string;
    /**
     * The check number of the transaction. This field is only populated for check transactions.
     * @type {string}
     * @memberof Enhancements
     */
    check_number?: string;
    /**
     * 
     * @type {PaymentChannel}
     * @memberof Enhancements
     */
    payment_channel: PaymentChannel;
    /**
     * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * @type {string}
     * @memberof Enhancements
     */
    category_id: string | null;
    /**
     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * @type {Array<string>}
     * @memberof Enhancements
     */
    category: Array<string>;
    /**
     * 
     * @type {Location}
     * @memberof Enhancements
     */
    location: Location;
    /**
     * 
     * @type {PersonalFinanceCategory}
     * @memberof Enhancements
     */
    personal_finance_category?: PersonalFinanceCategory;
    /**
     * The URL of an icon associated with the primary personal finance category. The icon will always be 100×100 pixel PNG file.
     * @type {string}
     * @memberof Enhancements
     */
    personal_finance_category_icon_url?: string;
    /**
     * The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
     * @type {Array<Counterparty>}
     * @memberof Enhancements
     */
    counterparties?: Array<Counterparty>;
}

/**
 * Check if a given object implements the Enhancements interface.
 */
export function instanceOfEnhancements(value: object): boolean {
    if (!('payment_channel' in value)) return false;
    if (!('category_id' in value)) return false;
    if (!('category' in value)) return false;
    if (!('location' in value)) return false;
    return true;
}

export function EnhancementsFromJSON(json: any): Enhancements {
    return EnhancementsFromJSONTyped(json, false);
}

export function EnhancementsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Enhancements {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'merchant_name': json['merchant_name'] == null ? undefined : json['merchant_name'],
        'website': json['website'] == null ? undefined : json['website'],
        'logo_url': json['logo_url'] == null ? undefined : json['logo_url'],
        'check_number': json['check_number'] == null ? undefined : json['check_number'],
        'payment_channel': PaymentChannelFromJSON(json['payment_channel']),
        'category_id': json['category_id'],
        'category': json['category'],
        'location': LocationFromJSON(json['location']),
        'personal_finance_category': json['personal_finance_category'] == null ? undefined : PersonalFinanceCategoryFromJSON(json['personal_finance_category']),
        'personal_finance_category_icon_url': json['personal_finance_category_icon_url'] == null ? undefined : json['personal_finance_category_icon_url'],
        'counterparties': json['counterparties'] == null ? undefined : ((json['counterparties'] as Array<any>).map(CounterpartyFromJSON)),
    };
}

export function EnhancementsToJSON(value?: Enhancements | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'merchant_name': value['merchant_name'],
        'website': value['website'],
        'logo_url': value['logo_url'],
        'check_number': value['check_number'],
        'payment_channel': PaymentChannelToJSON(value['payment_channel']),
        'category_id': value['category_id'],
        'category': value['category'],
        'location': LocationToJSON(value['location']),
        'personal_finance_category': PersonalFinanceCategoryToJSON(value['personal_finance_category']),
        'personal_finance_category_icon_url': value['personal_finance_category_icon_url'],
        'counterparties': value['counterparties'] == null ? undefined : ((value['counterparties'] as Array<any>).map(CounterpartyToJSON)),
    };
}

