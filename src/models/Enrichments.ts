/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Counterparty } from './Counterparty';
import {
    CounterpartyFromJSON,
    CounterpartyFromJSONTyped,
    CounterpartyToJSON,
} from './Counterparty';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';
import type { PaymentChannel } from './PaymentChannel';
import {
    PaymentChannelFromJSON,
    PaymentChannelFromJSONTyped,
    PaymentChannelToJSON,
} from './PaymentChannel';
import type { PersonalFinanceCategory } from './PersonalFinanceCategory';
import {
    PersonalFinanceCategoryFromJSON,
    PersonalFinanceCategoryFromJSONTyped,
    PersonalFinanceCategoryToJSON,
} from './PersonalFinanceCategory';
import type { Recurrence } from './Recurrence';
import {
    RecurrenceFromJSON,
    RecurrenceFromJSONTyped,
    RecurrenceToJSON,
} from './Recurrence';

/**
 * A grouping of the Plaid produced transaction enrichment fields.
 * @export
 * @interface Enrichments
 */
export interface Enrichments {
    [key: string]: any | any;
    /**
     * The check number of the transaction. This field is only populated for check transactions.
     * @type {string}
     * @memberof Enrichments
     */
    check_number?: string;
    /**
     * The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
     * @type {Array<Counterparty>}
     * @memberof Enrichments
     */
    counterparties: Array<Counterparty>;
    /**
     * A unique, stable, Plaid-generated ID that maps to the primary counterparty.
     * @type {string}
     * @memberof Enrichments
     */
    entity_id?: string;
    /**
     * The ID of the legacy category to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * 
     * We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
     * @type {string}
     * @memberof Enrichments
     * @deprecated
     */
    legacy_category_id?: string;
    /**
     * A hierarchical array of the legacy categories to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * 
     * We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
     * @type {Array<string>}
     * @memberof Enrichments
     * @deprecated
     */
    legacy_category?: Array<string>;
    /**
     * 
     * @type {Location}
     * @memberof Enrichments
     */
    location: Location;
    /**
     * The URL of a logo associated with this transaction, if available. The logo will always be 100×100 pixel PNG file.
     * @type {string}
     * @memberof Enrichments
     */
    logo_url: string | null;
    /**
     * The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
     * @type {string}
     * @memberof Enrichments
     */
    merchant_name: string | null;
    /**
     * 
     * @type {PaymentChannel}
     * @memberof Enrichments
     */
    payment_channel: PaymentChannel;
    /**
     * The phone number associated with the counterparty in E. 164 format. If there is a location match (i.e. a street address is returned in the location object), the phone number will be location specific.
     * @type {string}
     * @memberof Enrichments
     */
    phone_number: string | null;
    /**
     * 
     * @type {PersonalFinanceCategory}
     * @memberof Enrichments
     */
    personal_finance_category: PersonalFinanceCategory | null;
    /**
     * The URL of an icon associated with the primary personal finance category. The icon will always be 100×100 pixel PNG file.
     * @type {string}
     * @memberof Enrichments
     */
    personal_finance_category_icon_url: string;
    /**
     * 
     * @type {Recurrence}
     * @memberof Enrichments
     */
    recurrence?: Recurrence;
    /**
     * The website associated with this transaction.
     * @type {string}
     * @memberof Enrichments
     */
    website: string | null;
}

/**
 * Check if a given object implements the Enrichments interface.
 */
export function instanceOfEnrichments(value: object): boolean {
    if (!('counterparties' in value)) return false;
    if (!('location' in value)) return false;
    if (!('logo_url' in value)) return false;
    if (!('merchant_name' in value)) return false;
    if (!('payment_channel' in value)) return false;
    if (!('phone_number' in value)) return false;
    if (!('personal_finance_category' in value)) return false;
    if (!('personal_finance_category_icon_url' in value)) return false;
    if (!('website' in value)) return false;
    return true;
}

export function EnrichmentsFromJSON(json: any): Enrichments {
    return EnrichmentsFromJSONTyped(json, false);
}

export function EnrichmentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Enrichments {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'check_number': json['check_number'] == null ? undefined : json['check_number'],
        'counterparties': ((json['counterparties'] as Array<any>).map(CounterpartyFromJSON)),
        'entity_id': json['entity_id'] == null ? undefined : json['entity_id'],
        'legacy_category_id': json['legacy_category_id'] == null ? undefined : json['legacy_category_id'],
        'legacy_category': json['legacy_category'] == null ? undefined : json['legacy_category'],
        'location': LocationFromJSON(json['location']),
        'logo_url': json['logo_url'],
        'merchant_name': json['merchant_name'],
        'payment_channel': PaymentChannelFromJSON(json['payment_channel']),
        'phone_number': json['phone_number'],
        'personal_finance_category': PersonalFinanceCategoryFromJSON(json['personal_finance_category']),
        'personal_finance_category_icon_url': json['personal_finance_category_icon_url'],
        'recurrence': json['recurrence'] == null ? undefined : RecurrenceFromJSON(json['recurrence']),
        'website': json['website'],
    };
}

export function EnrichmentsToJSON(value?: Enrichments | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'check_number': value['check_number'],
        'counterparties': ((value['counterparties'] as Array<any>).map(CounterpartyToJSON)),
        'entity_id': value['entity_id'],
        'legacy_category_id': value['legacy_category_id'],
        'legacy_category': value['legacy_category'],
        'location': LocationToJSON(value['location']),
        'logo_url': value['logo_url'],
        'merchant_name': value['merchant_name'],
        'payment_channel': PaymentChannelToJSON(value['payment_channel']),
        'phone_number': value['phone_number'],
        'personal_finance_category': PersonalFinanceCategoryToJSON(value['personal_finance_category']),
        'personal_finance_category_icon_url': value['personal_finance_category_icon_url'],
        'recurrence': RecurrenceToJSON(value['recurrence']),
        'website': value['website'],
    };
}

