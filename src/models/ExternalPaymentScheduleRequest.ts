/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaymentScheduleInterval } from './PaymentScheduleInterval';
import {
    PaymentScheduleIntervalFromJSON,
    PaymentScheduleIntervalFromJSONTyped,
    PaymentScheduleIntervalToJSON,
} from './PaymentScheduleInterval';

/**
 * The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
 * @export
 * @interface ExternalPaymentScheduleRequest
 */
export interface ExternalPaymentScheduleRequest {
    /**
     * 
     * @type {PaymentScheduleInterval}
     * @memberof ExternalPaymentScheduleRequest
     */
    interval: PaymentScheduleInterval;
    /**
     * The day of the interval on which to schedule the payment.
     * 
     * If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).
     * 
     * If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
     * @type {number}
     * @memberof ExternalPaymentScheduleRequest
     */
    interval_execution_day: number;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.
     * 
     * If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
     * @type {Date}
     * @memberof ExternalPaymentScheduleRequest
     */
    start_date: Date;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`.
     * If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
     * @type {Date}
     * @memberof ExternalPaymentScheduleRequest
     */
    end_date?: Date;
    /**
     * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
     * @type {Date}
     * @memberof ExternalPaymentScheduleRequest
     */
    adjusted_start_date?: Date;
}

/**
 * Check if a given object implements the ExternalPaymentScheduleRequest interface.
 */
export function instanceOfExternalPaymentScheduleRequest(value: object): boolean {
    if (!('interval' in value)) return false;
    if (!('interval_execution_day' in value)) return false;
    if (!('start_date' in value)) return false;
    return true;
}

export function ExternalPaymentScheduleRequestFromJSON(json: any): ExternalPaymentScheduleRequest {
    return ExternalPaymentScheduleRequestFromJSONTyped(json, false);
}

export function ExternalPaymentScheduleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalPaymentScheduleRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'interval': PaymentScheduleIntervalFromJSON(json['interval']),
        'interval_execution_day': json['interval_execution_day'],
        'start_date': (new Date(json['start_date'])),
        'end_date': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'adjusted_start_date': json['adjusted_start_date'] == null ? undefined : (new Date(json['adjusted_start_date'])),
    };
}

export function ExternalPaymentScheduleRequestToJSON(value?: ExternalPaymentScheduleRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'interval': PaymentScheduleIntervalToJSON(value['interval']),
        'interval_execution_day': value['interval_execution_day'],
        'start_date': ((value['start_date']).toISOString().substring(0,10)),
        'end_date': value['end_date'] == null ? undefined : ((value['end_date'] as any).toISOString().substring(0,10)),
        'adjusted_start_date': value['adjusted_start_date'] == null ? undefined : ((value['adjusted_start_date'] as any).toISOString().substring(0,10)),
    };
}

