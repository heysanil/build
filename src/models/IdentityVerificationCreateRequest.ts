/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdentityVerificationCreateRequestUser } from './IdentityVerificationCreateRequestUser';
import {
    IdentityVerificationCreateRequestUserFromJSON,
    IdentityVerificationCreateRequestUserFromJSONTyped,
    IdentityVerificationCreateRequestUserToJSON,
} from './IdentityVerificationCreateRequestUser';

/**
 * Request schema for '/identity_verification/create'
 * @export
 * @interface IdentityVerificationCreateRequest
 */
export interface IdentityVerificationCreateRequest {
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the `/link/token/create` `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof IdentityVerificationCreateRequest
     */
    client_user_id?: string;
    /**
     * A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
     * @type {boolean}
     * @memberof IdentityVerificationCreateRequest
     */
    is_shareable: boolean;
    /**
     * ID of the associated Identity Verification template.
     * @type {string}
     * @memberof IdentityVerificationCreateRequest
     */
    template_id: string;
    /**
     * A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.
     * 
     * If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
     * @type {boolean}
     * @memberof IdentityVerificationCreateRequest
     */
    gave_consent: boolean;
    /**
     * 
     * @type {IdentityVerificationCreateRequestUser}
     * @memberof IdentityVerificationCreateRequest
     */
    user?: IdentityVerificationCreateRequestUser;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationCreateRequest
     */
    secret?: string;
    /**
     * An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`.
     * If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`.
     * @type {boolean}
     * @memberof IdentityVerificationCreateRequest
     */
    is_idempotent?: boolean;
}

/**
 * Check if a given object implements the IdentityVerificationCreateRequest interface.
 */
export function instanceOfIdentityVerificationCreateRequest(value: object): boolean {
    if (!('is_shareable' in value)) return false;
    if (!('template_id' in value)) return false;
    if (!('gave_consent' in value)) return false;
    return true;
}

export function IdentityVerificationCreateRequestFromJSON(json: any): IdentityVerificationCreateRequest {
    return IdentityVerificationCreateRequestFromJSONTyped(json, false);
}

export function IdentityVerificationCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityVerificationCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_user_id': json['client_user_id'] == null ? undefined : json['client_user_id'],
        'is_shareable': json['is_shareable'],
        'template_id': json['template_id'],
        'gave_consent': json['gave_consent'],
        'user': json['user'] == null ? undefined : IdentityVerificationCreateRequestUserFromJSON(json['user']),
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'is_idempotent': json['is_idempotent'] == null ? undefined : json['is_idempotent'],
    };
}

export function IdentityVerificationCreateRequestToJSON(value?: IdentityVerificationCreateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_user_id': value['client_user_id'],
        'is_shareable': value['is_shareable'],
        'template_id': value['template_id'],
        'gave_consent': value['gave_consent'],
        'user': IdentityVerificationCreateRequestUserToJSON(value['user']),
        'client_id': value['client_id'],
        'secret': value['secret'],
        'is_idempotent': value['is_idempotent'],
    };
}

