/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Even if an address has been collected, some fields may be null depending on the region's addressing system. For example:
 * 
 * Addresses from the United Kingdom will not include a region
 * 
 * Addresses from Hong Kong will not include postal code
 * @export
 * @interface IdentityVerificationUserAddress
 */
export interface IdentityVerificationUserAddress {
    [key: string]: any | any;
    /**
     * The primary street portion of an address. If an address is provided, this field will always be filled.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    street: string | null;
    /**
     * Extra street information, like an apartment or suite number.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    street2: string | null;
    /**
     * City from the end user's address
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    city: string | null;
    /**
     * An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    region: string | null;
    /**
     * The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    postal_code: string | null;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    country: string;
}

/**
 * Check if a given object implements the IdentityVerificationUserAddress interface.
 */
export function instanceOfIdentityVerificationUserAddress(value: object): boolean {
    if (!('street' in value)) return false;
    if (!('street2' in value)) return false;
    if (!('city' in value)) return false;
    if (!('region' in value)) return false;
    if (!('postal_code' in value)) return false;
    if (!('country' in value)) return false;
    return true;
}

export function IdentityVerificationUserAddressFromJSON(json: any): IdentityVerificationUserAddress {
    return IdentityVerificationUserAddressFromJSONTyped(json, false);
}

export function IdentityVerificationUserAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityVerificationUserAddress {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'street': json['street'],
        'street2': json['street2'],
        'city': json['city'],
        'region': json['region'],
        'postal_code': json['postal_code'],
        'country': json['country'],
    };
}

export function IdentityVerificationUserAddressToJSON(value?: IdentityVerificationUserAddress | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'street': value['street'],
        'street2': value['street2'],
        'city': value['city'],
        'region': value['region'],
        'postal_code': value['postal_code'],
        'country': value['country'],
    };
}

