/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CountryCode } from './CountryCode';
import {
    CountryCodeFromJSON,
    CountryCodeFromJSONTyped,
    CountryCodeToJSON,
} from './CountryCode';
import type { InstitutionsSearchRequestOptions } from './InstitutionsSearchRequestOptions';
import {
    InstitutionsSearchRequestOptionsFromJSON,
    InstitutionsSearchRequestOptionsFromJSONTyped,
    InstitutionsSearchRequestOptionsToJSON,
} from './InstitutionsSearchRequestOptions';
import type { Products } from './Products';
import {
    ProductsFromJSON,
    ProductsFromJSONTyped,
    ProductsToJSON,
} from './Products';

/**
 * InstitutionsSearchRequest defines the request schema for `/institutions/search`
 * @export
 * @interface InstitutionsSearchRequest
 */
export interface InstitutionsSearchRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsSearchRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsSearchRequest
     */
    secret?: string;
    /**
     * The search query. Institutions with names matching the query are returned
     * @type {string}
     * @memberof InstitutionsSearchRequest
     */
    query: string;
    /**
     * Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array.
     * @type {Array<Products>}
     * @memberof InstitutionsSearchRequest
     */
    products?: Array<Products>;
    /**
     * Specify which country or countries to include institutions from, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied.
     * 
     * @type {Array<CountryCode>}
     * @memberof InstitutionsSearchRequest
     */
    country_codes: Array<CountryCode>;
    /**
     * 
     * @type {InstitutionsSearchRequestOptions}
     * @memberof InstitutionsSearchRequest
     */
    options?: InstitutionsSearchRequestOptions;
}

/**
 * Check if a given object implements the InstitutionsSearchRequest interface.
 */
export function instanceOfInstitutionsSearchRequest(value: object): boolean {
    if (!('query' in value)) return false;
    if (!('country_codes' in value)) return false;
    return true;
}

export function InstitutionsSearchRequestFromJSON(json: any): InstitutionsSearchRequest {
    return InstitutionsSearchRequestFromJSONTyped(json, false);
}

export function InstitutionsSearchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstitutionsSearchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'query': json['query'],
        'products': json['products'] == null ? undefined : ((json['products'] as Array<any>).map(ProductsFromJSON)),
        'country_codes': ((json['country_codes'] as Array<any>).map(CountryCodeFromJSON)),
        'options': json['options'] == null ? undefined : InstitutionsSearchRequestOptionsFromJSON(json['options']),
    };
}

export function InstitutionsSearchRequestToJSON(value?: InstitutionsSearchRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'query': value['query'],
        'products': value['products'] == null ? undefined : ((value['products'] as Array<any>).map(ProductsToJSON)),
        'country_codes': ((value['country_codes'] as Array<any>).map(CountryCodeToJSON)),
        'options': InstitutionsSearchRequestOptionsToJSON(value['options']),
    };
}

