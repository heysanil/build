/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InvestmentTransactionSubtype } from './InvestmentTransactionSubtype';
import {
    InvestmentTransactionSubtypeFromJSON,
    InvestmentTransactionSubtypeFromJSONTyped,
    InvestmentTransactionSubtypeToJSON,
} from './InvestmentTransactionSubtype';
import type { InvestmentTransactionType } from './InvestmentTransactionType';
import {
    InvestmentTransactionTypeFromJSON,
    InvestmentTransactionTypeFromJSONTyped,
    InvestmentTransactionTypeToJSON,
} from './InvestmentTransactionType';

/**
 * A transaction within an investment account.
 * @export
 * @interface InvestmentTransaction
 */
export interface InvestmentTransaction {
    [key: string]: any | any;
    /**
     * The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    investment_transaction_id: string;
    /**
     * A legacy field formerly used internally by Plaid to identify certain canceled transactions.
     * @type {string}
     * @memberof InvestmentTransaction
     * @deprecated
     */
    cancel_transaction_id?: string;
    /**
     * The `account_id` of the account against which this transaction posted.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    account_id: string;
    /**
     * The `security_id` to which this transaction is related.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    security_id: string | null;
    /**
     * The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
     * @type {Date}
     * @memberof InvestmentTransaction
     */
    date: Date;
    /**
     * The institutionâ€™s description of the transaction.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    name: string;
    /**
     * The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
     * @type {number}
     * @memberof InvestmentTransaction
     */
    quantity: number;
    /**
     * The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
     * @type {number}
     * @memberof InvestmentTransaction
     */
    amount: number;
    /**
     * The price of the security at which this transaction occurred.
     * @type {number}
     * @memberof InvestmentTransaction
     */
    price: number;
    /**
     * The combined value of all fees applied to this transaction
     * @type {number}
     * @memberof InvestmentTransaction
     */
    fees: number | null;
    /**
     * 
     * @type {InvestmentTransactionType}
     * @memberof InvestmentTransaction
     */
    type: InvestmentTransactionType;
    /**
     * 
     * @type {InvestmentTransactionSubtype}
     * @memberof InvestmentTransaction
     */
    subtype: InvestmentTransactionSubtype;
    /**
     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
     * 
     * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    unofficial_currency_code: string | null;
}

/**
 * Check if a given object implements the InvestmentTransaction interface.
 */
export function instanceOfInvestmentTransaction(value: object): boolean {
    if (!('investment_transaction_id' in value)) return false;
    if (!('account_id' in value)) return false;
    if (!('security_id' in value)) return false;
    if (!('date' in value)) return false;
    if (!('name' in value)) return false;
    if (!('quantity' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('price' in value)) return false;
    if (!('fees' in value)) return false;
    if (!('type' in value)) return false;
    if (!('subtype' in value)) return false;
    if (!('iso_currency_code' in value)) return false;
    if (!('unofficial_currency_code' in value)) return false;
    return true;
}

export function InvestmentTransactionFromJSON(json: any): InvestmentTransaction {
    return InvestmentTransactionFromJSONTyped(json, false);
}

export function InvestmentTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvestmentTransaction {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'investment_transaction_id': json['investment_transaction_id'],
        'cancel_transaction_id': json['cancel_transaction_id'] == null ? undefined : json['cancel_transaction_id'],
        'account_id': json['account_id'],
        'security_id': json['security_id'],
        'date': (new Date(json['date'])),
        'name': json['name'],
        'quantity': json['quantity'],
        'amount': json['amount'],
        'price': json['price'],
        'fees': json['fees'],
        'type': InvestmentTransactionTypeFromJSON(json['type']),
        'subtype': InvestmentTransactionSubtypeFromJSON(json['subtype']),
        'iso_currency_code': json['iso_currency_code'],
        'unofficial_currency_code': json['unofficial_currency_code'],
    };
}

export function InvestmentTransactionToJSON(value?: InvestmentTransaction | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'investment_transaction_id': value['investment_transaction_id'],
        'cancel_transaction_id': value['cancel_transaction_id'],
        'account_id': value['account_id'],
        'security_id': value['security_id'],
        'date': ((value['date']).toISOString().substring(0,10)),
        'name': value['name'],
        'quantity': value['quantity'],
        'amount': value['amount'],
        'price': value['price'],
        'fees': value['fees'],
        'type': InvestmentTransactionTypeToJSON(value['type']),
        'subtype': InvestmentTransactionSubtypeToJSON(value['subtype']),
        'iso_currency_code': value['iso_currency_code'],
        'unofficial_currency_code': value['unofficial_currency_code'],
    };
}

