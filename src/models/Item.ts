/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PlaidError } from './PlaidError';
import {
    PlaidErrorFromJSON,
    PlaidErrorFromJSONTyped,
    PlaidErrorToJSON,
} from './PlaidError';
import type { Products } from './Products';
import {
    ProductsFromJSON,
    ProductsFromJSONTyped,
    ProductsToJSON,
} from './Products';

/**
 * Metadata about the Item.
 * @export
 * @interface Item
 */
export interface Item {
    [key: string]: any | any;
    /**
     * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
     * @type {string}
     * @memberof Item
     */
    item_id: string;
    /**
     * The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
     * @type {string}
     * @memberof Item
     */
    institution_id?: string;
    /**
     * The URL registered to receive webhooks for the Item.
     * @type {string}
     * @memberof Item
     */
    webhook: string | null;
    /**
     * 
     * @type {PlaidError}
     * @memberof Item
     */
    error: PlaidError | null;
    /**
     * A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`.
     * @type {Array<Products>}
     * @memberof Item
     */
    available_products: Array<Products>;
    /**
     * A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here.
     * 
     * @type {Array<Products>}
     * @memberof Item
     */
    billed_products: Array<Products>;
    /**
     * A list of products added to the Item. In almost all cases, this will be the same as the `billed_products` field. For some products, it is possible for the product to be added to an Item but not yet billed (e.g. Assets, before `/asset_report/create` has been called, or Auth or Identity when added as Optional Products but before their endpoints have been called), in which case the product may appear in `products` but not in `billed_products`.
     * 
     * @type {Array<Products>}
     * @memberof Item
     */
    products?: Array<Products>;
    /**
     * A list of products that have gone through consent collection for the Item. Only present for those enabled in the [Data Transparency](https://plaid.com/docs/link/data-transparency-messaging-migration-guide) beta. If you are not enrolled in Data Transparency, this field is not used.
     * 
     * @type {Array<Products>}
     * @memberof Item
     */
    consented_products?: Array<Products>;
    /**
     * The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Linkâ€™s update mode in advance of the consent expiration time.
     * 
     * Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null.
     * 
     * @type {Date}
     * @memberof Item
     */
    consent_expiration_time: Date | null;
    /**
     * Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.
     * 
     * `background` - Item can be updated in the background
     * 
     * `user_present_required` - Item requires user interaction to be updated
     * @type {string}
     * @memberof Item
     */
    update_type: ItemUpdateTypeEnum;
}


/**
 * @export
 */
export const ItemUpdateTypeEnum = {
    Background: 'background',
    UserPresentRequired: 'user_present_required'
} as const;
export type ItemUpdateTypeEnum = typeof ItemUpdateTypeEnum[keyof typeof ItemUpdateTypeEnum];


/**
 * Check if a given object implements the Item interface.
 */
export function instanceOfItem(value: object): boolean {
    if (!('item_id' in value)) return false;
    if (!('webhook' in value)) return false;
    if (!('error' in value)) return false;
    if (!('available_products' in value)) return false;
    if (!('billed_products' in value)) return false;
    if (!('consent_expiration_time' in value)) return false;
    if (!('update_type' in value)) return false;
    return true;
}

export function ItemFromJSON(json: any): Item {
    return ItemFromJSONTyped(json, false);
}

export function ItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Item {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'item_id': json['item_id'],
        'institution_id': json['institution_id'] == null ? undefined : json['institution_id'],
        'webhook': json['webhook'],
        'error': PlaidErrorFromJSON(json['error']),
        'available_products': ((json['available_products'] as Array<any>).map(ProductsFromJSON)),
        'billed_products': ((json['billed_products'] as Array<any>).map(ProductsFromJSON)),
        'products': json['products'] == null ? undefined : ((json['products'] as Array<any>).map(ProductsFromJSON)),
        'consented_products': json['consented_products'] == null ? undefined : ((json['consented_products'] as Array<any>).map(ProductsFromJSON)),
        'consent_expiration_time': (json['consent_expiration_time'] == null ? null : new Date(json['consent_expiration_time'])),
        'update_type': json['update_type'],
    };
}

export function ItemToJSON(value?: Item | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'item_id': value['item_id'],
        'institution_id': value['institution_id'],
        'webhook': value['webhook'],
        'error': PlaidErrorToJSON(value['error']),
        'available_products': ((value['available_products'] as Array<any>).map(ProductsToJSON)),
        'billed_products': ((value['billed_products'] as Array<any>).map(ProductsToJSON)),
        'products': value['products'] == null ? undefined : ((value['products'] as Array<any>).map(ProductsToJSON)),
        'consented_products': value['consented_products'] == null ? undefined : ((value['consented_products'] as Array<any>).map(ProductsToJSON)),
        'consent_expiration_time': (value['consent_expiration_time'] == null ? null : (value['consent_expiration_time'] as any).toISOString()),
        'update_type': value['update_type'],
    };
}

