/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Scopes } from './Scopes';
import {
    ScopesFromJSON,
    ScopesFromJSONTyped,
    ScopesToJSON,
} from './Scopes';
import type { ScopesContext } from './ScopesContext';
import {
    ScopesContextFromJSON,
    ScopesContextFromJSONTyped,
    ScopesContextToJSON,
} from './ScopesContext';

/**
 * ItemApplicationScopesUpdateRequest defines the request schema for `/item/application/scopes/update`
 * @export
 * @interface ItemApplicationScopesUpdateRequest
 */
export interface ItemApplicationScopesUpdateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    access_token: string;
    /**
     * This field will map to the application ID that is returned from /item/application/list, or provided to the institution in an oauth redirect.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    application_id: string;
    /**
     * 
     * @type {Scopes}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    scopes: Scopes;
    /**
     * When scopes are updated during enrollment, this field must be populated with the state sent to the partner in the OAuth Login URI. This field is required when the context is `ENROLLMENT`.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    state?: string;
    /**
     * 
     * @type {ScopesContext}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    context: ScopesContext;
}

/**
 * Check if a given object implements the ItemApplicationScopesUpdateRequest interface.
 */
export function instanceOfItemApplicationScopesUpdateRequest(value: object): boolean {
    if (!('access_token' in value)) return false;
    if (!('application_id' in value)) return false;
    if (!('scopes' in value)) return false;
    if (!('context' in value)) return false;
    return true;
}

export function ItemApplicationScopesUpdateRequestFromJSON(json: any): ItemApplicationScopesUpdateRequest {
    return ItemApplicationScopesUpdateRequestFromJSONTyped(json, false);
}

export function ItemApplicationScopesUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemApplicationScopesUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'access_token': json['access_token'],
        'application_id': json['application_id'],
        'scopes': ScopesFromJSON(json['scopes']),
        'state': json['state'] == null ? undefined : json['state'],
        'context': ScopesContextFromJSON(json['context']),
    };
}

export function ItemApplicationScopesUpdateRequestToJSON(value?: ItemApplicationScopesUpdateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'access_token': value['access_token'],
        'application_id': value['application_id'],
        'scopes': ScopesToJSON(value['scopes']),
        'state': value['state'],
        'context': ScopesContextToJSON(value['context']),
    };
}

