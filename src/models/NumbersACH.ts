/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Identifying information for transferring money to or from a US account via ACH or wire transfer.
 * @export
 * @interface NumbersACH
 */
export interface NumbersACH {
    [key: string]: any | any;
    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersACH
     */
    account_id: string;
    /**
     * The ACH account number for the account.
     * 
     * Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue "tokenized" routing and account numbers, which are not the user's actual account and routing numbers. These tokenized account numbers (also known as TANs) should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will no longer work.
     * @type {string}
     * @memberof NumbersACH
     */
    account: string;
    /**
     * The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.
     * @type {string}
     * @memberof NumbersACH
     */
    routing: string;
    /**
     * The wire transfer routing number for the account, if available
     * @type {string}
     * @memberof NumbersACH
     */
    wire_routing: string | null;
    /**
     * Whether the account supports ACH transfers into the account
     * @type {boolean}
     * @memberof NumbersACH
     */
    can_transfer_in?: boolean;
    /**
     * Whether the account supports ACH transfers out of the account
     * @type {boolean}
     * @memberof NumbersACH
     */
    can_transfer_out?: boolean;
}

/**
 * Check if a given object implements the NumbersACH interface.
 */
export function instanceOfNumbersACH(value: object): boolean {
    if (!('account_id' in value)) return false;
    if (!('account' in value)) return false;
    if (!('routing' in value)) return false;
    if (!('wire_routing' in value)) return false;
    return true;
}

export function NumbersACHFromJSON(json: any): NumbersACH {
    return NumbersACHFromJSONTyped(json, false);
}

export function NumbersACHFromJSONTyped(json: any, ignoreDiscriminator: boolean): NumbersACH {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'account_id': json['account_id'],
        'account': json['account'],
        'routing': json['routing'],
        'wire_routing': json['wire_routing'],
        'can_transfer_in': json['can_transfer_in'] == null ? undefined : json['can_transfer_in'],
        'can_transfer_out': json['can_transfer_out'] == null ? undefined : json['can_transfer_out'],
    };
}

export function NumbersACHToJSON(value?: NumbersACH | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'account_id': value['account_id'],
        'account': value['account'],
        'routing': value['routing'],
        'wire_routing': value['wire_routing'],
        'can_transfer_in': value['can_transfer_in'],
        'can_transfer_out': value['can_transfer_out'],
    };
}

