/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Details about the option security.
 * 
 * For the Sandbox environment, this data is currently only available if the item is using a custom configuration object, and the `ticker` field of the custom security follows the [OCC Option Symbol](https://en.wikipedia.org/wiki/Option_symbol#The_OCC_Option_Symbol) standard with no spaces.
 * @export
 * @interface OptionContract
 */
export interface OptionContract {
    [key: string]: any | any;
    /**
     * The type of this option contract. It is one of:
     * 
     * `put`: for Put option contracts
     * 
     * `call`: for Call option contracts
     * @type {string}
     * @memberof OptionContract
     */
    contract_type: string;
    /**
     * The expiration date for this option contract, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {Date}
     * @memberof OptionContract
     */
    expiration_date: Date;
    /**
     * The strike price for this option contract, per share of security.
     * @type {number}
     * @memberof OptionContract
     */
    strike_price: number;
    /**
     * The ticker of the underlying security for this option contract.
     * @type {string}
     * @memberof OptionContract
     */
    underlying_security_ticker: string;
}

/**
 * Check if a given object implements the OptionContract interface.
 */
export function instanceOfOptionContract(value: object): boolean {
    if (!('contract_type' in value)) return false;
    if (!('expiration_date' in value)) return false;
    if (!('strike_price' in value)) return false;
    if (!('underlying_security_ticker' in value)) return false;
    return true;
}

export function OptionContractFromJSON(json: any): OptionContract {
    return OptionContractFromJSONTyped(json, false);
}

export function OptionContractFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptionContract {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'contract_type': json['contract_type'],
        'expiration_date': (new Date(json['expiration_date'])),
        'strike_price': json['strike_price'],
        'underlying_security_ticker': json['underlying_security_ticker'],
    };
}

export function OptionContractToJSON(value?: OptionContract | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'contract_type': value['contract_type'],
        'expiration_date': ((value['expiration_date']).toISOString().substring(0,10)),
        'strike_price': value['strike_price'],
        'underlying_security_ticker': value['underlying_security_ticker'],
    };
}

