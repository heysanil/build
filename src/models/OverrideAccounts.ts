/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountSubtype } from './AccountSubtype';
import {
    AccountSubtypeFromJSON,
    AccountSubtypeFromJSONTyped,
    AccountSubtypeToJSON,
} from './AccountSubtype';
import type { HoldingsOverride } from './HoldingsOverride';
import {
    HoldingsOverrideFromJSON,
    HoldingsOverrideFromJSONTyped,
    HoldingsOverrideToJSON,
} from './HoldingsOverride';
import type { IncomeOverride } from './IncomeOverride';
import {
    IncomeOverrideFromJSON,
    IncomeOverrideFromJSONTyped,
    IncomeOverrideToJSON,
} from './IncomeOverride';
import type { InflowModel } from './InflowModel';
import {
    InflowModelFromJSON,
    InflowModelFromJSONTyped,
    InflowModelToJSON,
} from './InflowModel';
import type { InvestmentsTransactionsOverride } from './InvestmentsTransactionsOverride';
import {
    InvestmentsTransactionsOverrideFromJSON,
    InvestmentsTransactionsOverrideFromJSONTyped,
    InvestmentsTransactionsOverrideToJSON,
} from './InvestmentsTransactionsOverride';
import type { LiabilityOverride } from './LiabilityOverride';
import {
    LiabilityOverrideFromJSON,
    LiabilityOverrideFromJSONTyped,
    LiabilityOverrideToJSON,
} from './LiabilityOverride';
import type { Meta } from './Meta';
import {
    MetaFromJSON,
    MetaFromJSONTyped,
    MetaToJSON,
} from './Meta';
import type { Numbers } from './Numbers';
import {
    NumbersFromJSON,
    NumbersFromJSONTyped,
    NumbersToJSON,
} from './Numbers';
import type { OverrideAccountType } from './OverrideAccountType';
import {
    OverrideAccountTypeFromJSON,
    OverrideAccountTypeFromJSONTyped,
    OverrideAccountTypeToJSON,
} from './OverrideAccountType';
import type { OwnerOverride } from './OwnerOverride';
import {
    OwnerOverrideFromJSON,
    OwnerOverrideFromJSONTyped,
    OwnerOverrideToJSON,
} from './OwnerOverride';
import type { TransactionOverride } from './TransactionOverride';
import {
    TransactionOverrideFromJSON,
    TransactionOverrideFromJSONTyped,
    TransactionOverrideToJSON,
} from './TransactionOverride';

/**
 * Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
 * @export
 * @interface OverrideAccounts
 */
export interface OverrideAccounts {
    [key: string]: any | any;
    /**
     * 
     * @type {OverrideAccountType}
     * @memberof OverrideAccounts
     */
    type: OverrideAccountType;
    /**
     * 
     * @type {AccountSubtype}
     * @memberof OverrideAccounts
     */
    subtype: AccountSubtype | null;
    /**
     * If provided, the account will start with this amount as the current balance.
     * 
     * @type {number}
     * @memberof OverrideAccounts
     */
    starting_balance: number;
    /**
     * If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
     * @type {number}
     * @memberof OverrideAccounts
     */
    force_available_balance: number;
    /**
     * ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
     * @type {string}
     * @memberof OverrideAccounts
     */
    currency: string;
    /**
     * 
     * @type {Meta}
     * @memberof OverrideAccounts
     */
    meta: Meta;
    /**
     * 
     * @type {Numbers}
     * @memberof OverrideAccounts
     */
    numbers: Numbers;
    /**
     * Specify the list of transactions on the account.
     * @type {Array<TransactionOverride>}
     * @memberof OverrideAccounts
     */
    transactions: Array<TransactionOverride>;
    /**
     * 
     * @type {HoldingsOverride}
     * @memberof OverrideAccounts
     */
    holdings?: HoldingsOverride;
    /**
     * 
     * @type {InvestmentsTransactionsOverride}
     * @memberof OverrideAccounts
     */
    investment_transactions?: InvestmentsTransactionsOverride;
    /**
     * 
     * @type {OwnerOverride}
     * @memberof OverrideAccounts
     */
    identity: OwnerOverride;
    /**
     * 
     * @type {LiabilityOverride}
     * @memberof OverrideAccounts
     */
    liability: LiabilityOverride;
    /**
     * 
     * @type {InflowModel}
     * @memberof OverrideAccounts
     */
    inflow_model: InflowModel;
    /**
     * 
     * @type {IncomeOverride}
     * @memberof OverrideAccounts
     */
    income?: IncomeOverride;
}

/**
 * Check if a given object implements the OverrideAccounts interface.
 */
export function instanceOfOverrideAccounts(value: object): boolean {
    if (!('type' in value)) return false;
    if (!('subtype' in value)) return false;
    if (!('starting_balance' in value)) return false;
    if (!('force_available_balance' in value)) return false;
    if (!('currency' in value)) return false;
    if (!('meta' in value)) return false;
    if (!('numbers' in value)) return false;
    if (!('transactions' in value)) return false;
    if (!('identity' in value)) return false;
    if (!('liability' in value)) return false;
    if (!('inflow_model' in value)) return false;
    return true;
}

export function OverrideAccountsFromJSON(json: any): OverrideAccounts {
    return OverrideAccountsFromJSONTyped(json, false);
}

export function OverrideAccountsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OverrideAccounts {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'type': OverrideAccountTypeFromJSON(json['type']),
        'subtype': AccountSubtypeFromJSON(json['subtype']),
        'starting_balance': json['starting_balance'],
        'force_available_balance': json['force_available_balance'],
        'currency': json['currency'],
        'meta': MetaFromJSON(json['meta']),
        'numbers': NumbersFromJSON(json['numbers']),
        'transactions': ((json['transactions'] as Array<any>).map(TransactionOverrideFromJSON)),
        'holdings': json['holdings'] == null ? undefined : HoldingsOverrideFromJSON(json['holdings']),
        'investment_transactions': json['investment_transactions'] == null ? undefined : InvestmentsTransactionsOverrideFromJSON(json['investment_transactions']),
        'identity': OwnerOverrideFromJSON(json['identity']),
        'liability': LiabilityOverrideFromJSON(json['liability']),
        'inflow_model': InflowModelFromJSON(json['inflow_model']),
        'income': json['income'] == null ? undefined : IncomeOverrideFromJSON(json['income']),
    };
}

export function OverrideAccountsToJSON(value?: OverrideAccounts | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'type': OverrideAccountTypeToJSON(value['type']),
        'subtype': AccountSubtypeToJSON(value['subtype']),
        'starting_balance': value['starting_balance'],
        'force_available_balance': value['force_available_balance'],
        'currency': value['currency'],
        'meta': MetaToJSON(value['meta']),
        'numbers': NumbersToJSON(value['numbers']),
        'transactions': ((value['transactions'] as Array<any>).map(TransactionOverrideToJSON)),
        'holdings': HoldingsOverrideToJSON(value['holdings']),
        'investment_transactions': InvestmentsTransactionsOverrideToJSON(value['investment_transactions']),
        'identity': OwnerOverrideToJSON(value['identity']),
        'liability': LiabilityOverrideToJSON(value['liability']),
        'inflow_model': InflowModelToJSON(value['inflow_model']),
        'income': IncomeOverrideToJSON(value['income']),
    };
}

