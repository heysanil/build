/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExternalPaymentInitiationConsentOptions } from './ExternalPaymentInitiationConsentOptions';
import {
    ExternalPaymentInitiationConsentOptionsFromJSON,
    ExternalPaymentInitiationConsentOptionsFromJSONTyped,
    ExternalPaymentInitiationConsentOptionsToJSON,
} from './ExternalPaymentInitiationConsentOptions';
import type { PaymentInitiationConsentConstraints } from './PaymentInitiationConsentConstraints';
import {
    PaymentInitiationConsentConstraintsFromJSON,
    PaymentInitiationConsentConstraintsFromJSONTyped,
    PaymentInitiationConsentConstraintsToJSON,
} from './PaymentInitiationConsentConstraints';
import type { PaymentInitiationConsentScope } from './PaymentInitiationConsentScope';
import {
    PaymentInitiationConsentScopeFromJSON,
    PaymentInitiationConsentScopeFromJSONTyped,
    PaymentInitiationConsentScopeToJSON,
} from './PaymentInitiationConsentScope';

/**
 * PaymentInitiationConsentCreateRequest defines the request schema for `/payment_initiation/consent/create`
 * @export
 * @interface PaymentInitiationConsentCreateRequest
 */
export interface PaymentInitiationConsentCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    secret?: string;
    /**
     * The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    recipient_id: string;
    /**
     * A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    reference: string;
    /**
     * An array of payment consent scopes.
     * @type {Set<PaymentInitiationConsentScope>}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    scopes: Set<PaymentInitiationConsentScope>;
    /**
     * 
     * @type {PaymentInitiationConsentConstraints}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    constraints: PaymentInitiationConsentConstraints;
    /**
     * 
     * @type {ExternalPaymentInitiationConsentOptions}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    options?: ExternalPaymentInitiationConsentOptions;
}

/**
 * Check if a given object implements the PaymentInitiationConsentCreateRequest interface.
 */
export function instanceOfPaymentInitiationConsentCreateRequest(value: object): boolean {
    if (!('recipient_id' in value)) return false;
    if (!('reference' in value)) return false;
    if (!('scopes' in value)) return false;
    if (!('constraints' in value)) return false;
    return true;
}

export function PaymentInitiationConsentCreateRequestFromJSON(json: any): PaymentInitiationConsentCreateRequest {
    return PaymentInitiationConsentCreateRequestFromJSONTyped(json, false);
}

export function PaymentInitiationConsentCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentInitiationConsentCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'recipient_id': json['recipient_id'],
        'reference': json['reference'],
        'scopes': (new Set((json['scopes'] as Array<any>).map(PaymentInitiationConsentScopeFromJSON))),
        'constraints': PaymentInitiationConsentConstraintsFromJSON(json['constraints']),
        'options': json['options'] == null ? undefined : ExternalPaymentInitiationConsentOptionsFromJSON(json['options']),
    };
}

export function PaymentInitiationConsentCreateRequestToJSON(value?: PaymentInitiationConsentCreateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'recipient_id': value['recipient_id'],
        'reference': value['reference'],
        'scopes': (Array.from(value['scopes'] as Set<any>).map(PaymentInitiationConsentScopeToJSON)),
        'constraints': PaymentInitiationConsentConstraintsToJSON(value['constraints']),
        'options': ExternalPaymentInitiationConsentOptionsToJSON(value['options']),
    };
}

