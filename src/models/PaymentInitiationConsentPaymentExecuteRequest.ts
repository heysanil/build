/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaymentAmount } from './PaymentAmount';
import {
    PaymentAmountFromJSON,
    PaymentAmountFromJSONTyped,
    PaymentAmountToJSON,
} from './PaymentAmount';
import type { PaymentInitiationConsentScope } from './PaymentInitiationConsentScope';
import {
    PaymentInitiationConsentScopeFromJSON,
    PaymentInitiationConsentScopeFromJSONTyped,
    PaymentInitiationConsentScopeToJSON,
} from './PaymentInitiationConsentScope';

/**
 * PaymentInitiationConsentPaymentExecuteRequest defines the request schema for `/payment_initiation/consent/payment/execute`
 * @export
 * @interface PaymentInitiationConsentPaymentExecuteRequest
 */
export interface PaymentInitiationConsentPaymentExecuteRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    secret?: string;
    /**
     * The consent ID.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    consent_id: string;
    /**
     * 
     * @type {PaymentAmount}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    amount: PaymentAmount;
    /**
     * A random key provided by the client, per unique consent payment. Maximum of 128 characters.
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    idempotency_key: string;
    /**
     * A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them).
     * If not provided, Plaid will automatically fall back to the reference from consent. In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it.
     * Some institutions may limit the reference to less than 18 characters. If necessary, Plaid will adjust the reference by truncating it to fit the institution's requirements.
     * Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    reference?: string;
    /**
     * 
     * @type {PaymentInitiationConsentScope}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    scope?: PaymentInitiationConsentScope;
}

/**
 * Check if a given object implements the PaymentInitiationConsentPaymentExecuteRequest interface.
 */
export function instanceOfPaymentInitiationConsentPaymentExecuteRequest(value: object): boolean {
    if (!('consent_id' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('idempotency_key' in value)) return false;
    return true;
}

export function PaymentInitiationConsentPaymentExecuteRequestFromJSON(json: any): PaymentInitiationConsentPaymentExecuteRequest {
    return PaymentInitiationConsentPaymentExecuteRequestFromJSONTyped(json, false);
}

export function PaymentInitiationConsentPaymentExecuteRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentInitiationConsentPaymentExecuteRequest {
    if (json == null) {
        return json;
    }
    return {

        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'consent_id': json['consent_id'],
        'amount': PaymentAmountFromJSON(json['amount']),
        'idempotency_key': json['idempotency_key'],
        'reference': json['reference'] == null ? undefined : json['reference'],
        'scope': json['scope'] == null ? undefined : PaymentInitiationConsentScopeFromJSON(json['scope']),
    };
}

export function PaymentInitiationConsentPaymentExecuteRequestToJSON(value?: PaymentInitiationConsentPaymentExecuteRequest | null): any {
    if (value == null) {
        return value;
    }
    return {

        'client_id': value['client_id'],
        'secret': value['secret'],
        'consent_id': value['consent_id'],
        'amount': PaymentAmountToJSON(value['amount']),
        'idempotency_key': value['idempotency_key'],
        'reference': value['reference'],
        'scope': PaymentInitiationConsentScopeToJSON(value['scope']),
    };
}

