/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExternalPaymentRefundDetails } from './ExternalPaymentRefundDetails';
import {
    ExternalPaymentRefundDetailsFromJSON,
    ExternalPaymentRefundDetailsFromJSONTyped,
    ExternalPaymentRefundDetailsToJSON,
} from './ExternalPaymentRefundDetails';
import type { ExternalPaymentScheduleGet } from './ExternalPaymentScheduleGet';
import {
    ExternalPaymentScheduleGetFromJSON,
    ExternalPaymentScheduleGetFromJSONTyped,
    ExternalPaymentScheduleGetToJSON,
} from './ExternalPaymentScheduleGet';
import type { PaymentAmount } from './PaymentAmount';
import {
    PaymentAmountFromJSON,
    PaymentAmountFromJSONTyped,
    PaymentAmountToJSON,
} from './PaymentAmount';
import type { PaymentAmountRefunded } from './PaymentAmountRefunded';
import {
    PaymentAmountRefundedFromJSON,
    PaymentAmountRefundedFromJSONTyped,
    PaymentAmountRefundedToJSON,
} from './PaymentAmountRefunded';
import type { PaymentInitiationPaymentStatus } from './PaymentInitiationPaymentStatus';
import {
    PaymentInitiationPaymentStatusFromJSON,
    PaymentInitiationPaymentStatusFromJSONTyped,
    PaymentInitiationPaymentStatusToJSON,
} from './PaymentInitiationPaymentStatus';
import type { PaymentScheme } from './PaymentScheme';
import {
    PaymentSchemeFromJSON,
    PaymentSchemeFromJSONTyped,
    PaymentSchemeToJSON,
} from './PaymentScheme';
import type { SenderBACSNullable } from './SenderBACSNullable';
import {
    SenderBACSNullableFromJSON,
    SenderBACSNullableFromJSONTyped,
    SenderBACSNullableToJSON,
} from './SenderBACSNullable';

/**
 * PaymentInitiationPayment defines a payment initiation payment
 * @export
 * @interface PaymentInitiationPayment
 */
export interface PaymentInitiationPayment {
    [key: string]: any | any;
    /**
     * The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    payment_id: string;
    /**
     * 
     * @type {PaymentAmount}
     * @memberof PaymentInitiationPayment
     */
    amount: PaymentAmount;
    /**
     * 
     * @type {PaymentInitiationPaymentStatus}
     * @memberof PaymentInitiationPayment
     */
    status: PaymentInitiationPaymentStatus;
    /**
     * The ID of the recipient
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    recipient_id: string;
    /**
     * A reference for the payment.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    reference: string;
    /**
     * The value of the reference sent to the bank after adjustment to pass bank validation rules.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    adjusted_reference?: string;
    /**
     * The date and time of the last time the `status` was updated, in IS0 8601 format
     * @type {Date}
     * @memberof PaymentInitiationPayment
     */
    last_status_update: Date;
    /**
     * 
     * @type {ExternalPaymentScheduleGet}
     * @memberof PaymentInitiationPayment
     */
    schedule?: ExternalPaymentScheduleGet;
    /**
     * 
     * @type {ExternalPaymentRefundDetails}
     * @memberof PaymentInitiationPayment
     */
    refund_details?: ExternalPaymentRefundDetails;
    /**
     * 
     * @type {SenderBACSNullable}
     * @memberof PaymentInitiationPayment
     */
    bacs: SenderBACSNullable | null;
    /**
     * The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    iban: string | null;
    /**
     * Refund IDs associated with the payment.
     * @type {Array<string>}
     * @memberof PaymentInitiationPayment
     */
    refund_ids?: Array<string>;
    /**
     * 
     * @type {PaymentAmountRefunded}
     * @memberof PaymentInitiationPayment
     */
    amount_refunded?: PaymentAmountRefunded;
    /**
     * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    wallet_id?: string;
    /**
     * 
     * @type {PaymentScheme}
     * @memberof PaymentInitiationPayment
     */
    scheme?: PaymentScheme;
    /**
     * 
     * @type {PaymentScheme}
     * @memberof PaymentInitiationPayment
     */
    adjusted_scheme?: PaymentScheme;
    /**
     * The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    consent_id?: string;
    /**
     * The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    transaction_id?: string;
}

/**
 * Check if a given object implements the PaymentInitiationPayment interface.
 */
export function instanceOfPaymentInitiationPayment(value: object): boolean {
    if (!('payment_id' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('status' in value)) return false;
    if (!('recipient_id' in value)) return false;
    if (!('reference' in value)) return false;
    if (!('last_status_update' in value)) return false;
    if (!('bacs' in value)) return false;
    if (!('iban' in value)) return false;
    return true;
}

export function PaymentInitiationPaymentFromJSON(json: any): PaymentInitiationPayment {
    return PaymentInitiationPaymentFromJSONTyped(json, false);
}

export function PaymentInitiationPaymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentInitiationPayment {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'payment_id': json['payment_id'],
        'amount': PaymentAmountFromJSON(json['amount']),
        'status': PaymentInitiationPaymentStatusFromJSON(json['status']),
        'recipient_id': json['recipient_id'],
        'reference': json['reference'],
        'adjusted_reference': json['adjusted_reference'] == null ? undefined : json['adjusted_reference'],
        'last_status_update': (new Date(json['last_status_update'])),
        'schedule': json['schedule'] == null ? undefined : ExternalPaymentScheduleGetFromJSON(json['schedule']),
        'refund_details': json['refund_details'] == null ? undefined : ExternalPaymentRefundDetailsFromJSON(json['refund_details']),
        'bacs': SenderBACSNullableFromJSON(json['bacs']),
        'iban': json['iban'],
        'refund_ids': json['refund_ids'] == null ? undefined : json['refund_ids'],
        'amount_refunded': json['amount_refunded'] == null ? undefined : PaymentAmountRefundedFromJSON(json['amount_refunded']),
        'wallet_id': json['wallet_id'] == null ? undefined : json['wallet_id'],
        'scheme': json['scheme'] == null ? undefined : PaymentSchemeFromJSON(json['scheme']),
        'adjusted_scheme': json['adjusted_scheme'] == null ? undefined : PaymentSchemeFromJSON(json['adjusted_scheme']),
        'consent_id': json['consent_id'] == null ? undefined : json['consent_id'],
        'transaction_id': json['transaction_id'] == null ? undefined : json['transaction_id'],
    };
}

export function PaymentInitiationPaymentToJSON(value?: PaymentInitiationPayment | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'payment_id': value['payment_id'],
        'amount': PaymentAmountToJSON(value['amount']),
        'status': PaymentInitiationPaymentStatusToJSON(value['status']),
        'recipient_id': value['recipient_id'],
        'reference': value['reference'],
        'adjusted_reference': value['adjusted_reference'],
        'last_status_update': ((value['last_status_update']).toISOString()),
        'schedule': ExternalPaymentScheduleGetToJSON(value['schedule']),
        'refund_details': ExternalPaymentRefundDetailsToJSON(value['refund_details']),
        'bacs': SenderBACSNullableToJSON(value['bacs']),
        'iban': value['iban'],
        'refund_ids': value['refund_ids'],
        'amount_refunded': PaymentAmountRefundedToJSON(value['amount_refunded']),
        'wallet_id': value['wallet_id'],
        'scheme': PaymentSchemeToJSON(value['scheme']),
        'adjusted_scheme': PaymentSchemeToJSON(value['adjusted_scheme']),
        'consent_id': value['consent_id'],
        'transaction_id': value['transaction_id'],
    };
}

