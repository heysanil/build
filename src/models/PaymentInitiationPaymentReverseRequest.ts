/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaymentAmountToRefund } from './PaymentAmountToRefund';
import {
    PaymentAmountToRefundFromJSON,
    PaymentAmountToRefundFromJSONTyped,
    PaymentAmountToRefundToJSON,
} from './PaymentAmountToRefund';

/**
 * PaymentInitiationPaymentReverseRequest defines the request schema for `/payment_initiation/payment/reverse`
 * @export
 * @interface PaymentInitiationPaymentReverseRequest
 */
export interface PaymentInitiationPaymentReverseRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    secret?: string;
    /**
     * The ID of the payment to reverse
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    payment_id: string;
    /**
     * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    idempotency_key: string;
    /**
     * A reference for the refund. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    reference: string;
    /**
     * 
     * @type {PaymentAmountToRefund}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    amount?: PaymentAmountToRefund;
}

/**
 * Check if a given object implements the PaymentInitiationPaymentReverseRequest interface.
 */
export function instanceOfPaymentInitiationPaymentReverseRequest(value: object): boolean {
    if (!('payment_id' in value)) return false;
    if (!('idempotency_key' in value)) return false;
    if (!('reference' in value)) return false;
    return true;
}

export function PaymentInitiationPaymentReverseRequestFromJSON(json: any): PaymentInitiationPaymentReverseRequest {
    return PaymentInitiationPaymentReverseRequestFromJSONTyped(json, false);
}

export function PaymentInitiationPaymentReverseRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentInitiationPaymentReverseRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'payment_id': json['payment_id'],
        'idempotency_key': json['idempotency_key'],
        'reference': json['reference'],
        'amount': json['amount'] == null ? undefined : PaymentAmountToRefundFromJSON(json['amount']),
    };
}

export function PaymentInitiationPaymentReverseRequestToJSON(value?: PaymentInitiationPaymentReverseRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'payment_id': value['payment_id'],
        'idempotency_key': value['idempotency_key'],
        'reference': value['reference'],
        'amount': PaymentAmountToRefundToJSON(value['amount']),
    };
}

