/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdentityVerificationDocumentAddressResponse } from './IdentityVerificationDocumentAddressResponse';
import {
    IdentityVerificationDocumentAddressResponseFromJSON,
    IdentityVerificationDocumentAddressResponseFromJSONTyped,
    IdentityVerificationDocumentAddressResponseToJSON,
} from './IdentityVerificationDocumentAddressResponse';
import type { PhysicalDocumentCategory } from './PhysicalDocumentCategory';
import {
    PhysicalDocumentCategoryFromJSON,
    PhysicalDocumentCategoryFromJSONTyped,
    PhysicalDocumentCategoryToJSON,
} from './PhysicalDocumentCategory';

/**
 * Data extracted from a user-submitted document.
 * @export
 * @interface PhysicalDocumentExtractedData
 */
export interface PhysicalDocumentExtractedData {
    [key: string]: any | any;
    /**
     * Alpha-numeric ID number extracted via OCR from the user's document image.
     * @type {string}
     * @memberof PhysicalDocumentExtractedData
     */
    id_number: string | null;
    /**
     * 
     * @type {PhysicalDocumentCategory}
     * @memberof PhysicalDocumentExtractedData
     */
    category: PhysicalDocumentCategory;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {Date}
     * @memberof PhysicalDocumentExtractedData
     */
    expiration_date: Date | null;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof PhysicalDocumentExtractedData
     */
    issuing_country: string;
    /**
     * An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
     * @type {string}
     * @memberof PhysicalDocumentExtractedData
     */
    issuing_region: string | null;
    /**
     * A date extracted from the document in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {Date}
     * @memberof PhysicalDocumentExtractedData
     */
    date_of_birth: Date | null;
    /**
     * 
     * @type {IdentityVerificationDocumentAddressResponse}
     * @memberof PhysicalDocumentExtractedData
     */
    address: IdentityVerificationDocumentAddressResponse | null;
}

/**
 * Check if a given object implements the PhysicalDocumentExtractedData interface.
 */
export function instanceOfPhysicalDocumentExtractedData(value: object): boolean {
    if (!('id_number' in value)) return false;
    if (!('category' in value)) return false;
    if (!('expiration_date' in value)) return false;
    if (!('issuing_country' in value)) return false;
    if (!('issuing_region' in value)) return false;
    if (!('date_of_birth' in value)) return false;
    if (!('address' in value)) return false;
    return true;
}

export function PhysicalDocumentExtractedDataFromJSON(json: any): PhysicalDocumentExtractedData {
    return PhysicalDocumentExtractedDataFromJSONTyped(json, false);
}

export function PhysicalDocumentExtractedDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): PhysicalDocumentExtractedData {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'id_number': json['id_number'],
        'category': PhysicalDocumentCategoryFromJSON(json['category']),
        'expiration_date': (json['expiration_date'] == null ? null : new Date(json['expiration_date'])),
        'issuing_country': json['issuing_country'],
        'issuing_region': json['issuing_region'],
        'date_of_birth': (json['date_of_birth'] == null ? null : new Date(json['date_of_birth'])),
        'address': IdentityVerificationDocumentAddressResponseFromJSON(json['address']),
    };
}

export function PhysicalDocumentExtractedDataToJSON(value?: PhysicalDocumentExtractedData | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'id_number': value['id_number'],
        'category': PhysicalDocumentCategoryToJSON(value['category']),
        'expiration_date': (value['expiration_date'] == null ? null : (value['expiration_date'] as any).toISOString().substring(0,10)),
        'issuing_country': value['issuing_country'],
        'issuing_region': value['issuing_region'],
        'date_of_birth': (value['date_of_birth'] == null ? null : (value['date_of_birth'] as any).toISOString().substring(0,10)),
        'address': IdentityVerificationDocumentAddressResponseToJSON(value['address']),
    };
}

