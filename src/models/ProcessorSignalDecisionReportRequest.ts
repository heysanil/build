/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SignalDecisionOutcome } from './SignalDecisionOutcome';
import {
    SignalDecisionOutcomeFromJSON,
    SignalDecisionOutcomeFromJSONTyped,
    SignalDecisionOutcomeToJSON,
} from './SignalDecisionOutcome';
import type { SignalPaymentMethod } from './SignalPaymentMethod';
import {
    SignalPaymentMethodFromJSON,
    SignalPaymentMethodFromJSONTyped,
    SignalPaymentMethodToJSON,
} from './SignalPaymentMethod';

/**
 * ProcessorSignalDecisionReportRequest defines the request schema for `/processor/signal/decision/report`
 * @export
 * @interface ProcessorSignalDecisionReportRequest
 */
export interface ProcessorSignalDecisionReportRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    processor_token: string;
    /**
     * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
     * @type {string}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    client_transaction_id: string;
    /**
     * `true` if the ACH transaction was initiated, `false` otherwise.
     * 
     * This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
     * @type {boolean}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    initiated: boolean;
    /**
     * The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.
     * 
     * For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
     * @type {number}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    days_funds_on_hold?: number;
    /**
     * 
     * @type {SignalDecisionOutcome}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    decision_outcome?: SignalDecisionOutcome;
    /**
     * 
     * @type {SignalPaymentMethod}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    payment_method?: SignalPaymentMethod;
    /**
     * The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
     * @type {number}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    amount_instantly_available?: number;
}

/**
 * Check if a given object implements the ProcessorSignalDecisionReportRequest interface.
 */
export function instanceOfProcessorSignalDecisionReportRequest(value: object): boolean {
    if (!('processor_token' in value)) return false;
    if (!('client_transaction_id' in value)) return false;
    if (!('initiated' in value)) return false;
    return true;
}

export function ProcessorSignalDecisionReportRequestFromJSON(json: any): ProcessorSignalDecisionReportRequest {
    return ProcessorSignalDecisionReportRequestFromJSONTyped(json, false);
}

export function ProcessorSignalDecisionReportRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProcessorSignalDecisionReportRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'processor_token': json['processor_token'],
        'client_transaction_id': json['client_transaction_id'],
        'initiated': json['initiated'],
        'days_funds_on_hold': json['days_funds_on_hold'] == null ? undefined : json['days_funds_on_hold'],
        'decision_outcome': json['decision_outcome'] == null ? undefined : SignalDecisionOutcomeFromJSON(json['decision_outcome']),
        'payment_method': json['payment_method'] == null ? undefined : SignalPaymentMethodFromJSON(json['payment_method']),
        'amount_instantly_available': json['amount_instantly_available'] == null ? undefined : json['amount_instantly_available'],
    };
}

export function ProcessorSignalDecisionReportRequestToJSON(value?: ProcessorSignalDecisionReportRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'processor_token': value['processor_token'],
        'client_transaction_id': value['client_transaction_id'],
        'initiated': value['initiated'],
        'days_funds_on_hold': value['days_funds_on_hold'],
        'decision_outcome': SignalDecisionOutcomeToJSON(value['decision_outcome']),
        'payment_method': SignalPaymentMethodToJSON(value['payment_method']),
        'amount_instantly_available': value['amount_instantly_available'],
    };
}

