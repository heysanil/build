/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * ProcessorTokenCreateRequest defines the request schema for `/processor/token/create`
 * @export
 * @interface ProcessorTokenCreateRequest
 */
export interface ProcessorTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    access_token: string;
    /**
     * The `account_id` value obtained from the `onSuccess` callback in Link
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    account_id: string;
    /**
     * The processor you are integrating with.
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    processor: ProcessorTokenCreateRequestProcessorEnum;
}


/**
 * @export
 */
export const ProcessorTokenCreateRequestProcessorEnum = {
    Dwolla: 'dwolla',
    Galileo: 'galileo',
    ModernTreasury: 'modern_treasury',
    Ocrolus: 'ocrolus',
    Vesta: 'vesta',
    Drivewealth: 'drivewealth',
    Vopay: 'vopay',
    Achq: 'achq',
    Check: 'check',
    Checkbook: 'checkbook',
    Circle: 'circle',
    SilaMoney: 'sila_money',
    Rize: 'rize',
    SvbApi: 'svb_api',
    Unit: 'unit',
    Wyre: 'wyre',
    Lithic: 'lithic',
    Alpaca: 'alpaca',
    Astra: 'astra',
    Moov: 'moov',
    TreasuryPrime: 'treasury_prime',
    Marqeta: 'marqeta',
    Checkout: 'checkout',
    Solid: 'solid',
    Highnote: 'highnote',
    Gemini: 'gemini',
    ApexClearing: 'apex_clearing',
    Gusto: 'gusto',
    Adyen: 'adyen',
    Atomic: 'atomic',
    I2c: 'i2c',
    Wepay: 'wepay',
    Riskified: 'riskified',
    Utb: 'utb',
    AdpRoll: 'adp_roll',
    FortressTrust: 'fortress_trust',
    Bond: 'bond',
    Bakkt: 'bakkt',
    Teal: 'teal',
    ZeroHash: 'zero_hash',
    TabaPay: 'taba_pay',
    Knot: 'knot',
    Sardine: 'sardine',
    Alloy: 'alloy',
    Finix: 'finix'
} as const;
export type ProcessorTokenCreateRequestProcessorEnum = typeof ProcessorTokenCreateRequestProcessorEnum[keyof typeof ProcessorTokenCreateRequestProcessorEnum];


/**
 * Check if a given object implements the ProcessorTokenCreateRequest interface.
 */
export function instanceOfProcessorTokenCreateRequest(value: object): boolean {
    if (!('access_token' in value)) return false;
    if (!('account_id' in value)) return false;
    if (!('processor' in value)) return false;
    return true;
}

export function ProcessorTokenCreateRequestFromJSON(json: any): ProcessorTokenCreateRequest {
    return ProcessorTokenCreateRequestFromJSONTyped(json, false);
}

export function ProcessorTokenCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProcessorTokenCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'access_token': json['access_token'],
        'account_id': json['account_id'],
        'processor': json['processor'],
    };
}

export function ProcessorTokenCreateRequestToJSON(value?: ProcessorTokenCreateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'access_token': value['access_token'],
        'account_id': value['account_id'],
        'processor': value['processor'],
    };
}

