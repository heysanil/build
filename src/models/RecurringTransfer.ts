/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ACHClass } from './ACHClass';
import {
    ACHClassFromJSON,
    ACHClassFromJSONTyped,
    ACHClassToJSON,
} from './ACHClass';
import type { TransferACHNetwork } from './TransferACHNetwork';
import {
    TransferACHNetworkFromJSON,
    TransferACHNetworkFromJSONTyped,
    TransferACHNetworkToJSON,
} from './TransferACHNetwork';
import type { TransferRecurringSchedule } from './TransferRecurringSchedule';
import {
    TransferRecurringScheduleFromJSON,
    TransferRecurringScheduleFromJSONTyped,
    TransferRecurringScheduleToJSON,
} from './TransferRecurringSchedule';
import type { TransferRecurringStatus } from './TransferRecurringStatus';
import {
    TransferRecurringStatusFromJSON,
    TransferRecurringStatusFromJSONTyped,
    TransferRecurringStatusToJSON,
} from './TransferRecurringStatus';
import type { TransferType } from './TransferType';
import {
    TransferTypeFromJSON,
    TransferTypeFromJSONTyped,
    TransferTypeToJSON,
} from './TransferType';
import type { TransferUserInResponse } from './TransferUserInResponse';
import {
    TransferUserInResponseFromJSON,
    TransferUserInResponseFromJSONTyped,
    TransferUserInResponseToJSON,
} from './TransferUserInResponse';

/**
 * Represents a recurring transfer within the Transfers API.
 * @export
 * @interface RecurringTransfer
 */
export interface RecurringTransfer {
    [key: string]: any | any;
    /**
     * Plaid’s unique identifier for a recurring transfer.
     * @type {string}
     * @memberof RecurringTransfer
     */
    recurring_transfer_id: string;
    /**
     * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     * @type {Date}
     * @memberof RecurringTransfer
     */
    created: Date;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * 
     * The next transfer origination date after bank holiday adjustment.
     * @type {Date}
     * @memberof RecurringTransfer
     */
    next_origination_date: Date | null;
    /**
     * Plaid’s unique identifier for a test clock.
     * @type {string}
     * @memberof RecurringTransfer
     */
    test_clock_id?: string;
    /**
     * 
     * @type {TransferType}
     * @memberof RecurringTransfer
     */
    type: TransferType;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
     * @type {string}
     * @memberof RecurringTransfer
     */
    amount: string;
    /**
     * 
     * @type {TransferRecurringStatus}
     * @memberof RecurringTransfer
     */
    status: TransferRecurringStatus;
    /**
     * 
     * @type {ACHClass}
     * @memberof RecurringTransfer
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferACHNetwork}
     * @memberof RecurringTransfer
     */
    network: TransferACHNetwork;
    /**
     * Plaid’s unique identifier for the origination account that was used for this transfer.
     * @type {string}
     * @memberof RecurringTransfer
     * @deprecated
     */
    origination_account_id: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
     * @type {string}
     * @memberof RecurringTransfer
     */
    account_id: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof RecurringTransfer
     */
    funding_account_id: string;
    /**
     * The currency of the transfer amount, e.g. "USD"
     * @type {string}
     * @memberof RecurringTransfer
     */
    iso_currency_code: string;
    /**
     * The description of the recurring transfer.
     * @type {string}
     * @memberof RecurringTransfer
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecurringTransfer
     */
    transfer_ids: Array<string>;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof RecurringTransfer
     */
    user: TransferUserInResponse;
    /**
     * 
     * @type {TransferRecurringSchedule}
     * @memberof RecurringTransfer
     */
    schedule: TransferRecurringSchedule;
}

/**
 * Check if a given object implements the RecurringTransfer interface.
 */
export function instanceOfRecurringTransfer(value: object): boolean {
    if (!('recurring_transfer_id' in value)) return false;
    if (!('created' in value)) return false;
    if (!('next_origination_date' in value)) return false;
    if (!('type' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('status' in value)) return false;
    if (!('network' in value)) return false;
    if (!('origination_account_id' in value)) return false;
    if (!('account_id' in value)) return false;
    if (!('funding_account_id' in value)) return false;
    if (!('iso_currency_code' in value)) return false;
    if (!('description' in value)) return false;
    if (!('transfer_ids' in value)) return false;
    if (!('user' in value)) return false;
    if (!('schedule' in value)) return false;
    return true;
}

export function RecurringTransferFromJSON(json: any): RecurringTransfer {
    return RecurringTransferFromJSONTyped(json, false);
}

export function RecurringTransferFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecurringTransfer {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'recurring_transfer_id': json['recurring_transfer_id'],
        'created': (new Date(json['created'])),
        'next_origination_date': (json['next_origination_date'] == null ? null : new Date(json['next_origination_date'])),
        'test_clock_id': json['test_clock_id'] == null ? undefined : json['test_clock_id'],
        'type': TransferTypeFromJSON(json['type']),
        'amount': json['amount'],
        'status': TransferRecurringStatusFromJSON(json['status']),
        'ach_class': json['ach_class'] == null ? undefined : ACHClassFromJSON(json['ach_class']),
        'network': TransferACHNetworkFromJSON(json['network']),
        'origination_account_id': json['origination_account_id'],
        'account_id': json['account_id'],
        'funding_account_id': json['funding_account_id'],
        'iso_currency_code': json['iso_currency_code'],
        'description': json['description'],
        'transfer_ids': json['transfer_ids'],
        'user': TransferUserInResponseFromJSON(json['user']),
        'schedule': TransferRecurringScheduleFromJSON(json['schedule']),
    };
}

export function RecurringTransferToJSON(value?: RecurringTransfer | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'recurring_transfer_id': value['recurring_transfer_id'],
        'created': ((value['created']).toISOString()),
        'next_origination_date': (value['next_origination_date'] == null ? null : (value['next_origination_date'] as any).toISOString().substring(0,10)),
        'test_clock_id': value['test_clock_id'],
        'type': TransferTypeToJSON(value['type']),
        'amount': value['amount'],
        'status': TransferRecurringStatusToJSON(value['status']),
        'ach_class': ACHClassToJSON(value['ach_class']),
        'network': TransferACHNetworkToJSON(value['network']),
        'origination_account_id': value['origination_account_id'],
        'account_id': value['account_id'],
        'funding_account_id': value['funding_account_id'],
        'iso_currency_code': value['iso_currency_code'],
        'description': value['description'],
        'transfer_ids': value['transfer_ids'],
        'user': TransferUserInResponseToJSON(value['user']),
        'schedule': TransferRecurringScheduleToJSON(value['schedule']),
    };
}

