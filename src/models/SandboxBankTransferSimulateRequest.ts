/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BankTransferFailure } from './BankTransferFailure';
import {
    BankTransferFailureFromJSON,
    BankTransferFailureFromJSONTyped,
    BankTransferFailureToJSON,
} from './BankTransferFailure';

/**
 * Defines the request schema for `/sandbox/bank_transfer/simulate`
 * @export
 * @interface SandboxBankTransferSimulateRequest
 */
export interface SandboxBankTransferSimulateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxBankTransferSimulateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxBankTransferSimulateRequest
     */
    secret?: string;
    /**
     * Plaidâ€™s unique identifier for a bank transfer.
     * @type {string}
     * @memberof SandboxBankTransferSimulateRequest
     */
    bank_transfer_id: string;
    /**
     * The asynchronous event to be simulated. May be: `posted`, `failed`, or `reversed`.
     * 
     * An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:
     * 
     * `pending` --> `failed`
     * 
     * `pending` --> `posted`
     * 
     * `posted` --> `reversed`
     * 
     * @type {string}
     * @memberof SandboxBankTransferSimulateRequest
     */
    event_type: string;
    /**
     * 
     * @type {BankTransferFailure}
     * @memberof SandboxBankTransferSimulateRequest
     */
    failure_reason?: BankTransferFailure;
}

/**
 * Check if a given object implements the SandboxBankTransferSimulateRequest interface.
 */
export function instanceOfSandboxBankTransferSimulateRequest(value: object): boolean {
    if (!('bank_transfer_id' in value)) return false;
    if (!('event_type' in value)) return false;
    return true;
}

export function SandboxBankTransferSimulateRequestFromJSON(json: any): SandboxBankTransferSimulateRequest {
    return SandboxBankTransferSimulateRequestFromJSONTyped(json, false);
}

export function SandboxBankTransferSimulateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SandboxBankTransferSimulateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'bank_transfer_id': json['bank_transfer_id'],
        'event_type': json['event_type'],
        'failure_reason': json['failure_reason'] == null ? undefined : BankTransferFailureFromJSON(json['failure_reason']),
    };
}

export function SandboxBankTransferSimulateRequestToJSON(value?: SandboxBankTransferSimulateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'bank_transfer_id': value['bank_transfer_id'],
        'event_type': value['event_type'],
        'failure_reason': BankTransferFailureToJSON(value['failure_reason']),
    };
}

