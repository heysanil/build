/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferFailure } from './TransferFailure';
import {
    TransferFailureFromJSON,
    TransferFailureFromJSONTyped,
    TransferFailureToJSON,
} from './TransferFailure';

/**
 * Defines the request schema for `/sandbox/transfer/refund/simulate`
 * @export
 * @interface SandboxTransferRefundSimulateRequest
 */
export interface SandboxTransferRefundSimulateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferRefundSimulateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferRefundSimulateRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a refund.
     * @type {string}
     * @memberof SandboxTransferRefundSimulateRequest
     */
    refund_id: string;
    /**
     * Plaid’s unique identifier for a test clock. If provided, the event to be simulated is created at the `virtual_time` on the provided `test_clock`.
     * @type {string}
     * @memberof SandboxTransferRefundSimulateRequest
     */
    test_clock_id?: string;
    /**
     * The asynchronous event to be simulated. May be: `refund.posted`, `refund.settled`, `refund.failed`, or `refund.returned`.
     * 
     * An error will be returned if the event type is incompatible with the current refund status. Compatible status --> event type transitions include:
     * 
     * `refund.pending` --> `refund.failed`
     * 
     * `refund.pending` --> `refund.posted`
     * 
     * `refund.posted` --> `refund.returned`
     * 
     * `refund.posted` --> `refund.settled`
     * 
     * `refund.posted` events can only be simulated if the refunded transfer has been transitioned to settled. This mimics the ordering of events in Production.
     * 
     * @type {string}
     * @memberof SandboxTransferRefundSimulateRequest
     */
    event_type: string;
    /**
     * 
     * @type {TransferFailure}
     * @memberof SandboxTransferRefundSimulateRequest
     */
    failure_reason?: TransferFailure;
}

/**
 * Check if a given object implements the SandboxTransferRefundSimulateRequest interface.
 */
export function instanceOfSandboxTransferRefundSimulateRequest(value: object): boolean {
    if (!('refund_id' in value)) return false;
    if (!('event_type' in value)) return false;
    return true;
}

export function SandboxTransferRefundSimulateRequestFromJSON(json: any): SandboxTransferRefundSimulateRequest {
    return SandboxTransferRefundSimulateRequestFromJSONTyped(json, false);
}

export function SandboxTransferRefundSimulateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SandboxTransferRefundSimulateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'refund_id': json['refund_id'],
        'test_clock_id': json['test_clock_id'] == null ? undefined : json['test_clock_id'],
        'event_type': json['event_type'],
        'failure_reason': json['failure_reason'] == null ? undefined : TransferFailureFromJSON(json['failure_reason']),
    };
}

export function SandboxTransferRefundSimulateRequestToJSON(value?: SandboxTransferRefundSimulateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'refund_id': value['refund_id'],
        'test_clock_id': value['test_clock_id'],
        'event_type': value['event_type'],
        'failure_reason': TransferFailureToJSON(value['failure_reason']),
    };
}

