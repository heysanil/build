/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StatementsStatement } from './StatementsStatement';
import {
    StatementsStatementFromJSON,
    StatementsStatementFromJSONTyped,
    StatementsStatementToJSON,
} from './StatementsStatement';

/**
 * Account associated with the Item.
 * @export
 * @interface StatementsAccount
 */
export interface StatementsAccount {
    [key: string]: any | any;
    /**
     * Plaid's unique identifier for the account.
     * @type {string}
     * @memberof StatementsAccount
     */
    account_id: string;
    /**
     * The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
     * @type {string}
     * @memberof StatementsAccount
     */
    account_mask: string;
    /**
     * The name of the account, either assigned by the user or by the financial institution itself.
     * @type {string}
     * @memberof StatementsAccount
     */
    account_name: string;
    /**
     * The official name of the account as given by the financial institution.
     * @type {string}
     * @memberof StatementsAccount
     */
    account_official_name: string;
    /**
     * The subtype of the account. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     * @type {string}
     * @memberof StatementsAccount
     */
    account_subtype: string;
    /**
     * The type of account. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     * @type {string}
     * @memberof StatementsAccount
     */
    account_type: string;
    /**
     * The list of statements' metadata associated with this account.
     * @type {Array<StatementsStatement>}
     * @memberof StatementsAccount
     */
    statements: Array<StatementsStatement>;
}

/**
 * Check if a given object implements the StatementsAccount interface.
 */
export function instanceOfStatementsAccount(value: object): boolean {
    if (!('account_id' in value)) return false;
    if (!('account_mask' in value)) return false;
    if (!('account_name' in value)) return false;
    if (!('account_official_name' in value)) return false;
    if (!('account_subtype' in value)) return false;
    if (!('account_type' in value)) return false;
    if (!('statements' in value)) return false;
    return true;
}

export function StatementsAccountFromJSON(json: any): StatementsAccount {
    return StatementsAccountFromJSONTyped(json, false);
}

export function StatementsAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): StatementsAccount {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'account_id': json['account_id'],
        'account_mask': json['account_mask'],
        'account_name': json['account_name'],
        'account_official_name': json['account_official_name'],
        'account_subtype': json['account_subtype'],
        'account_type': json['account_type'],
        'statements': ((json['statements'] as Array<any>).map(StatementsStatementFromJSON)),
    };
}

export function StatementsAccountToJSON(value?: StatementsAccount | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'account_id': value['account_id'],
        'account_mask': value['account_mask'],
        'account_name': value['account_name'],
        'account_official_name': value['account_official_name'],
        'account_subtype': value['account_subtype'],
        'account_type': value['account_type'],
        'statements': ((value['statements'] as Array<any>).map(StatementsStatementToJSON)),
    };
}

