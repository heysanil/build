/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';
import type { PaymentMeta } from './PaymentMeta';
import {
    PaymentMetaFromJSON,
    PaymentMetaFromJSONTyped,
    PaymentMetaToJSON,
} from './PaymentMeta';
import type { PersonalFinanceCategory } from './PersonalFinanceCategory';
import {
    PersonalFinanceCategoryFromJSON,
    PersonalFinanceCategoryFromJSONTyped,
    PersonalFinanceCategoryToJSON,
} from './PersonalFinanceCategory';
import type { TransactionCode } from './TransactionCode';
import {
    TransactionCodeFromJSON,
    TransactionCodeFromJSONTyped,
    TransactionCodeToJSON,
} from './TransactionCode';
import type { TransactionCounterparty } from './TransactionCounterparty';
import {
    TransactionCounterpartyFromJSON,
    TransactionCounterpartyFromJSONTyped,
    TransactionCounterpartyToJSON,
} from './TransactionCounterparty';

/**
 * A representation of a transaction
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * The ID of the account in which this transaction occurred.
     * @type {string}
     * @memberof Transaction
     */
    account_id: string;
    /**
     * The settled value of the transaction, denominated in the transactions's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof Transaction
     */
    amount: number;
    /**
     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof Transaction
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
     * 
     * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof Transaction
     */
    unofficial_currency_code: string | null;
    /**
     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * 
     * All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category`, as it provides greater accuracy and more meaningful categorization.
     * 
     * If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {Array<string>}
     * @memberof Transaction
     * @deprecated
     */
    category: Array<string> | null;
    /**
     * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * 
     * All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category`, as it provides greater accuracy and more meaningful categorization.
     * 
     * If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof Transaction
     * @deprecated
     */
    category_id: string | null;
    /**
     * The check number of the transaction. This field is only populated for check transactions.
     * @type {string}
     * @memberof Transaction
     */
    check_number?: string;
    /**
     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). To receive information about the date that a posted transaction was initiated, see the `authorized_date` field.
     * @type {Date}
     * @memberof Transaction
     */
    date: Date;
    /**
     * 
     * @type {Location}
     * @memberof Transaction
     */
    location: Location;
    /**
     * The merchant name or transaction description.
     * 
     * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/sync` or `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof Transaction
     */
    name: string;
    /**
     * The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
     * @type {string}
     * @memberof Transaction
     */
    merchant_name?: string;
    /**
     * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/sync` or `/transactions/get`, this field will be omitted unless the client has set `options.include_original_description` to `true`.
     * @type {string}
     * @memberof Transaction
     */
    original_description?: string;
    /**
     * 
     * @type {PaymentMeta}
     * @memberof Transaction
     */
    payment_meta: PaymentMeta;
    /**
     * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
     * @type {boolean}
     * @memberof Transaction
     */
    pending: boolean;
    /**
     * The ID of a posted transaction's associated pending transaction, where applicable.
     * @type {string}
     * @memberof Transaction
     */
    pending_transaction_id: string | null;
    /**
     * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
     * @type {string}
     * @memberof Transaction
     */
    account_owner: string | null;
    /**
     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
     * @type {string}
     * @memberof Transaction
     */
    transaction_id: string;
    /**
     * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.
     * 
     * `digital:` transactions that took place online.
     * 
     * `place:` transactions that were made at a physical location.
     * 
     * `special:` transactions that relate to banks, e.g. fees or deposits.
     * 
     * `unresolved:` transactions that do not fit into the other three types.
     * 
     * @type {string}
     * @memberof Transaction
     * @deprecated
     */
    transaction_type?: TransactionTransactionTypeEnum;
    /**
     * The URL of a logo associated with this transaction, if available. The logo will always be 100Ã—100 pixel PNG file.
     * @type {string}
     * @memberof Transaction
     */
    logo_url?: string;
    /**
     * The website associated with this transaction, if available.
     * @type {string}
     * @memberof Transaction
     */
    website?: string;
    /**
     * The date that the transaction was authorized. For posted transactions, the `date` field will indicate the posted date, but `authorized_date` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_date`, when available, is generally preferable to use over the `date` field for posted transactions, as it will generally represent the date the user actually made the transaction. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
     * @type {Date}
     * @memberof Transaction
     */
    authorized_date: Date | null;
    /**
     * Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For posted transactions, the `datetime` field will indicate the posted date, but `authorized_datetime` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_datetime`, when available, is generally preferable to use over the `datetime` field for posted transactions, as it will generally represent the date the user actually made the transaction.
     * 
     * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
     * @type {Date}
     * @memberof Transaction
     */
    authorized_datetime: Date | null;
    /**
     * Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For the date that the transaction was initiated, rather than posted, see the `authorized_datetime` field.
     * 
     * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
     * @type {Date}
     * @memberof Transaction
     */
    datetime: Date | null;
    /**
     * The channel used to make a payment.
     * `online:` transactions that took place online.
     * 
     * `in store:` transactions that were made at a physical location.
     * 
     * `other:` transactions that relate to banks, e.g. fees or deposits.
     * 
     * This field replaces the `transaction_type` field.
     * 
     * @type {string}
     * @memberof Transaction
     */
    payment_channel: TransactionPaymentChannelEnum;
    /**
     * 
     * @type {PersonalFinanceCategory}
     * @memberof Transaction
     */
    personal_finance_category?: PersonalFinanceCategory;
    /**
     * 
     * @type {TransactionCode}
     * @memberof Transaction
     */
    transaction_code: TransactionCode | null;
    /**
     * The URL of an icon associated with the primary personal finance category. The icon will always be 100Ã—100 pixel PNG file.
     * @type {string}
     * @memberof Transaction
     */
    personal_finance_category_icon_url?: string;
    /**
     * The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
     * @type {Array<TransactionCounterparty>}
     * @memberof Transaction
     */
    counterparties?: Array<TransactionCounterparty>;
    /**
     * A unique, stable, Plaid-generated ID that maps to the merchant. In the case of a merchant with multiple retail locations, this field will map to the broader merchant, not a specific location or store.
     * @type {string}
     * @memberof Transaction
     */
    merchant_entity_id?: string;
}


/**
 * @export
 */
export const TransactionTransactionTypeEnum = {
    Digital: 'digital',
    Place: 'place',
    Special: 'special',
    Unresolved: 'unresolved'
} as const;
export type TransactionTransactionTypeEnum = typeof TransactionTransactionTypeEnum[keyof typeof TransactionTransactionTypeEnum];

/**
 * @export
 */
export const TransactionPaymentChannelEnum = {
    Online: 'online',
    InStore: 'in store',
    Other: 'other'
} as const;
export type TransactionPaymentChannelEnum = typeof TransactionPaymentChannelEnum[keyof typeof TransactionPaymentChannelEnum];


/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): boolean {
    if (!('account_id' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('iso_currency_code' in value)) return false;
    if (!('unofficial_currency_code' in value)) return false;
    if (!('category' in value)) return false;
    if (!('category_id' in value)) return false;
    if (!('date' in value)) return false;
    if (!('location' in value)) return false;
    if (!('name' in value)) return false;
    if (!('payment_meta' in value)) return false;
    if (!('pending' in value)) return false;
    if (!('pending_transaction_id' in value)) return false;
    if (!('account_owner' in value)) return false;
    if (!('transaction_id' in value)) return false;
    if (!('authorized_date' in value)) return false;
    if (!('authorized_datetime' in value)) return false;
    if (!('datetime' in value)) return false;
    if (!('payment_channel' in value)) return false;
    if (!('transaction_code' in value)) return false;
    return true;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if (json == null) {
        return json;
    }
    return {
        
        'account_id': json['account_id'],
        'amount': json['amount'],
        'iso_currency_code': json['iso_currency_code'],
        'unofficial_currency_code': json['unofficial_currency_code'],
        'category': json['category'],
        'category_id': json['category_id'],
        'check_number': json['check_number'] == null ? undefined : json['check_number'],
        'date': (new Date(json['date'])),
        'location': LocationFromJSON(json['location']),
        'name': json['name'],
        'merchant_name': json['merchant_name'] == null ? undefined : json['merchant_name'],
        'original_description': json['original_description'] == null ? undefined : json['original_description'],
        'payment_meta': PaymentMetaFromJSON(json['payment_meta']),
        'pending': json['pending'],
        'pending_transaction_id': json['pending_transaction_id'],
        'account_owner': json['account_owner'],
        'transaction_id': json['transaction_id'],
        'transaction_type': json['transaction_type'] == null ? undefined : json['transaction_type'],
        'logo_url': json['logo_url'] == null ? undefined : json['logo_url'],
        'website': json['website'] == null ? undefined : json['website'],
        'authorized_date': (json['authorized_date'] == null ? null : new Date(json['authorized_date'])),
        'authorized_datetime': (json['authorized_datetime'] == null ? null : new Date(json['authorized_datetime'])),
        'datetime': (json['datetime'] == null ? null : new Date(json['datetime'])),
        'payment_channel': json['payment_channel'],
        'personal_finance_category': json['personal_finance_category'] == null ? undefined : PersonalFinanceCategoryFromJSON(json['personal_finance_category']),
        'transaction_code': TransactionCodeFromJSON(json['transaction_code']),
        'personal_finance_category_icon_url': json['personal_finance_category_icon_url'] == null ? undefined : json['personal_finance_category_icon_url'],
        'counterparties': json['counterparties'] == null ? undefined : ((json['counterparties'] as Array<any>).map(TransactionCounterpartyFromJSON)),
        'merchant_entity_id': json['merchant_entity_id'] == null ? undefined : json['merchant_entity_id'],
    };
}

export function TransactionToJSON(value?: Transaction | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'account_id': value['account_id'],
        'amount': value['amount'],
        'iso_currency_code': value['iso_currency_code'],
        'unofficial_currency_code': value['unofficial_currency_code'],
        'category': value['category'],
        'category_id': value['category_id'],
        'check_number': value['check_number'],
        'date': ((value['date']).toISOString().substring(0,10)),
        'location': LocationToJSON(value['location']),
        'name': value['name'],
        'merchant_name': value['merchant_name'],
        'original_description': value['original_description'],
        'payment_meta': PaymentMetaToJSON(value['payment_meta']),
        'pending': value['pending'],
        'pending_transaction_id': value['pending_transaction_id'],
        'account_owner': value['account_owner'],
        'transaction_id': value['transaction_id'],
        'transaction_type': value['transaction_type'],
        'logo_url': value['logo_url'],
        'website': value['website'],
        'authorized_date': (value['authorized_date'] == null ? null : (value['authorized_date'] as any).toISOString().substring(0,10)),
        'authorized_datetime': (value['authorized_datetime'] == null ? null : (value['authorized_datetime'] as any).toISOString()),
        'datetime': (value['datetime'] == null ? null : (value['datetime'] as any).toISOString()),
        'payment_channel': value['payment_channel'],
        'personal_finance_category': PersonalFinanceCategoryToJSON(value['personal_finance_category']),
        'transaction_code': TransactionCodeToJSON(value['transaction_code']),
        'personal_finance_category_icon_url': value['personal_finance_category_icon_url'],
        'counterparties': value['counterparties'] == null ? undefined : ((value['counterparties'] as Array<any>).map(TransactionCounterpartyToJSON)),
        'merchant_entity_id': value['merchant_entity_id'],
    };
}

