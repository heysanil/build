/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Data to populate as test transaction data. If not specified, random transactions will be generated instead.
 * @export
 * @interface TransactionOverride
 */
export interface TransactionOverride {
    [key: string]: any | any;
    /**
     * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-authorized-date) field.
     * @type {Date}
     * @memberof TransactionOverride
     */
    date_transacted: Date;
    /**
     * The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions.
     * @type {Date}
     * @memberof TransactionOverride
     */
    date_posted: Date;
    /**
     * The transaction amount. Can be negative.
     * @type {number}
     * @memberof TransactionOverride
     */
    amount: number;
    /**
     * The transaction description.
     * @type {string}
     * @memberof TransactionOverride
     */
    description: string;
    /**
     * The ISO-4217 format currency code for the transaction.
     * @type {string}
     * @memberof TransactionOverride
     */
    currency?: string;
}

/**
 * Check if a given object implements the TransactionOverride interface.
 */
export function instanceOfTransactionOverride(value: object): boolean {
    if (!('date_transacted' in value)) return false;
    if (!('date_posted' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('description' in value)) return false;
    return true;
}

export function TransactionOverrideFromJSON(json: any): TransactionOverride {
    return TransactionOverrideFromJSONTyped(json, false);
}

export function TransactionOverrideFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionOverride {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'date_transacted': (new Date(json['date_transacted'])),
        'date_posted': (new Date(json['date_posted'])),
        'amount': json['amount'],
        'description': json['description'],
        'currency': json['currency'] == null ? undefined : json['currency'],
    };
}

export function TransactionOverrideToJSON(value?: TransactionOverride | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'date_transacted': ((value['date_transacted']).toISOString().substring(0,10)),
        'date_posted': ((value['date_posted']).toISOString().substring(0,10)),
        'amount': value['amount'],
        'description': value['description'],
        'currency': value['currency'],
    };
}

