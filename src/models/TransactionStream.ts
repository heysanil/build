/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PersonalFinanceCategory } from './PersonalFinanceCategory';
import {
    PersonalFinanceCategoryFromJSON,
    PersonalFinanceCategoryFromJSONTyped,
    PersonalFinanceCategoryToJSON,
} from './PersonalFinanceCategory';
import type { RecurringTransactionFrequency } from './RecurringTransactionFrequency';
import {
    RecurringTransactionFrequencyFromJSON,
    RecurringTransactionFrequencyFromJSONTyped,
    RecurringTransactionFrequencyToJSON,
} from './RecurringTransactionFrequency';
import type { TransactionStreamAmount } from './TransactionStreamAmount';
import {
    TransactionStreamAmountFromJSON,
    TransactionStreamAmountFromJSONTyped,
    TransactionStreamAmountToJSON,
} from './TransactionStreamAmount';
import type { TransactionStreamStatus } from './TransactionStreamStatus';
import {
    TransactionStreamStatusFromJSON,
    TransactionStreamStatusFromJSONTyped,
    TransactionStreamStatusToJSON,
} from './TransactionStreamStatus';

/**
 * A grouping of related transactions
 * @export
 * @interface TransactionStream
 */
export interface TransactionStream {
    [key: string]: any | any;
    /**
     * The ID of the account to which the stream belongs
     * @type {string}
     * @memberof TransactionStream
     */
    account_id: string;
    /**
     * A unique id for the stream
     * @type {string}
     * @memberof TransactionStream
     */
    stream_id: string;
    /**
     * A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * 
     * All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.
     * @type {Array<string>}
     * @memberof TransactionStream
     * @deprecated
     */
    category: Array<string>;
    /**
     * The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * 
     * All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.
     * @type {string}
     * @memberof TransactionStream
     * @deprecated
     */
    category_id: string;
    /**
     * A description of the transaction stream.
     * @type {string}
     * @memberof TransactionStream
     */
    description: string;
    /**
     * The merchant associated with the transaction stream.
     * @type {string}
     * @memberof TransactionStream
     */
    merchant_name: string | null;
    /**
     * The posted date of the earliest transaction in the stream.
     * @type {Date}
     * @memberof TransactionStream
     */
    first_date: Date;
    /**
     * The posted date of the latest transaction in the stream.
     * @type {Date}
     * @memberof TransactionStream
     */
    last_date: Date;
    /**
     * 
     * @type {RecurringTransactionFrequency}
     * @memberof TransactionStream
     */
    frequency: RecurringTransactionFrequency;
    /**
     * An array of Plaid transaction IDs belonging to the stream, sorted by posted date.
     * @type {Array<string>}
     * @memberof TransactionStream
     */
    transaction_ids: Array<string>;
    /**
     * 
     * @type {TransactionStreamAmount}
     * @memberof TransactionStream
     */
    average_amount: TransactionStreamAmount;
    /**
     * 
     * @type {TransactionStreamAmount}
     * @memberof TransactionStream
     */
    last_amount: TransactionStreamAmount;
    /**
     * Indicates whether the transaction stream is still live.
     * @type {boolean}
     * @memberof TransactionStream
     */
    is_active: boolean;
    /**
     * 
     * @type {TransactionStreamStatus}
     * @memberof TransactionStream
     */
    status: TransactionStreamStatus;
    /**
     * 
     * @type {PersonalFinanceCategory}
     * @memberof TransactionStream
     */
    personal_finance_category?: PersonalFinanceCategory;
    /**
     * This will be set to `true` if the stream has been modified by request to a `/transactions/recurring/streams` endpoint. It will be `false` for all other streams.
     * @type {boolean}
     * @memberof TransactionStream
     */
    is_user_modified: boolean;
    /**
     * The date and time of the most recent user modification. This will only be set if `is_user_modified` is `true`.
     * @type {Date}
     * @memberof TransactionStream
     */
    last_user_modified_datetime?: Date;
}

/**
 * Check if a given object implements the TransactionStream interface.
 */
export function instanceOfTransactionStream(value: object): boolean {
    if (!('account_id' in value)) return false;
    if (!('stream_id' in value)) return false;
    if (!('category' in value)) return false;
    if (!('category_id' in value)) return false;
    if (!('description' in value)) return false;
    if (!('merchant_name' in value)) return false;
    if (!('first_date' in value)) return false;
    if (!('last_date' in value)) return false;
    if (!('frequency' in value)) return false;
    if (!('transaction_ids' in value)) return false;
    if (!('average_amount' in value)) return false;
    if (!('last_amount' in value)) return false;
    if (!('is_active' in value)) return false;
    if (!('status' in value)) return false;
    if (!('is_user_modified' in value)) return false;
    return true;
}

export function TransactionStreamFromJSON(json: any): TransactionStream {
    return TransactionStreamFromJSONTyped(json, false);
}

export function TransactionStreamFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionStream {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'account_id': json['account_id'],
        'stream_id': json['stream_id'],
        'category': json['category'],
        'category_id': json['category_id'],
        'description': json['description'],
        'merchant_name': json['merchant_name'],
        'first_date': (new Date(json['first_date'])),
        'last_date': (new Date(json['last_date'])),
        'frequency': RecurringTransactionFrequencyFromJSON(json['frequency']),
        'transaction_ids': json['transaction_ids'],
        'average_amount': TransactionStreamAmountFromJSON(json['average_amount']),
        'last_amount': TransactionStreamAmountFromJSON(json['last_amount']),
        'is_active': json['is_active'],
        'status': TransactionStreamStatusFromJSON(json['status']),
        'personal_finance_category': json['personal_finance_category'] == null ? undefined : PersonalFinanceCategoryFromJSON(json['personal_finance_category']),
        'is_user_modified': json['is_user_modified'],
        'last_user_modified_datetime': json['last_user_modified_datetime'] == null ? undefined : (new Date(json['last_user_modified_datetime'])),
    };
}

export function TransactionStreamToJSON(value?: TransactionStream | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'account_id': value['account_id'],
        'stream_id': value['stream_id'],
        'category': value['category'],
        'category_id': value['category_id'],
        'description': value['description'],
        'merchant_name': value['merchant_name'],
        'first_date': ((value['first_date']).toISOString().substring(0,10)),
        'last_date': ((value['last_date']).toISOString().substring(0,10)),
        'frequency': RecurringTransactionFrequencyToJSON(value['frequency']),
        'transaction_ids': value['transaction_ids'],
        'average_amount': TransactionStreamAmountToJSON(value['average_amount']),
        'last_amount': TransactionStreamAmountToJSON(value['last_amount']),
        'is_active': value['is_active'],
        'status': TransactionStreamStatusToJSON(value['status']),
        'personal_finance_category': PersonalFinanceCategoryToJSON(value['personal_finance_category']),
        'is_user_modified': value['is_user_modified'],
        'last_user_modified_datetime': value['last_user_modified_datetime'] == null ? undefined : ((value['last_user_modified_datetime']).toISOString()),
    };
}

