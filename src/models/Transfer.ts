/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ACHClass } from './ACHClass';
import {
    ACHClassFromJSON,
    ACHClassFromJSONTyped,
    ACHClassToJSON,
} from './ACHClass';
import type { TransferAuthorizationGuaranteeDecision } from './TransferAuthorizationGuaranteeDecision';
import {
    TransferAuthorizationGuaranteeDecisionFromJSON,
    TransferAuthorizationGuaranteeDecisionFromJSONTyped,
    TransferAuthorizationGuaranteeDecisionToJSON,
} from './TransferAuthorizationGuaranteeDecision';
import type { TransferAuthorizationGuaranteeDecisionRationale } from './TransferAuthorizationGuaranteeDecisionRationale';
import {
    TransferAuthorizationGuaranteeDecisionRationaleFromJSON,
    TransferAuthorizationGuaranteeDecisionRationaleFromJSONTyped,
    TransferAuthorizationGuaranteeDecisionRationaleToJSON,
} from './TransferAuthorizationGuaranteeDecisionRationale';
import type { TransferCreditFundsSource } from './TransferCreditFundsSource';
import {
    TransferCreditFundsSourceFromJSON,
    TransferCreditFundsSourceFromJSONTyped,
    TransferCreditFundsSourceToJSON,
} from './TransferCreditFundsSource';
import type { TransferExpectedSweepSettlementScheduleItem } from './TransferExpectedSweepSettlementScheduleItem';
import {
    TransferExpectedSweepSettlementScheduleItemFromJSON,
    TransferExpectedSweepSettlementScheduleItemFromJSONTyped,
    TransferExpectedSweepSettlementScheduleItemToJSON,
} from './TransferExpectedSweepSettlementScheduleItem';
import type { TransferFailure } from './TransferFailure';
import {
    TransferFailureFromJSON,
    TransferFailureFromJSONTyped,
    TransferFailureToJSON,
} from './TransferFailure';
import type { TransferNetwork } from './TransferNetwork';
import {
    TransferNetworkFromJSON,
    TransferNetworkFromJSONTyped,
    TransferNetworkToJSON,
} from './TransferNetwork';
import type { TransferRefund } from './TransferRefund';
import {
    TransferRefundFromJSON,
    TransferRefundFromJSONTyped,
    TransferRefundToJSON,
} from './TransferRefund';
import type { TransferStatus } from './TransferStatus';
import {
    TransferStatusFromJSON,
    TransferStatusFromJSONTyped,
    TransferStatusToJSON,
} from './TransferStatus';
import type { TransferSweepStatus } from './TransferSweepStatus';
import {
    TransferSweepStatusFromJSON,
    TransferSweepStatusFromJSONTyped,
    TransferSweepStatusToJSON,
} from './TransferSweepStatus';
import type { TransferType } from './TransferType';
import {
    TransferTypeFromJSON,
    TransferTypeFromJSONTyped,
    TransferTypeToJSON,
} from './TransferType';
import type { TransferUserInResponse } from './TransferUserInResponse';
import {
    TransferUserInResponseFromJSON,
    TransferUserInResponseFromJSONTyped,
    TransferUserInResponseToJSON,
} from './TransferUserInResponse';
import type { TransferWireDetails } from './TransferWireDetails';
import {
    TransferWireDetailsFromJSON,
    TransferWireDetailsFromJSONTyped,
    TransferWireDetailsToJSON,
} from './TransferWireDetails';

/**
 * Represents a transfer within the Transfers API.
 * @export
 * @interface Transfer
 */
export interface Transfer {
    [key: string]: any | any;
    /**
     * Plaid’s unique identifier for a transfer.
     * @type {string}
     * @memberof Transfer
     */
    id: string;
    /**
     * Plaid’s unique identifier for a transfer authorization.
     * @type {string}
     * @memberof Transfer
     */
    authorization_id: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof Transfer
     */
    ach_class?: ACHClass;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
     * @type {string}
     * @memberof Transfer
     */
    account_id?: string;
    /**
     * The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof Transfer
     */
    funding_account_id: string | null;
    /**
     * 
     * @type {TransferType}
     * @memberof Transfer
     */
    type: TransferType;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof Transfer
     */
    user: TransferUserInResponse;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
     * @type {string}
     * @memberof Transfer
     */
    amount: string;
    /**
     * The description of the transfer.
     * @type {string}
     * @memberof Transfer
     */
    description: string;
    /**
     * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     * @type {Date}
     * @memberof Transfer
     */
    created: Date;
    /**
     * 
     * @type {TransferStatus}
     * @memberof Transfer
     */
    status: TransferStatus;
    /**
     * 
     * @type {TransferSweepStatus}
     * @memberof Transfer
     */
    sweep_status?: TransferSweepStatus;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof Transfer
     */
    network: TransferNetwork;
    /**
     * 
     * @type {TransferWireDetails}
     * @memberof Transfer
     */
    wire_details?: TransferWireDetails;
    /**
     * When `true`, you can still cancel this transfer.
     * @type {boolean}
     * @memberof Transfer
     */
    cancellable: boolean;
    /**
     * 
     * @type {TransferFailure}
     * @memberof Transfer
     */
    failure_reason: TransferFailure | null;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * The JSON values must be Strings (no nested JSON objects allowed)
     * Only ASCII characters may be used
     * Maximum of 50 key/value pairs
     * Maximum key length of 40 characters
     * Maximum value length of 500 characters
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Transfer
     */
    metadata: { [key: string]: string; } | null;
    /**
     * Plaid’s unique identifier for the origination account that was used for this transfer.
     * @type {string}
     * @memberof Transfer
     * @deprecated
     */
    origination_account_id: string;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecision}
     * @memberof Transfer
     */
    guarantee_decision: TransferAuthorizationGuaranteeDecision | null;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecisionRationale}
     * @memberof Transfer
     */
    guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale | null;
    /**
     * The currency of the transfer amount, e.g. "USD"
     * @type {string}
     * @memberof Transfer
     */
    iso_currency_code: string;
    /**
     * The date 3 business days from settlement date indicating the following ACH returns can no longer happen: R01, R02, R03, R29. This will be of the form YYYY-MM-DD.
     * @type {Date}
     * @memberof Transfer
     */
    standard_return_window: Date | null;
    /**
     * The date 61 business days from settlement date indicating the following ACH returns can no longer happen: R05, R07, R10, R11, R51, R33, R37, R38, R51, R52, R53. This will be of the form YYYY-MM-DD.
     * @type {Date}
     * @memberof Transfer
     */
    unauthorized_return_window: Date | null;
    /**
     * The expected date when the full amount of the transfer settles at the consumers’ account, if the transfer is credit; or at the customer's business checking account, if the transfer is debit. Only set for ACH transfers and is null for non-ACH transfers. Only set for ACH transfers. This will be of the form YYYY-MM-DD.
     * @type {Date}
     * @memberof Transfer
     */
    expected_settlement_date: Date | null;
    /**
     * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms).
     * @type {string}
     * @memberof Transfer
     */
    originator_client_id: string | null;
    /**
     * A list of refunds associated with this transfer.
     * @type {Array<TransferRefund>}
     * @memberof Transfer
     */
    refunds: Array<TransferRefund>;
    /**
     * The id of the recurring transfer if this transfer belongs to a recurring transfer.
     * @type {string}
     * @memberof Transfer
     */
    recurring_transfer_id: string | null;
    /**
     * The expected sweep settlement schedule of this transfer, assuming this transfer is not `returned`. Only applies to ACH debit transfers.
     * @type {Array<TransferExpectedSweepSettlementScheduleItem>}
     * @memberof Transfer
     */
    expected_sweep_settlement_schedule?: Array<TransferExpectedSweepSettlementScheduleItem>;
    /**
     * 
     * @type {TransferCreditFundsSource}
     * @memberof Transfer
     * @deprecated
     */
    credit_funds_source: TransferCreditFundsSource | null;
    /**
     * The amount to deduct from `transfer.amount` and distribute to the platform’s Ledger balance as a facilitator fee (decimal string with two digits of precision e.g. "10.00"). The remainder will go to the end-customer’s Ledger balance. This must be less than or equal to the `transfer.amount`.
     * @type {string}
     * @memberof Transfer
     */
    facilitator_fee?: string;
    /**
     * The trace identifier for the transfer based on its network. This will only be set after the transfer has posted.
     * 
     * For `ach` or `same-day-ach` transfers, this is the ACH trace number.
     * For `rtp` transfers, this is the Transaction Identification number.
     * For `wire` transfers, this is the IMAD (Input Message Accountability Data) number.
     * @type {string}
     * @memberof Transfer
     */
    network_trace_id?: string;
}

/**
 * Check if a given object implements the Transfer interface.
 */
export function instanceOfTransfer(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('authorization_id' in value)) return false;
    if (!('funding_account_id' in value)) return false;
    if (!('type' in value)) return false;
    if (!('user' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('description' in value)) return false;
    if (!('created' in value)) return false;
    if (!('status' in value)) return false;
    if (!('network' in value)) return false;
    if (!('cancellable' in value)) return false;
    if (!('failure_reason' in value)) return false;
    if (!('metadata' in value)) return false;
    if (!('origination_account_id' in value)) return false;
    if (!('guarantee_decision' in value)) return false;
    if (!('guarantee_decision_rationale' in value)) return false;
    if (!('iso_currency_code' in value)) return false;
    if (!('standard_return_window' in value)) return false;
    if (!('unauthorized_return_window' in value)) return false;
    if (!('expected_settlement_date' in value)) return false;
    if (!('originator_client_id' in value)) return false;
    if (!('refunds' in value)) return false;
    if (!('recurring_transfer_id' in value)) return false;
    if (!('credit_funds_source' in value)) return false;
    return true;
}

export function TransferFromJSON(json: any): Transfer {
    return TransferFromJSONTyped(json, false);
}

export function TransferFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transfer {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'authorization_id': json['authorization_id'],
        'ach_class': json['ach_class'] == null ? undefined : ACHClassFromJSON(json['ach_class']),
        'account_id': json['account_id'] == null ? undefined : json['account_id'],
        'funding_account_id': json['funding_account_id'],
        'type': TransferTypeFromJSON(json['type']),
        'user': TransferUserInResponseFromJSON(json['user']),
        'amount': json['amount'],
        'description': json['description'],
        'created': (new Date(json['created'])),
        'status': TransferStatusFromJSON(json['status']),
        'sweep_status': json['sweep_status'] == null ? undefined : TransferSweepStatusFromJSON(json['sweep_status']),
        'network': TransferNetworkFromJSON(json['network']),
        'wire_details': json['wire_details'] == null ? undefined : TransferWireDetailsFromJSON(json['wire_details']),
        'cancellable': json['cancellable'],
        'failure_reason': TransferFailureFromJSON(json['failure_reason']),
        'metadata': json['metadata'],
        'origination_account_id': json['origination_account_id'],
        'guarantee_decision': TransferAuthorizationGuaranteeDecisionFromJSON(json['guarantee_decision']),
        'guarantee_decision_rationale': TransferAuthorizationGuaranteeDecisionRationaleFromJSON(json['guarantee_decision_rationale']),
        'iso_currency_code': json['iso_currency_code'],
        'standard_return_window': (json['standard_return_window'] == null ? null : new Date(json['standard_return_window'])),
        'unauthorized_return_window': (json['unauthorized_return_window'] == null ? null : new Date(json['unauthorized_return_window'])),
        'expected_settlement_date': (json['expected_settlement_date'] == null ? null : new Date(json['expected_settlement_date'])),
        'originator_client_id': json['originator_client_id'],
        'refunds': ((json['refunds'] as Array<any>).map(TransferRefundFromJSON)),
        'recurring_transfer_id': json['recurring_transfer_id'],
        'expected_sweep_settlement_schedule': json['expected_sweep_settlement_schedule'] == null ? undefined : ((json['expected_sweep_settlement_schedule'] as Array<any>).map(TransferExpectedSweepSettlementScheduleItemFromJSON)),
        'credit_funds_source': TransferCreditFundsSourceFromJSON(json['credit_funds_source']),
        'facilitator_fee': json['facilitator_fee'] == null ? undefined : json['facilitator_fee'],
        'network_trace_id': json['network_trace_id'] == null ? undefined : json['network_trace_id'],
    };
}

export function TransferToJSON(value?: Transfer | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'id': value['id'],
        'authorization_id': value['authorization_id'],
        'ach_class': ACHClassToJSON(value['ach_class']),
        'account_id': value['account_id'],
        'funding_account_id': value['funding_account_id'],
        'type': TransferTypeToJSON(value['type']),
        'user': TransferUserInResponseToJSON(value['user']),
        'amount': value['amount'],
        'description': value['description'],
        'created': ((value['created']).toISOString()),
        'status': TransferStatusToJSON(value['status']),
        'sweep_status': TransferSweepStatusToJSON(value['sweep_status']),
        'network': TransferNetworkToJSON(value['network']),
        'wire_details': TransferWireDetailsToJSON(value['wire_details']),
        'cancellable': value['cancellable'],
        'failure_reason': TransferFailureToJSON(value['failure_reason']),
        'metadata': value['metadata'],
        'origination_account_id': value['origination_account_id'],
        'guarantee_decision': TransferAuthorizationGuaranteeDecisionToJSON(value['guarantee_decision']),
        'guarantee_decision_rationale': TransferAuthorizationGuaranteeDecisionRationaleToJSON(value['guarantee_decision_rationale']),
        'iso_currency_code': value['iso_currency_code'],
        'standard_return_window': (value['standard_return_window'] == null ? null : (value['standard_return_window'] as any).toISOString().substring(0,10)),
        'unauthorized_return_window': (value['unauthorized_return_window'] == null ? null : (value['unauthorized_return_window'] as any).toISOString().substring(0,10)),
        'expected_settlement_date': (value['expected_settlement_date'] == null ? null : (value['expected_settlement_date'] as any).toISOString().substring(0,10)),
        'originator_client_id': value['originator_client_id'],
        'refunds': ((value['refunds'] as Array<any>).map(TransferRefundToJSON)),
        'recurring_transfer_id': value['recurring_transfer_id'],
        'expected_sweep_settlement_schedule': value['expected_sweep_settlement_schedule'] == null ? undefined : ((value['expected_sweep_settlement_schedule'] as Array<any>).map(TransferExpectedSweepSettlementScheduleItemToJSON)),
        'credit_funds_source': TransferCreditFundsSourceToJSON(value['credit_funds_source']),
        'facilitator_fee': value['facilitator_fee'],
        'network_trace_id': value['network_trace_id'],
    };
}

