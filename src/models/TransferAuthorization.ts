/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferAuthorizationDecision } from './TransferAuthorizationDecision';
import {
    TransferAuthorizationDecisionFromJSON,
    TransferAuthorizationDecisionFromJSONTyped,
    TransferAuthorizationDecisionToJSON,
} from './TransferAuthorizationDecision';
import type { TransferAuthorizationDecisionRationale } from './TransferAuthorizationDecisionRationale';
import {
    TransferAuthorizationDecisionRationaleFromJSON,
    TransferAuthorizationDecisionRationaleFromJSONTyped,
    TransferAuthorizationDecisionRationaleToJSON,
} from './TransferAuthorizationDecisionRationale';
import type { TransferAuthorizationGuaranteeDecision } from './TransferAuthorizationGuaranteeDecision';
import {
    TransferAuthorizationGuaranteeDecisionFromJSON,
    TransferAuthorizationGuaranteeDecisionFromJSONTyped,
    TransferAuthorizationGuaranteeDecisionToJSON,
} from './TransferAuthorizationGuaranteeDecision';
import type { TransferAuthorizationGuaranteeDecisionRationale } from './TransferAuthorizationGuaranteeDecisionRationale';
import {
    TransferAuthorizationGuaranteeDecisionRationaleFromJSON,
    TransferAuthorizationGuaranteeDecisionRationaleFromJSONTyped,
    TransferAuthorizationGuaranteeDecisionRationaleToJSON,
} from './TransferAuthorizationGuaranteeDecisionRationale';
import type { TransferAuthorizationPaymentRisk } from './TransferAuthorizationPaymentRisk';
import {
    TransferAuthorizationPaymentRiskFromJSON,
    TransferAuthorizationPaymentRiskFromJSONTyped,
    TransferAuthorizationPaymentRiskToJSON,
} from './TransferAuthorizationPaymentRisk';
import type { TransferAuthorizationProposedTransfer } from './TransferAuthorizationProposedTransfer';
import {
    TransferAuthorizationProposedTransferFromJSON,
    TransferAuthorizationProposedTransferFromJSONTyped,
    TransferAuthorizationProposedTransferToJSON,
} from './TransferAuthorizationProposedTransfer';

/**
 * Contains the authorization decision for a proposed transfer.
 * @export
 * @interface TransferAuthorization
 */
export interface TransferAuthorization {
    [key: string]: any | any;
    /**
     * Plaidâ€™s unique identifier for a transfer authorization.
     * @type {string}
     * @memberof TransferAuthorization
     */
    id: string;
    /**
     * The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
     * @type {Date}
     * @memberof TransferAuthorization
     */
    created: Date;
    /**
     * 
     * @type {TransferAuthorizationDecision}
     * @memberof TransferAuthorization
     */
    decision: TransferAuthorizationDecision;
    /**
     * 
     * @type {TransferAuthorizationDecisionRationale}
     * @memberof TransferAuthorization
     */
    decision_rationale: TransferAuthorizationDecisionRationale | null;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecision}
     * @memberof TransferAuthorization
     */
    guarantee_decision: TransferAuthorizationGuaranteeDecision | null;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecisionRationale}
     * @memberof TransferAuthorization
     */
    guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale | null;
    /**
     * 
     * @type {TransferAuthorizationPaymentRisk}
     * @memberof TransferAuthorization
     */
    payment_risk: TransferAuthorizationPaymentRisk | null;
    /**
     * 
     * @type {TransferAuthorizationProposedTransfer}
     * @memberof TransferAuthorization
     */
    proposed_transfer: TransferAuthorizationProposedTransfer;
}

/**
 * Check if a given object implements the TransferAuthorization interface.
 */
export function instanceOfTransferAuthorization(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('created' in value)) return false;
    if (!('decision' in value)) return false;
    if (!('decision_rationale' in value)) return false;
    if (!('guarantee_decision' in value)) return false;
    if (!('guarantee_decision_rationale' in value)) return false;
    if (!('payment_risk' in value)) return false;
    if (!('proposed_transfer' in value)) return false;
    return true;
}

export function TransferAuthorizationFromJSON(json: any): TransferAuthorization {
    return TransferAuthorizationFromJSONTyped(json, false);
}

export function TransferAuthorizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferAuthorization {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'created': (new Date(json['created'])),
        'decision': TransferAuthorizationDecisionFromJSON(json['decision']),
        'decision_rationale': TransferAuthorizationDecisionRationaleFromJSON(json['decision_rationale']),
        'guarantee_decision': TransferAuthorizationGuaranteeDecisionFromJSON(json['guarantee_decision']),
        'guarantee_decision_rationale': TransferAuthorizationGuaranteeDecisionRationaleFromJSON(json['guarantee_decision_rationale']),
        'payment_risk': TransferAuthorizationPaymentRiskFromJSON(json['payment_risk']),
        'proposed_transfer': TransferAuthorizationProposedTransferFromJSON(json['proposed_transfer']),
    };
}

export function TransferAuthorizationToJSON(value?: TransferAuthorization | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'id': value['id'],
        'created': ((value['created']).toISOString()),
        'decision': TransferAuthorizationDecisionToJSON(value['decision']),
        'decision_rationale': TransferAuthorizationDecisionRationaleToJSON(value['decision_rationale']),
        'guarantee_decision': TransferAuthorizationGuaranteeDecisionToJSON(value['guarantee_decision']),
        'guarantee_decision_rationale': TransferAuthorizationGuaranteeDecisionRationaleToJSON(value['guarantee_decision_rationale']),
        'payment_risk': TransferAuthorizationPaymentRiskToJSON(value['payment_risk']),
        'proposed_transfer': TransferAuthorizationProposedTransferToJSON(value['proposed_transfer']),
    };
}

