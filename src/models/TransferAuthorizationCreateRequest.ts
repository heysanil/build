/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ACHClass } from './ACHClass';
import {
    ACHClassFromJSON,
    ACHClassFromJSONTyped,
    ACHClassToJSON,
} from './ACHClass';
import type { TransferAuthorizationDevice } from './TransferAuthorizationDevice';
import {
    TransferAuthorizationDeviceFromJSON,
    TransferAuthorizationDeviceFromJSONTyped,
    TransferAuthorizationDeviceToJSON,
} from './TransferAuthorizationDevice';
import type { TransferAuthorizationUserInRequest } from './TransferAuthorizationUserInRequest';
import {
    TransferAuthorizationUserInRequestFromJSON,
    TransferAuthorizationUserInRequestFromJSONTyped,
    TransferAuthorizationUserInRequestToJSON,
} from './TransferAuthorizationUserInRequest';
import type { TransferCreditFundsSource } from './TransferCreditFundsSource';
import {
    TransferCreditFundsSourceFromJSON,
    TransferCreditFundsSourceFromJSONTyped,
    TransferCreditFundsSourceToJSON,
} from './TransferCreditFundsSource';
import type { TransferNetwork } from './TransferNetwork';
import {
    TransferNetworkFromJSON,
    TransferNetworkFromJSONTyped,
    TransferNetworkToJSON,
} from './TransferNetwork';
import type { TransferType } from './TransferType';
import {
    TransferTypeFromJSON,
    TransferTypeFromJSONTyped,
    TransferTypeToJSON,
} from './TransferType';
import type { TransferWireDetails } from './TransferWireDetails';
import {
    TransferWireDetailsFromJSON,
    TransferWireDetailsFromJSONTyped,
    TransferWireDetailsToJSON,
} from './TransferWireDetails';

/**
 * Defines the request schema for `/transfer/authorization/create`
 * @export
 * @interface TransferAuthorizationCreateRequest
 */
export interface TransferAuthorizationCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    secret?: string;
    /**
     * The Plaid `access_token` for the account that will be debited or credited.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    access_token: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    account_id: string;
    /**
     * Specify the account used to fund the transfer. Should be specified if using legacy funding methods only. If using Plaid Ledger, leave this field blank. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the "Account ID" column. If this field is left blank and you are using legacy funding methods, this will default to the default `funding_account_id` specified during onboarding. Otherwise, Plaid Ledger will be used.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    funding_account_id?: string;
    /**
     * The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    payment_profile_token?: string;
    /**
     * 
     * @type {TransferType}
     * @memberof TransferAuthorizationCreateRequest
     */
    type: TransferType;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof TransferAuthorizationCreateRequest
     */
    network: TransferNetwork;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    amount: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferAuthorizationCreateRequest
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferWireDetails}
     * @memberof TransferAuthorizationCreateRequest
     */
    wire_details?: TransferWireDetails;
    /**
     * 
     * @type {TransferAuthorizationUserInRequest}
     * @memberof TransferAuthorizationCreateRequest
     */
    user: TransferAuthorizationUserInRequest;
    /**
     * 
     * @type {TransferAuthorizationDevice}
     * @memberof TransferAuthorizationCreateRequest
     */
    device?: TransferAuthorizationDevice;
    /**
     * Plaid's unique identifier for the origination account for this authorization. If not specified, the default account will be used.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     * @deprecated
     */
    origination_account_id?: string;
    /**
     * The currency of the transfer amount. The default value is "USD".
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    iso_currency_code?: string;
    /**
     * A random key provided by the client, per unique authorization, which expires after 48 hours. Maximum of 50 characters.
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create an authorization fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single authorization is created.
     * 
     * This idempotency key expires after 48 hours, after which the same key can be reused. Failure to provide this key may result in duplicate charges.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    idempotency_key?: string;
    /**
     * If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`. This field is not currently used and is present to support planned future functionality.
     * @type {boolean}
     * @memberof TransferAuthorizationCreateRequest
     */
    user_present?: boolean;
    /**
     * If set to `false`, Plaid will not offer a `guarantee_decision` for this request (Guarantee customers only).
     * @type {boolean}
     * @memberof TransferAuthorizationCreateRequest
     */
    with_guarantee?: boolean;
    /**
     * The unique identifier returned by Plaid's [beacon](https://plaid.com/docs/transfer/guarantee/#using-a-beacon) when it is run on your webpage.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    beacon_session_id?: string;
    /**
     * The Plaid client ID that is the originator of this transfer. Only needed if creating transfers on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms).
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    originator_client_id?: string;
    /**
     * 
     * @type {TransferCreditFundsSource}
     * @memberof TransferAuthorizationCreateRequest
     * @deprecated
     */
    credit_funds_source?: TransferCreditFundsSource;
    /**
     * Plaidâ€™s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the `authorization` is created at the `virtual_time` on the provided test clock.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    test_clock_id?: string;
}

/**
 * Check if a given object implements the TransferAuthorizationCreateRequest interface.
 */
export function instanceOfTransferAuthorizationCreateRequest(value: object): boolean {
    if (!('access_token' in value)) return false;
    if (!('account_id' in value)) return false;
    if (!('type' in value)) return false;
    if (!('network' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('user' in value)) return false;
    return true;
}

export function TransferAuthorizationCreateRequestFromJSON(json: any): TransferAuthorizationCreateRequest {
    return TransferAuthorizationCreateRequestFromJSONTyped(json, false);
}

export function TransferAuthorizationCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferAuthorizationCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'access_token': json['access_token'],
        'account_id': json['account_id'],
        'funding_account_id': json['funding_account_id'] == null ? undefined : json['funding_account_id'],
        'payment_profile_token': json['payment_profile_token'] == null ? undefined : json['payment_profile_token'],
        'type': TransferTypeFromJSON(json['type']),
        'network': TransferNetworkFromJSON(json['network']),
        'amount': json['amount'],
        'ach_class': json['ach_class'] == null ? undefined : ACHClassFromJSON(json['ach_class']),
        'wire_details': json['wire_details'] == null ? undefined : TransferWireDetailsFromJSON(json['wire_details']),
        'user': TransferAuthorizationUserInRequestFromJSON(json['user']),
        'device': json['device'] == null ? undefined : TransferAuthorizationDeviceFromJSON(json['device']),
        'origination_account_id': json['origination_account_id'] == null ? undefined : json['origination_account_id'],
        'iso_currency_code': json['iso_currency_code'] == null ? undefined : json['iso_currency_code'],
        'idempotency_key': json['idempotency_key'] == null ? undefined : json['idempotency_key'],
        'user_present': json['user_present'] == null ? undefined : json['user_present'],
        'with_guarantee': json['with_guarantee'] == null ? undefined : json['with_guarantee'],
        'beacon_session_id': json['beacon_session_id'] == null ? undefined : json['beacon_session_id'],
        'originator_client_id': json['originator_client_id'] == null ? undefined : json['originator_client_id'],
        'credit_funds_source': json['credit_funds_source'] == null ? undefined : TransferCreditFundsSourceFromJSON(json['credit_funds_source']),
        'test_clock_id': json['test_clock_id'] == null ? undefined : json['test_clock_id'],
    };
}

export function TransferAuthorizationCreateRequestToJSON(value?: TransferAuthorizationCreateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'access_token': value['access_token'],
        'account_id': value['account_id'],
        'funding_account_id': value['funding_account_id'],
        'payment_profile_token': value['payment_profile_token'],
        'type': TransferTypeToJSON(value['type']),
        'network': TransferNetworkToJSON(value['network']),
        'amount': value['amount'],
        'ach_class': ACHClassToJSON(value['ach_class']),
        'wire_details': TransferWireDetailsToJSON(value['wire_details']),
        'user': TransferAuthorizationUserInRequestToJSON(value['user']),
        'device': TransferAuthorizationDeviceToJSON(value['device']),
        'origination_account_id': value['origination_account_id'],
        'iso_currency_code': value['iso_currency_code'],
        'idempotency_key': value['idempotency_key'],
        'user_present': value['user_present'],
        'with_guarantee': value['with_guarantee'],
        'beacon_session_id': value['beacon_session_id'],
        'originator_client_id': value['originator_client_id'],
        'credit_funds_source': TransferCreditFundsSourceToJSON(value['credit_funds_source']),
        'test_clock_id': value['test_clock_id'],
    };
}

