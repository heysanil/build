/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ACHClass } from './ACHClass';
import {
    ACHClassFromJSON,
    ACHClassFromJSONTyped,
    ACHClassToJSON,
} from './ACHClass';
import type { TransferCreditFundsSource } from './TransferCreditFundsSource';
import {
    TransferCreditFundsSourceFromJSON,
    TransferCreditFundsSourceFromJSONTyped,
    TransferCreditFundsSourceToJSON,
} from './TransferCreditFundsSource';
import type { TransferType } from './TransferType';
import {
    TransferTypeFromJSON,
    TransferTypeFromJSONTyped,
    TransferTypeToJSON,
} from './TransferType';
import type { TransferUserInResponse } from './TransferUserInResponse';
import {
    TransferUserInResponseFromJSON,
    TransferUserInResponseFromJSONTyped,
    TransferUserInResponseToJSON,
} from './TransferUserInResponse';
import type { TransferWireDetails } from './TransferWireDetails';
import {
    TransferWireDetailsFromJSON,
    TransferWireDetailsFromJSONTyped,
    TransferWireDetailsToJSON,
} from './TransferWireDetails';

/**
 * Details regarding the proposed transfer.
 * @export
 * @interface TransferAuthorizationProposedTransfer
 */
export interface TransferAuthorizationProposedTransfer {
    [key: string]: any | any;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferAuthorizationProposedTransfer
     */
    ach_class?: ACHClass;
    /**
     * The Plaid `account_id` for the account that will be debited or credited.
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    account_id?: string;
    /**
     * The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    funding_account_id: string | null;
    /**
     * 
     * @type {TransferType}
     * @memberof TransferAuthorizationProposedTransfer
     */
    type: TransferType;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof TransferAuthorizationProposedTransfer
     */
    user: TransferUserInResponse;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    amount: string;
    /**
     * The network or rails used for the transfer.
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    network: string;
    /**
     * 
     * @type {TransferWireDetails}
     * @memberof TransferAuthorizationProposedTransfer
     */
    wire_details?: TransferWireDetails;
    /**
     * Plaid's unique identifier for the origination account that was used for this transfer.
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     * @deprecated
     */
    origination_account_id: string;
    /**
     * The currency of the transfer amount. The default value is "USD".
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    iso_currency_code: string;
    /**
     * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms).
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    originator_client_id: string | null;
    /**
     * 
     * @type {TransferCreditFundsSource}
     * @memberof TransferAuthorizationProposedTransfer
     * @deprecated
     */
    credit_funds_source: TransferCreditFundsSource | null;
}

/**
 * Check if a given object implements the TransferAuthorizationProposedTransfer interface.
 */
export function instanceOfTransferAuthorizationProposedTransfer(value: object): boolean {
    if (!('funding_account_id' in value)) return false;
    if (!('type' in value)) return false;
    if (!('user' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('network' in value)) return false;
    if (!('origination_account_id' in value)) return false;
    if (!('iso_currency_code' in value)) return false;
    if (!('originator_client_id' in value)) return false;
    if (!('credit_funds_source' in value)) return false;
    return true;
}

export function TransferAuthorizationProposedTransferFromJSON(json: any): TransferAuthorizationProposedTransfer {
    return TransferAuthorizationProposedTransferFromJSONTyped(json, false);
}

export function TransferAuthorizationProposedTransferFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferAuthorizationProposedTransfer {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'ach_class': json['ach_class'] == null ? undefined : ACHClassFromJSON(json['ach_class']),
        'account_id': json['account_id'] == null ? undefined : json['account_id'],
        'funding_account_id': json['funding_account_id'],
        'type': TransferTypeFromJSON(json['type']),
        'user': TransferUserInResponseFromJSON(json['user']),
        'amount': json['amount'],
        'network': json['network'],
        'wire_details': json['wire_details'] == null ? undefined : TransferWireDetailsFromJSON(json['wire_details']),
        'origination_account_id': json['origination_account_id'],
        'iso_currency_code': json['iso_currency_code'],
        'originator_client_id': json['originator_client_id'],
        'credit_funds_source': TransferCreditFundsSourceFromJSON(json['credit_funds_source']),
    };
}

export function TransferAuthorizationProposedTransferToJSON(value?: TransferAuthorizationProposedTransfer | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'ach_class': ACHClassToJSON(value['ach_class']),
        'account_id': value['account_id'],
        'funding_account_id': value['funding_account_id'],
        'type': TransferTypeToJSON(value['type']),
        'user': TransferUserInResponseToJSON(value['user']),
        'amount': value['amount'],
        'network': value['network'],
        'wire_details': TransferWireDetailsToJSON(value['wire_details']),
        'origination_account_id': value['origination_account_id'],
        'iso_currency_code': value['iso_currency_code'],
        'originator_client_id': value['originator_client_id'],
        'credit_funds_source': TransferCreditFundsSourceToJSON(value['credit_funds_source']),
    };
}

