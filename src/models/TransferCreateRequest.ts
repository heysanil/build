/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ACHClass } from './ACHClass';
import {
    ACHClassFromJSON,
    ACHClassFromJSONTyped,
    ACHClassToJSON,
} from './ACHClass';
import type { TransferNetwork } from './TransferNetwork';
import {
    TransferNetworkFromJSON,
    TransferNetworkFromJSONTyped,
    TransferNetworkToJSON,
} from './TransferNetwork';
import type { TransferType } from './TransferType';
import {
    TransferTypeFromJSON,
    TransferTypeFromJSONTyped,
    TransferTypeToJSON,
} from './TransferType';
import type { TransferUserInRequestDeprecated } from './TransferUserInRequestDeprecated';
import {
    TransferUserInRequestDeprecatedFromJSON,
    TransferUserInRequestDeprecatedFromJSONTyped,
    TransferUserInRequestDeprecatedToJSON,
} from './TransferUserInRequestDeprecated';

/**
 * Defines the request schema for `/transfer/create`
 * @export
 * @interface TransferCreateRequest
 */
export interface TransferCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    secret?: string;
    /**
     * Deprecated. `authorization_id` is now used as idempotency instead.
     * 
     * A random key provided by the client, per unique transfer. Maximum of 50 characters.
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single transfer is created.
     * @type {string}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    idempotency_key?: string;
    /**
     * The Plaid `access_token` for the account that will be debited or credited.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    access_token: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    account_id: string;
    /**
     * Plaid’s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    authorization_id: string;
    /**
     * 
     * @type {TransferType}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    type?: TransferType;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    network?: TransferNetwork;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    amount?: string;
    /**
     * The transfer description. Maximum of 15 characters. If reprocessing a returned transfer, please note that the `description` field must be `"Retry 1"` or `"Retry 2"` to indicate that it's a retry of a previously returned transfer. You may retry a transfer up to 2 times, within 180 days of creating the original transfer. Only transfers that were returned with code `R01` or `R09` may be retried. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes).
     * @type {string}
     * @memberof TransferCreateRequest
     */
    description: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferUserInRequestDeprecated}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    user?: TransferUserInRequestDeprecated;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * The JSON values must be Strings (no nested JSON objects allowed)
     * Only ASCII characters may be used
     * Maximum of 50 key/value pairs
     * Maximum key length of 40 characters
     * Maximum value length of 500 characters
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TransferCreateRequest
     */
    metadata?: { [key: string]: string; };
    /**
     * Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank.
     * @type {string}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    origination_account_id?: string;
    /**
     * The currency of the transfer amount. The default value is "USD".
     * @type {string}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    iso_currency_code?: string;
    /**
     * Plaid’s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the `transfer` is created at the `virtual_time` on the provided `test_clock`.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    test_clock_id?: string;
    /**
     * The amount to deduct from `transfer.amount` and distribute to the platform’s Ledger balance as a facilitator fee (decimal string with two digits of precision e.g. "10.00"). The remainder will go to the end-customer’s Ledger balance. This must be less than or equal to the `transfer.amount`.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    facilitator_fee?: string;
}

/**
 * Check if a given object implements the TransferCreateRequest interface.
 */
export function instanceOfTransferCreateRequest(value: object): boolean {
    if (!('access_token' in value)) return false;
    if (!('account_id' in value)) return false;
    if (!('authorization_id' in value)) return false;
    if (!('description' in value)) return false;
    return true;
}

export function TransferCreateRequestFromJSON(json: any): TransferCreateRequest {
    return TransferCreateRequestFromJSONTyped(json, false);
}

export function TransferCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'idempotency_key': json['idempotency_key'] == null ? undefined : json['idempotency_key'],
        'access_token': json['access_token'],
        'account_id': json['account_id'],
        'authorization_id': json['authorization_id'],
        'type': json['type'] == null ? undefined : TransferTypeFromJSON(json['type']),
        'network': json['network'] == null ? undefined : TransferNetworkFromJSON(json['network']),
        'amount': json['amount'] == null ? undefined : json['amount'],
        'description': json['description'],
        'ach_class': json['ach_class'] == null ? undefined : ACHClassFromJSON(json['ach_class']),
        'user': json['user'] == null ? undefined : TransferUserInRequestDeprecatedFromJSON(json['user']),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'origination_account_id': json['origination_account_id'] == null ? undefined : json['origination_account_id'],
        'iso_currency_code': json['iso_currency_code'] == null ? undefined : json['iso_currency_code'],
        'test_clock_id': json['test_clock_id'] == null ? undefined : json['test_clock_id'],
        'facilitator_fee': json['facilitator_fee'] == null ? undefined : json['facilitator_fee'],
    };
}

export function TransferCreateRequestToJSON(value?: TransferCreateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'idempotency_key': value['idempotency_key'],
        'access_token': value['access_token'],
        'account_id': value['account_id'],
        'authorization_id': value['authorization_id'],
        'type': TransferTypeToJSON(value['type']),
        'network': TransferNetworkToJSON(value['network']),
        'amount': value['amount'],
        'description': value['description'],
        'ach_class': ACHClassToJSON(value['ach_class']),
        'user': TransferUserInRequestDeprecatedToJSON(value['user']),
        'metadata': value['metadata'],
        'origination_account_id': value['origination_account_id'],
        'iso_currency_code': value['iso_currency_code'],
        'test_clock_id': value['test_clock_id'],
        'facilitator_fee': value['facilitator_fee'],
    };
}

