/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ACHClass } from './ACHClass';
import {
    ACHClassFromJSON,
    ACHClassFromJSONTyped,
    ACHClassToJSON,
} from './ACHClass';
import type { OriginatorExpectedTransferFrequency } from './OriginatorExpectedTransferFrequency';
import {
    OriginatorExpectedTransferFrequencyFromJSON,
    OriginatorExpectedTransferFrequencyFromJSONTyped,
    OriginatorExpectedTransferFrequencyToJSON,
} from './OriginatorExpectedTransferFrequency';

/**
 * Specifies the originator's expected usage of debits. For all dollar amounts, use a decimal string with two digits of precision e.g. "10.00". This field is required if the originator is expected to process debit transfers.
 * @export
 * @interface TransferDebitUsageConfiguration
 */
export interface TransferDebitUsageConfiguration {
    /**
     * 
     * @type {OriginatorExpectedTransferFrequency}
     * @memberof TransferDebitUsageConfiguration
     */
    expected_frequency: OriginatorExpectedTransferFrequency;
    /**
     * The originator’s expected highest amount for a single debit transfer.
     * @type {string}
     * @memberof TransferDebitUsageConfiguration
     */
    expected_highest_amount: string;
    /**
     * The originator’s expected average amount per debit.
     * @type {string}
     * @memberof TransferDebitUsageConfiguration
     */
    expected_average_amount: string;
    /**
     * The originator’s monthly expected ACH debit processing amount for the next 6-12 months.
     * @type {string}
     * @memberof TransferDebitUsageConfiguration
     */
    expected_monthly_amount: string;
    /**
     * Specifies the expected use cases for the originator’s debit transfers. This should be a list that contains one or more of the following codes:
     * 
     * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
     * 
     * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
     * 
     * `"tel"` - Telephone-Initiated Entry
     * 
     * `"web"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet
     * @type {Array<ACHClass>}
     * @memberof TransferDebitUsageConfiguration
     */
    sec_codes: Array<ACHClass>;
}

/**
 * Check if a given object implements the TransferDebitUsageConfiguration interface.
 */
export function instanceOfTransferDebitUsageConfiguration(value: object): boolean {
    if (!('expected_frequency' in value)) return false;
    if (!('expected_highest_amount' in value)) return false;
    if (!('expected_average_amount' in value)) return false;
    if (!('expected_monthly_amount' in value)) return false;
    if (!('sec_codes' in value)) return false;
    return true;
}

export function TransferDebitUsageConfigurationFromJSON(json: any): TransferDebitUsageConfiguration {
    return TransferDebitUsageConfigurationFromJSONTyped(json, false);
}

export function TransferDebitUsageConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferDebitUsageConfiguration {
    if (json == null) {
        return json;
    }
    return {
        
        'expected_frequency': OriginatorExpectedTransferFrequencyFromJSON(json['expected_frequency']),
        'expected_highest_amount': json['expected_highest_amount'],
        'expected_average_amount': json['expected_average_amount'],
        'expected_monthly_amount': json['expected_monthly_amount'],
        'sec_codes': ((json['sec_codes'] as Array<any>).map(ACHClassFromJSON)),
    };
}

export function TransferDebitUsageConfigurationToJSON(value?: TransferDebitUsageConfiguration | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'expected_frequency': OriginatorExpectedTransferFrequencyToJSON(value['expected_frequency']),
        'expected_highest_amount': value['expected_highest_amount'],
        'expected_average_amount': value['expected_average_amount'],
        'expected_monthly_amount': value['expected_monthly_amount'],
        'sec_codes': ((value['sec_codes'] as Array<any>).map(ACHClassToJSON)),
    };
}

