/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferDocumentPurpose } from './TransferDocumentPurpose';
import {
    TransferDocumentPurposeFromJSON,
    TransferDocumentPurposeFromJSONTyped,
    TransferDocumentPurposeToJSON,
} from './TransferDocumentPurpose';

/**
 * Defines the request schema for `/transfer/diligence/document/upload`
 * @export
 * @interface TransferDiligenceDocumentUploadRequest
 */
export interface TransferDiligenceDocumentUploadRequest {
    /**
     * The Client ID of the originator whose document that you want to upload.
     * @type {string}
     * @memberof TransferDiligenceDocumentUploadRequest
     */
    originator_client_id: string;
    /**
     * A file to upload. The file size must be less than 20MB. Supported file extensions: .pdf.
     * @type {Blob}
     * @memberof TransferDiligenceDocumentUploadRequest
     */
    file: Blob;
    /**
     * 
     * @type {TransferDocumentPurpose}
     * @memberof TransferDiligenceDocumentUploadRequest
     */
    purpose: TransferDocumentPurpose;
}

/**
 * Check if a given object implements the TransferDiligenceDocumentUploadRequest interface.
 */
export function instanceOfTransferDiligenceDocumentUploadRequest(value: object): boolean {
    if (!('originator_client_id' in value)) return false;
    if (!('file' in value)) return false;
    if (!('purpose' in value)) return false;
    return true;
}

export function TransferDiligenceDocumentUploadRequestFromJSON(json: any): TransferDiligenceDocumentUploadRequest {
    return TransferDiligenceDocumentUploadRequestFromJSONTyped(json, false);
}

export function TransferDiligenceDocumentUploadRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferDiligenceDocumentUploadRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'originator_client_id': json['originator_client_id'],
        'file': json['file'],
        'purpose': TransferDocumentPurposeFromJSON(json['purpose']),
    };
}

export function TransferDiligenceDocumentUploadRequestToJSON(value?: TransferDiligenceDocumentUploadRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'originator_client_id': value['originator_client_id'],
        'file': value['file'],
        'purpose': TransferDocumentPurposeToJSON(value['purpose']),
    };
}

