/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferEventListTransferType } from './TransferEventListTransferType';
import {
    TransferEventListTransferTypeFromJSON,
    TransferEventListTransferTypeFromJSONTyped,
    TransferEventListTransferTypeToJSON,
} from './TransferEventListTransferType';
import type { TransferEventType } from './TransferEventType';
import {
    TransferEventTypeFromJSON,
    TransferEventTypeFromJSONTyped,
    TransferEventTypeToJSON,
} from './TransferEventType';

/**
 * Defines the request schema for `/transfer/event/list`
 * @export
 * @interface TransferEventListRequest
 */
export interface TransferEventListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    secret?: string;
    /**
     * The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {Date}
     * @memberof TransferEventListRequest
     */
    start_date?: Date;
    /**
     * The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {Date}
     * @memberof TransferEventListRequest
     */
    end_date?: Date;
    /**
     * Plaid’s unique identifier for a transfer.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    transfer_id?: string;
    /**
     * The account ID to get events for all transactions to/from an account.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    account_id?: string;
    /**
     * 
     * @type {TransferEventListTransferType}
     * @memberof TransferEventListRequest
     */
    transfer_type?: TransferEventListTransferType;
    /**
     * Filter events by event type.
     * @type {Array<TransferEventType>}
     * @memberof TransferEventListRequest
     */
    event_types?: Array<TransferEventType>;
    /**
     * Plaid’s unique identifier for a sweep.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    sweep_id?: string;
    /**
     * The maximum number of transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
     * @type {number}
     * @memberof TransferEventListRequest
     */
    count?: number;
    /**
     * The offset into the list of transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 events will be returned.
     * @type {number}
     * @memberof TransferEventListRequest
     */
    offset?: number;
    /**
     * The origination account ID to get events for transfers from a specific origination account.
     * @type {string}
     * @memberof TransferEventListRequest
     * @deprecated
     */
    origination_account_id?: string;
    /**
     * Filter transfer events to only those with the specified originator client.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    originator_client_id?: string;
    /**
     * Filter transfer events to only those with the specified `funding_account_id`.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    funding_account_id?: string;
}

/**
 * Check if a given object implements the TransferEventListRequest interface.
 */
export function instanceOfTransferEventListRequest(value: object): boolean {
    return true;
}

export function TransferEventListRequestFromJSON(json: any): TransferEventListRequest {
    return TransferEventListRequestFromJSONTyped(json, false);
}

export function TransferEventListRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferEventListRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'start_date': json['start_date'] == null ? undefined : (new Date(json['start_date'])),
        'end_date': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'transfer_id': json['transfer_id'] == null ? undefined : json['transfer_id'],
        'account_id': json['account_id'] == null ? undefined : json['account_id'],
        'transfer_type': json['transfer_type'] == null ? undefined : TransferEventListTransferTypeFromJSON(json['transfer_type']),
        'event_types': json['event_types'] == null ? undefined : ((json['event_types'] as Array<any>).map(TransferEventTypeFromJSON)),
        'sweep_id': json['sweep_id'] == null ? undefined : json['sweep_id'],
        'count': json['count'] == null ? undefined : json['count'],
        'offset': json['offset'] == null ? undefined : json['offset'],
        'origination_account_id': json['origination_account_id'] == null ? undefined : json['origination_account_id'],
        'originator_client_id': json['originator_client_id'] == null ? undefined : json['originator_client_id'],
        'funding_account_id': json['funding_account_id'] == null ? undefined : json['funding_account_id'],
    };
}

export function TransferEventListRequestToJSON(value?: TransferEventListRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'start_date': value['start_date'] == null ? undefined : ((value['start_date'] as any).toISOString()),
        'end_date': value['end_date'] == null ? undefined : ((value['end_date'] as any).toISOString()),
        'transfer_id': value['transfer_id'],
        'account_id': value['account_id'],
        'transfer_type': TransferEventListTransferTypeToJSON(value['transfer_type']),
        'event_types': value['event_types'] == null ? undefined : ((value['event_types'] as Array<any>).map(TransferEventTypeToJSON)),
        'sweep_id': value['sweep_id'],
        'count': value['count'],
        'offset': value['offset'],
        'origination_account_id': value['origination_account_id'],
        'originator_client_id': value['originator_client_id'],
        'funding_account_id': value['funding_account_id'],
    };
}

