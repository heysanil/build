/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ACHClass } from './ACHClass';
import {
    ACHClassFromJSON,
    ACHClassFromJSONTyped,
    ACHClassToJSON,
} from './ACHClass';
import type { TransferAuthorizationDecisionRationale } from './TransferAuthorizationDecisionRationale';
import {
    TransferAuthorizationDecisionRationaleFromJSON,
    TransferAuthorizationDecisionRationaleFromJSONTyped,
    TransferAuthorizationDecisionRationaleToJSON,
} from './TransferAuthorizationDecisionRationale';
import type { TransferAuthorizationGuaranteeDecision } from './TransferAuthorizationGuaranteeDecision';
import {
    TransferAuthorizationGuaranteeDecisionFromJSON,
    TransferAuthorizationGuaranteeDecisionFromJSONTyped,
    TransferAuthorizationGuaranteeDecisionToJSON,
} from './TransferAuthorizationGuaranteeDecision';
import type { TransferAuthorizationGuaranteeDecisionRationale } from './TransferAuthorizationGuaranteeDecisionRationale';
import {
    TransferAuthorizationGuaranteeDecisionRationaleFromJSON,
    TransferAuthorizationGuaranteeDecisionRationaleFromJSONTyped,
    TransferAuthorizationGuaranteeDecisionRationaleToJSON,
} from './TransferAuthorizationGuaranteeDecisionRationale';
import type { TransferIntentAuthorizationDecision } from './TransferIntentAuthorizationDecision';
import {
    TransferIntentAuthorizationDecisionFromJSON,
    TransferIntentAuthorizationDecisionFromJSONTyped,
    TransferIntentAuthorizationDecisionToJSON,
} from './TransferIntentAuthorizationDecision';
import type { TransferIntentCreateMode } from './TransferIntentCreateMode';
import {
    TransferIntentCreateModeFromJSON,
    TransferIntentCreateModeFromJSONTyped,
    TransferIntentCreateModeToJSON,
} from './TransferIntentCreateMode';
import type { TransferIntentCreateNetwork } from './TransferIntentCreateNetwork';
import {
    TransferIntentCreateNetworkFromJSON,
    TransferIntentCreateNetworkFromJSONTyped,
    TransferIntentCreateNetworkToJSON,
} from './TransferIntentCreateNetwork';
import type { TransferIntentGetFailureReason } from './TransferIntentGetFailureReason';
import {
    TransferIntentGetFailureReasonFromJSON,
    TransferIntentGetFailureReasonFromJSONTyped,
    TransferIntentGetFailureReasonToJSON,
} from './TransferIntentGetFailureReason';
import type { TransferIntentStatus } from './TransferIntentStatus';
import {
    TransferIntentStatusFromJSON,
    TransferIntentStatusFromJSONTyped,
    TransferIntentStatusToJSON,
} from './TransferIntentStatus';
import type { TransferUserInResponse } from './TransferUserInResponse';
import {
    TransferUserInResponseFromJSON,
    TransferUserInResponseFromJSONTyped,
    TransferUserInResponseToJSON,
} from './TransferUserInResponse';

/**
 * Represents a transfer intent within Transfer UI.
 * @export
 * @interface TransferIntentGet
 */
export interface TransferIntentGet {
    [key: string]: any | any;
    /**
     * Plaid's unique identifier for a transfer intent object.
     * @type {string}
     * @memberof TransferIntentGet
     */
    id: string;
    /**
     * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
     * @type {Date}
     * @memberof TransferIntentGet
     */
    created: Date;
    /**
     * 
     * @type {TransferIntentStatus}
     * @memberof TransferIntentGet
     */
    status: TransferIntentStatus;
    /**
     * Plaid's unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise.
     * @type {string}
     * @memberof TransferIntentGet
     */
    transfer_id: string | null;
    /**
     * 
     * @type {TransferIntentGetFailureReason}
     * @memberof TransferIntentGet
     */
    failure_reason: TransferIntentGetFailureReason | null;
    /**
     * 
     * @type {TransferIntentAuthorizationDecision}
     * @memberof TransferIntentGet
     */
    authorization_decision: TransferIntentAuthorizationDecision | null;
    /**
     * 
     * @type {TransferAuthorizationDecisionRationale}
     * @memberof TransferIntentGet
     */
    authorization_decision_rationale: TransferAuthorizationDecisionRationale | null;
    /**
     * The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation.
     * @type {string}
     * @memberof TransferIntentGet
     */
    account_id?: string;
    /**
     * Plaidâ€™s unique identifier for the origination account used for the transfer.
     * @type {string}
     * @memberof TransferIntentGet
     * @deprecated
     */
    origination_account_id: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof TransferIntentGet
     */
    funding_account_id: string;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
     * @type {string}
     * @memberof TransferIntentGet
     */
    amount: string;
    /**
     * 
     * @type {TransferIntentCreateMode}
     * @memberof TransferIntentGet
     */
    mode: TransferIntentCreateMode;
    /**
     * 
     * @type {TransferIntentCreateNetwork}
     * @memberof TransferIntentGet
     */
    network?: TransferIntentCreateNetwork;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferIntentGet
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof TransferIntentGet
     */
    user: TransferUserInResponse;
    /**
     * A description for the underlying transfer. Maximum of 8 characters.
     * @type {string}
     * @memberof TransferIntentGet
     */
    description: string;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * The JSON values must be Strings (no nested JSON objects allowed)
     * Only ASCII characters may be used
     * Maximum of 50 key/value pairs
     * Maximum key length of 40 characters
     * Maximum value length of 500 characters
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TransferIntentGet
     */
    metadata?: { [key: string]: string; };
    /**
     * The currency of the transfer amount, e.g. "USD"
     * @type {string}
     * @memberof TransferIntentGet
     */
    iso_currency_code: string;
    /**
     * When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only).
     * @type {boolean}
     * @memberof TransferIntentGet
     */
    require_guarantee?: boolean;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecision}
     * @memberof TransferIntentGet
     */
    guarantee_decision: TransferAuthorizationGuaranteeDecision | null;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecisionRationale}
     * @memberof TransferIntentGet
     */
    guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale | null;
}

/**
 * Check if a given object implements the TransferIntentGet interface.
 */
export function instanceOfTransferIntentGet(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('created' in value)) return false;
    if (!('status' in value)) return false;
    if (!('transfer_id' in value)) return false;
    if (!('failure_reason' in value)) return false;
    if (!('authorization_decision' in value)) return false;
    if (!('authorization_decision_rationale' in value)) return false;
    if (!('origination_account_id' in value)) return false;
    if (!('funding_account_id' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('mode' in value)) return false;
    if (!('user' in value)) return false;
    if (!('description' in value)) return false;
    if (!('iso_currency_code' in value)) return false;
    if (!('guarantee_decision' in value)) return false;
    if (!('guarantee_decision_rationale' in value)) return false;
    return true;
}

export function TransferIntentGetFromJSON(json: any): TransferIntentGet {
    return TransferIntentGetFromJSONTyped(json, false);
}

export function TransferIntentGetFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferIntentGet {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'created': (new Date(json['created'])),
        'status': TransferIntentStatusFromJSON(json['status']),
        'transfer_id': json['transfer_id'],
        'failure_reason': TransferIntentGetFailureReasonFromJSON(json['failure_reason']),
        'authorization_decision': TransferIntentAuthorizationDecisionFromJSON(json['authorization_decision']),
        'authorization_decision_rationale': TransferAuthorizationDecisionRationaleFromJSON(json['authorization_decision_rationale']),
        'account_id': json['account_id'] == null ? undefined : json['account_id'],
        'origination_account_id': json['origination_account_id'],
        'funding_account_id': json['funding_account_id'],
        'amount': json['amount'],
        'mode': TransferIntentCreateModeFromJSON(json['mode']),
        'network': json['network'] == null ? undefined : TransferIntentCreateNetworkFromJSON(json['network']),
        'ach_class': json['ach_class'] == null ? undefined : ACHClassFromJSON(json['ach_class']),
        'user': TransferUserInResponseFromJSON(json['user']),
        'description': json['description'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'iso_currency_code': json['iso_currency_code'],
        'require_guarantee': json['require_guarantee'] == null ? undefined : json['require_guarantee'],
        'guarantee_decision': TransferAuthorizationGuaranteeDecisionFromJSON(json['guarantee_decision']),
        'guarantee_decision_rationale': TransferAuthorizationGuaranteeDecisionRationaleFromJSON(json['guarantee_decision_rationale']),
    };
}

export function TransferIntentGetToJSON(value?: TransferIntentGet | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'id': value['id'],
        'created': ((value['created']).toISOString()),
        'status': TransferIntentStatusToJSON(value['status']),
        'transfer_id': value['transfer_id'],
        'failure_reason': TransferIntentGetFailureReasonToJSON(value['failure_reason']),
        'authorization_decision': TransferIntentAuthorizationDecisionToJSON(value['authorization_decision']),
        'authorization_decision_rationale': TransferAuthorizationDecisionRationaleToJSON(value['authorization_decision_rationale']),
        'account_id': value['account_id'],
        'origination_account_id': value['origination_account_id'],
        'funding_account_id': value['funding_account_id'],
        'amount': value['amount'],
        'mode': TransferIntentCreateModeToJSON(value['mode']),
        'network': TransferIntentCreateNetworkToJSON(value['network']),
        'ach_class': ACHClassToJSON(value['ach_class']),
        'user': TransferUserInResponseToJSON(value['user']),
        'description': value['description'],
        'metadata': value['metadata'],
        'iso_currency_code': value['iso_currency_code'],
        'require_guarantee': value['require_guarantee'],
        'guarantee_decision': TransferAuthorizationGuaranteeDecisionToJSON(value['guarantee_decision']),
        'guarantee_decision_rationale': TransferAuthorizationGuaranteeDecisionRationaleToJSON(value['guarantee_decision_rationale']),
    };
}

