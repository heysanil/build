/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferNetwork } from './TransferNetwork';
import {
    TransferNetworkFromJSON,
    TransferNetworkFromJSONTyped,
    TransferNetworkToJSON,
} from './TransferNetwork';

/**
 * Defines the request schema for `/transfer/ledger/withdraw`
 * @export
 * @interface TransferLedgerWithdrawRequest
 */
export interface TransferLedgerWithdrawRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferLedgerWithdrawRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferLedgerWithdrawRequest
     */
    secret?: string;
    /**
     * Client ID of the customer that owns the Ledger balance. This is so Plaid knows which of your customers to payout or collect funds. Only applicable for [Platform customers](https://plaid.com/docs/transfer/application/#originators-vs-platforms). Do not include if youâ€™re paying out to yourself.
     * @type {string}
     * @memberof TransferLedgerWithdrawRequest
     */
    originator_client_id?: string;
    /**
     * Specify which funding account linked to this Plaid Ledger to use. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the "Account ID" column. If this field is left blank, this will default to the default `funding_account_id` specified during onboarding. If an `originator_client_id` is specified, the `funding_account_id` must belong to the specified originator, and if `funding_account_id` is left blank, the originator's default `funding_account_id` will be used.
     * @type {string}
     * @memberof TransferLedgerWithdrawRequest
     */
    funding_account_id?: string;
    /**
     * A positive amount of how much will be withdrawn from the ledger balance (decimal string with two digits of precision e.g. "5.50").
     * @type {string}
     * @memberof TransferLedgerWithdrawRequest
     */
    amount: string;
    /**
     * The description of the deposit that will be passed to the receiving bank (up to 10 characters). Note that banks utilize this field differently, and may or may not show it on the bank statement.
     * @type {string}
     * @memberof TransferLedgerWithdrawRequest
     */
    description?: string;
    /**
     * A unique key provided by the client, per unique ledger withdraw. Maximum of 50 characters.
     * 
     * The API supports idempotency for safely retrying the request without accidentally performing the same operation twice. For example, if a request to create a ledger withdraw fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single withdraw is created.
     * @type {string}
     * @memberof TransferLedgerWithdrawRequest
     */
    idempotency_key: string;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof TransferLedgerWithdrawRequest
     */
    network: TransferNetwork;
}

/**
 * Check if a given object implements the TransferLedgerWithdrawRequest interface.
 */
export function instanceOfTransferLedgerWithdrawRequest(value: object): boolean {
    if (!('amount' in value)) return false;
    if (!('idempotency_key' in value)) return false;
    if (!('network' in value)) return false;
    return true;
}

export function TransferLedgerWithdrawRequestFromJSON(json: any): TransferLedgerWithdrawRequest {
    return TransferLedgerWithdrawRequestFromJSONTyped(json, false);
}

export function TransferLedgerWithdrawRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferLedgerWithdrawRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'originator_client_id': json['originator_client_id'] == null ? undefined : json['originator_client_id'],
        'funding_account_id': json['funding_account_id'] == null ? undefined : json['funding_account_id'],
        'amount': json['amount'],
        'description': json['description'] == null ? undefined : json['description'],
        'idempotency_key': json['idempotency_key'],
        'network': TransferNetworkFromJSON(json['network']),
    };
}

export function TransferLedgerWithdrawRequestToJSON(value?: TransferLedgerWithdrawRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'originator_client_id': value['originator_client_id'],
        'funding_account_id': value['funding_account_id'],
        'amount': value['amount'],
        'description': value['description'],
        'idempotency_key': value['idempotency_key'],
        'network': TransferNetworkToJSON(value['network']),
    };
}

