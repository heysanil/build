/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferScheduleIntervalUnit } from './TransferScheduleIntervalUnit';
import {
    TransferScheduleIntervalUnitFromJSON,
    TransferScheduleIntervalUnitFromJSONTyped,
    TransferScheduleIntervalUnitToJSON,
} from './TransferScheduleIntervalUnit';

/**
 * The schedule that the recurring transfer will be executed on.
 * @export
 * @interface TransferRecurringSchedule
 */
export interface TransferRecurringSchedule {
    /**
     * 
     * @type {TransferScheduleIntervalUnit}
     * @memberof TransferRecurringSchedule
     */
    interval_unit: TransferScheduleIntervalUnit;
    /**
     * The number of recurring `interval_units` between originations. The recurring interval (before holiday adjustment) is calculated by multiplying `interval_unit` and `interval_count`.
     * For example, to schedule a recurring transfer which originates once every two weeks, set `interval_unit` = `week` and `interval_count` = 2.
     * @type {number}
     * @memberof TransferRecurringSchedule
     */
    interval_count: number;
    /**
     * The day of the interval on which to schedule the transfer.
     * 
     * If the `interval_unit` is `week`, `interval_execution_day` should be an integer from 1 (Monday) to 5 (Friday).
     * 
     * If the `interval_unit` is `month`, `interval_execution_day` should be an integer indicating which day of the month to make the transfer on. Integers from 1 to 28 can be used to make a transfer on that day of the month. Negative integers from -1 to -5 can be used to make a transfer relative to the end of the month. To make a transfer on the last day of the month, use -1; to make the transfer on the second-to-last day, use -2, and so on.
     * 
     * The transfer will be originated on the next available banking day if the designated day is a non banking day.
     * @type {number}
     * @memberof TransferRecurringSchedule
     */
    interval_execution_day: number;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will begin on the first `interval_execution_day` on or after the `start_date`.
     * 
     * If the first `interval_execution_day` on or after the start date is also the same day that `/transfer/recurring/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
     * @type {Date}
     * @memberof TransferRecurringSchedule
     */
    start_date: Date;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will end on the last `interval_execution_day` on or before the `end_date`.
     * If the `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/transfer/recurring/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
     * @type {Date}
     * @memberof TransferRecurringSchedule
     */
    end_date?: Date;
}

/**
 * Check if a given object implements the TransferRecurringSchedule interface.
 */
export function instanceOfTransferRecurringSchedule(value: object): boolean {
    if (!('interval_unit' in value)) return false;
    if (!('interval_count' in value)) return false;
    if (!('interval_execution_day' in value)) return false;
    if (!('start_date' in value)) return false;
    return true;
}

export function TransferRecurringScheduleFromJSON(json: any): TransferRecurringSchedule {
    return TransferRecurringScheduleFromJSONTyped(json, false);
}

export function TransferRecurringScheduleFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferRecurringSchedule {
    if (json == null) {
        return json;
    }
    return {
        
        'interval_unit': TransferScheduleIntervalUnitFromJSON(json['interval_unit']),
        'interval_count': json['interval_count'],
        'interval_execution_day': json['interval_execution_day'],
        'start_date': (new Date(json['start_date'])),
        'end_date': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
    };
}

export function TransferRecurringScheduleToJSON(value?: TransferRecurringSchedule | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'interval_unit': TransferScheduleIntervalUnitToJSON(value['interval_unit']),
        'interval_count': value['interval_count'],
        'interval_execution_day': value['interval_execution_day'],
        'start_date': ((value['start_date']).toISOString().substring(0,10)),
        'end_date': value['end_date'] == null ? undefined : ((value['end_date'] as any).toISOString().substring(0,10)),
    };
}

