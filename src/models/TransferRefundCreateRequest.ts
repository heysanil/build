/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Defines the request schema for `/transfer/refund/create`
 * @export
 * @interface TransferRefundCreateRequest
 */
export interface TransferRefundCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    secret?: string;
    /**
     * The ID of the transfer to refund.
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    transfer_id: string;
    /**
     * The amount of the refund (decimal string with two digits of precision e.g. "10.00").
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    amount: string;
    /**
     * A random key provided by the client, per unique refund. Maximum of 50 characters.
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a refund fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single refund is created.
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    idempotency_key: string;
}

/**
 * Check if a given object implements the TransferRefundCreateRequest interface.
 */
export function instanceOfTransferRefundCreateRequest(value: object): boolean {
    if (!('transfer_id' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('idempotency_key' in value)) return false;
    return true;
}

export function TransferRefundCreateRequestFromJSON(json: any): TransferRefundCreateRequest {
    return TransferRefundCreateRequestFromJSONTyped(json, false);
}

export function TransferRefundCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferRefundCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'transfer_id': json['transfer_id'],
        'amount': json['amount'],
        'idempotency_key': json['idempotency_key'],
    };
}

export function TransferRefundCreateRequestToJSON(value?: TransferRefundCreateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'transfer_id': value['transfer_id'],
        'amount': value['amount'],
        'idempotency_key': value['idempotency_key'],
    };
}

