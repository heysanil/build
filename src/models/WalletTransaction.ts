/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WalletPaymentScheme } from './WalletPaymentScheme';
import {
    WalletPaymentSchemeFromJSON,
    WalletPaymentSchemeFromJSONTyped,
    WalletPaymentSchemeToJSON,
} from './WalletPaymentScheme';
import type { WalletTransactionAmount } from './WalletTransactionAmount';
import {
    WalletTransactionAmountFromJSON,
    WalletTransactionAmountFromJSONTyped,
    WalletTransactionAmountToJSON,
} from './WalletTransactionAmount';
import type { WalletTransactionCounterparty } from './WalletTransactionCounterparty';
import {
    WalletTransactionCounterpartyFromJSON,
    WalletTransactionCounterpartyFromJSONTyped,
    WalletTransactionCounterpartyToJSON,
} from './WalletTransactionCounterparty';
import type { WalletTransactionFailureReason } from './WalletTransactionFailureReason';
import {
    WalletTransactionFailureReasonFromJSON,
    WalletTransactionFailureReasonFromJSONTyped,
    WalletTransactionFailureReasonToJSON,
} from './WalletTransactionFailureReason';
import type { WalletTransactionStatus } from './WalletTransactionStatus';
import {
    WalletTransactionStatusFromJSON,
    WalletTransactionStatusFromJSONTyped,
    WalletTransactionStatusToJSON,
} from './WalletTransactionStatus';

/**
 * The transaction details
 * @export
 * @interface WalletTransaction
 */
export interface WalletTransaction {
    [key: string]: any | any;
    /**
     * A unique ID identifying the transaction
     * @type {string}
     * @memberof WalletTransaction
     */
    transaction_id: string;
    /**
     * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     * @type {string}
     * @memberof WalletTransaction
     */
    wallet_id: string;
    /**
     * A reference for the transaction
     * @type {string}
     * @memberof WalletTransaction
     */
    reference: string;
    /**
     * The type of the transaction. The supported transaction types that are returned are:
     * `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.
     * 
     * `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.
     * 
     * `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid's Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).
     * 
     * `REFUND:` a transaction which debits an e-wallet by refunding a previously initiated payment made through Plaid's [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).
     * 
     * `FUNDS_SWEEP`: an automated transaction which debits funds from an e-wallet to a designated client-owned account.
     * 
     * `RETURN`: an automated transaction where a debit transaction was reversed and money moved back to originating account.
     * @type {string}
     * @memberof WalletTransaction
     */
    type: WalletTransactionTypeEnum;
    /**
     * 
     * @type {WalletPaymentScheme}
     * @memberof WalletTransaction
     */
    scheme?: WalletPaymentScheme;
    /**
     * 
     * @type {WalletTransactionAmount}
     * @memberof WalletTransaction
     */
    amount: WalletTransactionAmount;
    /**
     * 
     * @type {WalletTransactionCounterparty}
     * @memberof WalletTransaction
     */
    counterparty: WalletTransactionCounterparty;
    /**
     * 
     * @type {WalletTransactionStatus}
     * @memberof WalletTransaction
     */
    status: WalletTransactionStatus;
    /**
     * Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {Date}
     * @memberof WalletTransaction
     */
    created_at: Date;
    /**
     * The date and time of the last time the `status` was updated, in IS0 8601 format
     * @type {Date}
     * @memberof WalletTransaction
     */
    last_status_update: Date;
    /**
     * The payment id that this transaction is associated with, if any. This is present only for transaction types `PIS_PAY_IN` and `REFUND`.
     * @type {string}
     * @memberof WalletTransaction
     */
    payment_id?: string;
    /**
     * 
     * @type {WalletTransactionFailureReason}
     * @memberof WalletTransaction
     */
    failure_reason?: WalletTransactionFailureReason;
}


/**
 * @export
 */
export const WalletTransactionTypeEnum = {
    BankTransfer: 'BANK_TRANSFER',
    Payout: 'PAYOUT',
    PisPayIn: 'PIS_PAY_IN',
    Refund: 'REFUND',
    FundsSweep: 'FUNDS_SWEEP',
    Return: 'RETURN'
} as const;
export type WalletTransactionTypeEnum = typeof WalletTransactionTypeEnum[keyof typeof WalletTransactionTypeEnum];


/**
 * Check if a given object implements the WalletTransaction interface.
 */
export function instanceOfWalletTransaction(value: object): boolean {
    if (!('transaction_id' in value)) return false;
    if (!('wallet_id' in value)) return false;
    if (!('reference' in value)) return false;
    if (!('type' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('counterparty' in value)) return false;
    if (!('status' in value)) return false;
    if (!('created_at' in value)) return false;
    if (!('last_status_update' in value)) return false;
    return true;
}

export function WalletTransactionFromJSON(json: any): WalletTransaction {
    return WalletTransactionFromJSONTyped(json, false);
}

export function WalletTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): WalletTransaction {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'transaction_id': json['transaction_id'],
        'wallet_id': json['wallet_id'],
        'reference': json['reference'],
        'type': json['type'],
        'scheme': json['scheme'] == null ? undefined : WalletPaymentSchemeFromJSON(json['scheme']),
        'amount': WalletTransactionAmountFromJSON(json['amount']),
        'counterparty': WalletTransactionCounterpartyFromJSON(json['counterparty']),
        'status': WalletTransactionStatusFromJSON(json['status']),
        'created_at': (new Date(json['created_at'])),
        'last_status_update': (new Date(json['last_status_update'])),
        'payment_id': json['payment_id'] == null ? undefined : json['payment_id'],
        'failure_reason': json['failure_reason'] == null ? undefined : WalletTransactionFailureReasonFromJSON(json['failure_reason']),
    };
}

export function WalletTransactionToJSON(value?: WalletTransaction | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'transaction_id': value['transaction_id'],
        'wallet_id': value['wallet_id'],
        'reference': value['reference'],
        'type': value['type'],
        'scheme': WalletPaymentSchemeToJSON(value['scheme']),
        'amount': WalletTransactionAmountToJSON(value['amount']),
        'counterparty': WalletTransactionCounterpartyToJSON(value['counterparty']),
        'status': WalletTransactionStatusToJSON(value['status']),
        'created_at': ((value['created_at']).toISOString()),
        'last_status_update': ((value['last_status_update']).toISOString()),
        'payment_id': value['payment_id'],
        'failure_reason': WalletTransactionFailureReasonToJSON(value['failure_reason']),
    };
}

