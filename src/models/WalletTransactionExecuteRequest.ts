/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WalletTransactionAmount } from './WalletTransactionAmount';
import {
    WalletTransactionAmountFromJSON,
    WalletTransactionAmountFromJSONTyped,
    WalletTransactionAmountToJSON,
} from './WalletTransactionAmount';
import type { WalletTransactionCounterparty } from './WalletTransactionCounterparty';
import {
    WalletTransactionCounterpartyFromJSON,
    WalletTransactionCounterpartyFromJSONTyped,
    WalletTransactionCounterpartyToJSON,
} from './WalletTransactionCounterparty';

/**
 * WalletTransactionExecuteRequest defines the request schema for `/wallet/transaction/execute`
 * @export
 * @interface WalletTransactionExecuteRequest
 */
export interface WalletTransactionExecuteRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    secret?: string;
    /**
     * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    idempotency_key: string;
    /**
     * The ID of the e-wallet to debit from
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    wallet_id: string;
    /**
     * 
     * @type {WalletTransactionCounterparty}
     * @memberof WalletTransactionExecuteRequest
     */
    counterparty: WalletTransactionCounterparty;
    /**
     * 
     * @type {WalletTransactionAmount}
     * @memberof WalletTransactionExecuteRequest
     */
    amount: WalletTransactionAmount;
    /**
     * A reference for the transaction. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
     * Ensure that the `reference` field is unique for each transaction.
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    reference: string;
}

/**
 * Check if a given object implements the WalletTransactionExecuteRequest interface.
 */
export function instanceOfWalletTransactionExecuteRequest(value: object): boolean {
    if (!('idempotency_key' in value)) return false;
    if (!('wallet_id' in value)) return false;
    if (!('counterparty' in value)) return false;
    if (!('amount' in value)) return false;
    if (!('reference' in value)) return false;
    return true;
}

export function WalletTransactionExecuteRequestFromJSON(json: any): WalletTransactionExecuteRequest {
    return WalletTransactionExecuteRequestFromJSONTyped(json, false);
}

export function WalletTransactionExecuteRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): WalletTransactionExecuteRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'client_id': json['client_id'] == null ? undefined : json['client_id'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'idempotency_key': json['idempotency_key'],
        'wallet_id': json['wallet_id'],
        'counterparty': WalletTransactionCounterpartyFromJSON(json['counterparty']),
        'amount': WalletTransactionAmountFromJSON(json['amount']),
        'reference': json['reference'],
    };
}

export function WalletTransactionExecuteRequestToJSON(value?: WalletTransactionExecuteRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'client_id': value['client_id'],
        'secret': value['secret'],
        'idempotency_key': value['idempotency_key'],
        'wallet_id': value['wallet_id'],
        'counterparty': WalletTransactionCounterpartyToJSON(value['counterparty']),
        'amount': WalletTransactionAmountToJSON(value['amount']),
        'reference': value['reference'],
    };
}

