/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.503.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WalletTransactionStatus } from './WalletTransactionStatus';
import {
    WalletTransactionStatusFromJSON,
    WalletTransactionStatusFromJSONTyped,
    WalletTransactionStatusToJSON,
} from './WalletTransactionStatus';
import type { WebhookEnvironmentValues } from './WebhookEnvironmentValues';
import {
    WebhookEnvironmentValuesFromJSON,
    WebhookEnvironmentValuesFromJSONTyped,
    WebhookEnvironmentValuesToJSON,
} from './WebhookEnvironmentValues';

/**
 * Fired when the status of a wallet transaction has changed.
 * @export
 * @interface WalletTransactionStatusUpdateWebhook
 */
export interface WalletTransactionStatusUpdateWebhook {
    [key: string]: any | any;
    /**
     * `WALLET`
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    webhook_type: string;
    /**
     * `WALLET_TRANSACTION_STATUS_UPDATE`
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    webhook_code: string;
    /**
     * The `transaction_id` for the wallet transaction being updated
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    transaction_id: string;
    /**
     * The `payment_id` associated with the transaction. This will be present in case of `REFUND` and `PIS_PAY_IN`.
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    payment_id?: string;
    /**
     * The EMI (E-Money Institution) wallet that this payment is associated with. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    wallet_id?: string;
    /**
     * 
     * @type {WalletTransactionStatus}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    new_status: WalletTransactionStatus;
    /**
     * 
     * @type {WalletTransactionStatus}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    old_status: WalletTransactionStatus;
    /**
     * The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2017-09-14T14:42:19.350Z"`
     * @type {Date}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    timestamp: Date;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}

/**
 * Check if a given object implements the WalletTransactionStatusUpdateWebhook interface.
 */
export function instanceOfWalletTransactionStatusUpdateWebhook(value: object): boolean {
    if (!('webhook_type' in value)) return false;
    if (!('webhook_code' in value)) return false;
    if (!('transaction_id' in value)) return false;
    if (!('new_status' in value)) return false;
    if (!('old_status' in value)) return false;
    if (!('timestamp' in value)) return false;
    if (!('environment' in value)) return false;
    return true;
}

export function WalletTransactionStatusUpdateWebhookFromJSON(json: any): WalletTransactionStatusUpdateWebhook {
    return WalletTransactionStatusUpdateWebhookFromJSONTyped(json, false);
}

export function WalletTransactionStatusUpdateWebhookFromJSONTyped(json: any, ignoreDiscriminator: boolean): WalletTransactionStatusUpdateWebhook {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'webhook_type': json['webhook_type'],
        'webhook_code': json['webhook_code'],
        'transaction_id': json['transaction_id'],
        'payment_id': json['payment_id'] == null ? undefined : json['payment_id'],
        'wallet_id': json['wallet_id'] == null ? undefined : json['wallet_id'],
        'new_status': WalletTransactionStatusFromJSON(json['new_status']),
        'old_status': WalletTransactionStatusFromJSON(json['old_status']),
        'timestamp': (new Date(json['timestamp'])),
        'environment': WebhookEnvironmentValuesFromJSON(json['environment']),
    };
}

export function WalletTransactionStatusUpdateWebhookToJSON(value?: WalletTransactionStatusUpdateWebhook | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'webhook_type': value['webhook_type'],
        'webhook_code': value['webhook_code'],
        'transaction_id': value['transaction_id'],
        'payment_id': value['payment_id'],
        'wallet_id': value['wallet_id'],
        'new_status': WalletTransactionStatusToJSON(value['new_status']),
        'old_status': WalletTransactionStatusToJSON(value['old_status']),
        'timestamp': ((value['timestamp']).toISOString()),
        'environment': WebhookEnvironmentValuesToJSON(value['environment']),
    };
}

